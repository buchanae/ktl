// Code generated by "enumer -type=State -text"; DO NOT EDIT

package ktl

import (
	"fmt"
)

const _StateName = "WaitingPausedActiveSuccessFailed"

var _StateIndex = [...]uint8{0, 7, 13, 19, 26, 32}

func (i State) String() string {
	if i < 0 || i >= State(len(_StateIndex)-1) {
		return fmt.Sprintf("State(%d)", i)
	}
	return _StateName[_StateIndex[i]:_StateIndex[i+1]]
}

var _StateValues = []State{0, 1, 2, 3, 4}

var _StateNameToValueMap = map[string]State{
	_StateName[0:7]:   0,
	_StateName[7:13]:  1,
	_StateName[13:19]: 2,
	_StateName[19:26]: 3,
	_StateName[26:32]: 4,
}

// StateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StateString(s string) (State, error) {
	if val, ok := _StateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to State values", s)
}

// StateValues returns all values of the enum
func StateValues() []State {
	return _StateValues
}

// IsAState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i State) IsAState() bool {
	for _, v := range _StateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for State
func (i State) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for State
func (i *State) UnmarshalText(text []byte) error {
	var err error
	*i, err = StateString(string(text))
	return err
}
