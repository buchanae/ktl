// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cwl.proto

/*
Package cwl is a generated protocol buffer package.

It is generated from these files:
	cwl.proto

It has these top-level messages:
	ArrayRecord
	FieldRecord
	RecordRecord
	EnumRecord
	OneOfRecord
	TypeRecord
	RunRecord
	DataRecord
	CWLClass
	GraphRecord
	CommandInputRecordField
	EnumSchema
	ExpressionToolOutputParameter
	WorkflowStepInput
	InputRecordSchema
	WorkflowStepOutput
	CommandLineBinding
	Workflow
	InputRecordField
	CommandOutputEnumSchema
	OutputEnumSchema
	WorkflowOutputParameter
	RecordField
	InlineJavascriptRequirement
	RecordSchema
	CommandInputRecordSchema
	OutputParameter
	ExpressionTool
	CommandOutputBinding
	CommandLineTool
	CommandOutputParameter
	EnvironmentDef
	OutputRecordSchema
	InputEnumSchema
	WorkflowStep
	CommandOutputRecordField
	File
	InputParameter
	OutputRecordField
	CommandOutputRecordSchema
	CommandInputEnumSchema
	CommandInputParameter
*/
package cwl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/struct"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ArrayRecord struct {
	Items *TypeRecord `protobuf:"bytes,1,opt,name=items" json:"items,omitempty"`
}

func (m *ArrayRecord) Reset()                    { *m = ArrayRecord{} }
func (m *ArrayRecord) String() string            { return proto.CompactTextString(m) }
func (*ArrayRecord) ProtoMessage()               {}
func (*ArrayRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ArrayRecord) GetItems() *TypeRecord {
	if m != nil {
		return m.Items
	}
	return nil
}

type FieldRecord struct {
	Name string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type *TypeRecord `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *FieldRecord) Reset()                    { *m = FieldRecord{} }
func (m *FieldRecord) String() string            { return proto.CompactTextString(m) }
func (*FieldRecord) ProtoMessage()               {}
func (*FieldRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FieldRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FieldRecord) GetType() *TypeRecord {
	if m != nil {
		return m.Type
	}
	return nil
}

type RecordRecord struct {
	Name   string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Fields []*FieldRecord `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
}

func (m *RecordRecord) Reset()                    { *m = RecordRecord{} }
func (m *RecordRecord) String() string            { return proto.CompactTextString(m) }
func (*RecordRecord) ProtoMessage()               {}
func (*RecordRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RecordRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RecordRecord) GetFields() []*FieldRecord {
	if m != nil {
		return m.Fields
	}
	return nil
}

type EnumRecord struct {
	Name    string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Symbols []string `protobuf:"bytes,2,rep,name=symbols" json:"symbols,omitempty"`
}

func (m *EnumRecord) Reset()                    { *m = EnumRecord{} }
func (m *EnumRecord) String() string            { return proto.CompactTextString(m) }
func (*EnumRecord) ProtoMessage()               {}
func (*EnumRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EnumRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnumRecord) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

type OneOfRecord struct {
	Types []*TypeRecord `protobuf:"bytes,1,rep,name=types" json:"types,omitempty"`
}

func (m *OneOfRecord) Reset()                    { *m = OneOfRecord{} }
func (m *OneOfRecord) String() string            { return proto.CompactTextString(m) }
func (*OneOfRecord) ProtoMessage()               {}
func (*OneOfRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OneOfRecord) GetTypes() []*TypeRecord {
	if m != nil {
		return m.Types
	}
	return nil
}

type TypeRecord struct {
	// Types that are valid to be assigned to Type:
	//	*TypeRecord_Name
	//	*TypeRecord_Array
	//	*TypeRecord_Oneof
	//	*TypeRecord_Record
	//	*TypeRecord_Enum
	Type         isTypeRecord_Type   `protobuf_oneof:"type"`
	InputBinding *CommandLineBinding `protobuf:"bytes,6,opt,name=inputBinding" json:"inputBinding,omitempty"`
}

func (m *TypeRecord) Reset()                    { *m = TypeRecord{} }
func (m *TypeRecord) String() string            { return proto.CompactTextString(m) }
func (*TypeRecord) ProtoMessage()               {}
func (*TypeRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isTypeRecord_Type interface {
	isTypeRecord_Type()
}

type TypeRecord_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,oneof"`
}
type TypeRecord_Array struct {
	Array *ArrayRecord `protobuf:"bytes,2,opt,name=array,oneof"`
}
type TypeRecord_Oneof struct {
	Oneof *OneOfRecord `protobuf:"bytes,3,opt,name=oneof,oneof"`
}
type TypeRecord_Record struct {
	Record *RecordRecord `protobuf:"bytes,4,opt,name=record,oneof"`
}
type TypeRecord_Enum struct {
	Enum *EnumRecord `protobuf:"bytes,5,opt,name=enum,oneof"`
}

func (*TypeRecord_Name) isTypeRecord_Type()   {}
func (*TypeRecord_Array) isTypeRecord_Type()  {}
func (*TypeRecord_Oneof) isTypeRecord_Type()  {}
func (*TypeRecord_Record) isTypeRecord_Type() {}
func (*TypeRecord_Enum) isTypeRecord_Type()   {}

func (m *TypeRecord) GetType() isTypeRecord_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *TypeRecord) GetName() string {
	if x, ok := m.GetType().(*TypeRecord_Name); ok {
		return x.Name
	}
	return ""
}

func (m *TypeRecord) GetArray() *ArrayRecord {
	if x, ok := m.GetType().(*TypeRecord_Array); ok {
		return x.Array
	}
	return nil
}

func (m *TypeRecord) GetOneof() *OneOfRecord {
	if x, ok := m.GetType().(*TypeRecord_Oneof); ok {
		return x.Oneof
	}
	return nil
}

func (m *TypeRecord) GetRecord() *RecordRecord {
	if x, ok := m.GetType().(*TypeRecord_Record); ok {
		return x.Record
	}
	return nil
}

func (m *TypeRecord) GetEnum() *EnumRecord {
	if x, ok := m.GetType().(*TypeRecord_Enum); ok {
		return x.Enum
	}
	return nil
}

func (m *TypeRecord) GetInputBinding() *CommandLineBinding {
	if m != nil {
		return m.InputBinding
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TypeRecord) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TypeRecord_OneofMarshaler, _TypeRecord_OneofUnmarshaler, _TypeRecord_OneofSizer, []interface{}{
		(*TypeRecord_Name)(nil),
		(*TypeRecord_Array)(nil),
		(*TypeRecord_Oneof)(nil),
		(*TypeRecord_Record)(nil),
		(*TypeRecord_Enum)(nil),
	}
}

func _TypeRecord_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TypeRecord)
	// type
	switch x := m.Type.(type) {
	case *TypeRecord_Name:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case *TypeRecord_Array:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Array); err != nil {
			return err
		}
	case *TypeRecord_Oneof:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Oneof); err != nil {
			return err
		}
	case *TypeRecord_Record:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Record); err != nil {
			return err
		}
	case *TypeRecord_Enum:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Enum); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TypeRecord.Type has unexpected type %T", x)
	}
	return nil
}

func _TypeRecord_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TypeRecord)
	switch tag {
	case 1: // type.name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Type = &TypeRecord_Name{x}
		return true, err
	case 2: // type.array
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ArrayRecord)
		err := b.DecodeMessage(msg)
		m.Type = &TypeRecord_Array{msg}
		return true, err
	case 3: // type.oneof
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OneOfRecord)
		err := b.DecodeMessage(msg)
		m.Type = &TypeRecord_Oneof{msg}
		return true, err
	case 4: // type.record
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RecordRecord)
		err := b.DecodeMessage(msg)
		m.Type = &TypeRecord_Record{msg}
		return true, err
	case 5: // type.enum
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EnumRecord)
		err := b.DecodeMessage(msg)
		m.Type = &TypeRecord_Enum{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TypeRecord_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TypeRecord)
	// type
	switch x := m.Type.(type) {
	case *TypeRecord_Name:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case *TypeRecord_Array:
		s := proto.Size(x.Array)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TypeRecord_Oneof:
		s := proto.Size(x.Oneof)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TypeRecord_Record:
		s := proto.Size(x.Record)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TypeRecord_Enum:
		s := proto.Size(x.Enum)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RunRecord struct {
	// Types that are valid to be assigned to Run:
	//	*RunRecord_Path
	//	*RunRecord_Commandline
	//	*RunRecord_Expression
	//	*RunRecord_Workflow
	Run isRunRecord_Run `protobuf_oneof:"run"`
}

func (m *RunRecord) Reset()                    { *m = RunRecord{} }
func (m *RunRecord) String() string            { return proto.CompactTextString(m) }
func (*RunRecord) ProtoMessage()               {}
func (*RunRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isRunRecord_Run interface {
	isRunRecord_Run()
}

type RunRecord_Path struct {
	Path string `protobuf:"bytes,1,opt,name=path,oneof"`
}
type RunRecord_Commandline struct {
	Commandline *CommandLineTool `protobuf:"bytes,2,opt,name=commandline,oneof"`
}
type RunRecord_Expression struct {
	Expression *ExpressionTool `protobuf:"bytes,3,opt,name=expression,oneof"`
}
type RunRecord_Workflow struct {
	Workflow *Workflow `protobuf:"bytes,4,opt,name=workflow,oneof"`
}

func (*RunRecord_Path) isRunRecord_Run()        {}
func (*RunRecord_Commandline) isRunRecord_Run() {}
func (*RunRecord_Expression) isRunRecord_Run()  {}
func (*RunRecord_Workflow) isRunRecord_Run()    {}

func (m *RunRecord) GetRun() isRunRecord_Run {
	if m != nil {
		return m.Run
	}
	return nil
}

func (m *RunRecord) GetPath() string {
	if x, ok := m.GetRun().(*RunRecord_Path); ok {
		return x.Path
	}
	return ""
}

func (m *RunRecord) GetCommandline() *CommandLineTool {
	if x, ok := m.GetRun().(*RunRecord_Commandline); ok {
		return x.Commandline
	}
	return nil
}

func (m *RunRecord) GetExpression() *ExpressionTool {
	if x, ok := m.GetRun().(*RunRecord_Expression); ok {
		return x.Expression
	}
	return nil
}

func (m *RunRecord) GetWorkflow() *Workflow {
	if x, ok := m.GetRun().(*RunRecord_Workflow); ok {
		return x.Workflow
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RunRecord) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RunRecord_OneofMarshaler, _RunRecord_OneofUnmarshaler, _RunRecord_OneofSizer, []interface{}{
		(*RunRecord_Path)(nil),
		(*RunRecord_Commandline)(nil),
		(*RunRecord_Expression)(nil),
		(*RunRecord_Workflow)(nil),
	}
}

func _RunRecord_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RunRecord)
	// run
	switch x := m.Run.(type) {
	case *RunRecord_Path:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Path)
	case *RunRecord_Commandline:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commandline); err != nil {
			return err
		}
	case *RunRecord_Expression:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Expression); err != nil {
			return err
		}
	case *RunRecord_Workflow:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Workflow); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RunRecord.Run has unexpected type %T", x)
	}
	return nil
}

func _RunRecord_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RunRecord)
	switch tag {
	case 1: // run.path
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Run = &RunRecord_Path{x}
		return true, err
	case 2: // run.commandline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommandLineTool)
		err := b.DecodeMessage(msg)
		m.Run = &RunRecord_Commandline{msg}
		return true, err
	case 3: // run.expression
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionTool)
		err := b.DecodeMessage(msg)
		m.Run = &RunRecord_Expression{msg}
		return true, err
	case 4: // run.workflow
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Workflow)
		err := b.DecodeMessage(msg)
		m.Run = &RunRecord_Workflow{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RunRecord_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RunRecord)
	// run
	switch x := m.Run.(type) {
	case *RunRecord_Path:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Path)))
		n += len(x.Path)
	case *RunRecord_Commandline:
		s := proto.Size(x.Commandline)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RunRecord_Expression:
		s := proto.Size(x.Expression)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RunRecord_Workflow:
		s := proto.Size(x.Workflow)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DataRecord struct {
	// Types that are valid to be assigned to Data:
	//	*DataRecord_StringValue
	//	*DataRecord_StructValue
	//	*DataRecord_FloatValue
	//	*DataRecord_IntValue
	//	*DataRecord_ListValue
	//	*DataRecord_BoolValue
	Data isDataRecord_Data `protobuf_oneof:"data"`
}

func (m *DataRecord) Reset()                    { *m = DataRecord{} }
func (m *DataRecord) String() string            { return proto.CompactTextString(m) }
func (*DataRecord) ProtoMessage()               {}
func (*DataRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isDataRecord_Data interface {
	isDataRecord_Data()
}

type DataRecord_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,oneof"`
}
type DataRecord_StructValue struct {
	StructValue *google_protobuf.Struct `protobuf:"bytes,2,opt,name=struct_value,json=structValue,oneof"`
}
type DataRecord_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,3,opt,name=float_value,json=floatValue,oneof"`
}
type DataRecord_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,oneof"`
}
type DataRecord_ListValue struct {
	ListValue *google_protobuf.ListValue `protobuf:"bytes,5,opt,name=list_value,json=listValue,oneof"`
}
type DataRecord_BoolValue struct {
	BoolValue bool `protobuf:"varint,6,opt,name=bool_value,json=boolValue,oneof"`
}

func (*DataRecord_StringValue) isDataRecord_Data() {}
func (*DataRecord_StructValue) isDataRecord_Data() {}
func (*DataRecord_FloatValue) isDataRecord_Data()  {}
func (*DataRecord_IntValue) isDataRecord_Data()    {}
func (*DataRecord_ListValue) isDataRecord_Data()   {}
func (*DataRecord_BoolValue) isDataRecord_Data()   {}

func (m *DataRecord) GetData() isDataRecord_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DataRecord) GetStringValue() string {
	if x, ok := m.GetData().(*DataRecord_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *DataRecord) GetStructValue() *google_protobuf.Struct {
	if x, ok := m.GetData().(*DataRecord_StructValue); ok {
		return x.StructValue
	}
	return nil
}

func (m *DataRecord) GetFloatValue() float64 {
	if x, ok := m.GetData().(*DataRecord_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *DataRecord) GetIntValue() int64 {
	if x, ok := m.GetData().(*DataRecord_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *DataRecord) GetListValue() *google_protobuf.ListValue {
	if x, ok := m.GetData().(*DataRecord_ListValue); ok {
		return x.ListValue
	}
	return nil
}

func (m *DataRecord) GetBoolValue() bool {
	if x, ok := m.GetData().(*DataRecord_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DataRecord) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DataRecord_OneofMarshaler, _DataRecord_OneofUnmarshaler, _DataRecord_OneofSizer, []interface{}{
		(*DataRecord_StringValue)(nil),
		(*DataRecord_StructValue)(nil),
		(*DataRecord_FloatValue)(nil),
		(*DataRecord_IntValue)(nil),
		(*DataRecord_ListValue)(nil),
		(*DataRecord_BoolValue)(nil),
	}
}

func _DataRecord_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DataRecord)
	// data
	switch x := m.Data.(type) {
	case *DataRecord_StringValue:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *DataRecord_StructValue:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StructValue); err != nil {
			return err
		}
	case *DataRecord_FloatValue:
		b.EncodeVarint(3<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.FloatValue))
	case *DataRecord_IntValue:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntValue))
	case *DataRecord_ListValue:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListValue); err != nil {
			return err
		}
	case *DataRecord_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("DataRecord.Data has unexpected type %T", x)
	}
	return nil
}

func _DataRecord_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DataRecord)
	switch tag {
	case 1: // data.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &DataRecord_StringValue{x}
		return true, err
	case 2: // data.struct_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Struct)
		err := b.DecodeMessage(msg)
		m.Data = &DataRecord_StructValue{msg}
		return true, err
	case 3: // data.float_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Data = &DataRecord_FloatValue{math.Float64frombits(x)}
		return true, err
	case 4: // data.int_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &DataRecord_IntValue{int64(x)}
		return true, err
	case 5: // data.list_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.ListValue)
		err := b.DecodeMessage(msg)
		m.Data = &DataRecord_ListValue{msg}
		return true, err
	case 6: // data.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &DataRecord_BoolValue{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _DataRecord_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DataRecord)
	// data
	switch x := m.Data.(type) {
	case *DataRecord_StringValue:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *DataRecord_StructValue:
		s := proto.Size(x.StructValue)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DataRecord_FloatValue:
		n += proto.SizeVarint(3<<3 | proto.WireFixed64)
		n += 8
	case *DataRecord_IntValue:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IntValue))
	case *DataRecord_ListValue:
		s := proto.Size(x.ListValue)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DataRecord_BoolValue:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CWLClass struct {
	// Types that are valid to be assigned to Class:
	//	*CWLClass_Workflow
	//	*CWLClass_Commandline
	//	*CWLClass_Expression
	Class isCWLClass_Class `protobuf_oneof:"class"`
}

func (m *CWLClass) Reset()                    { *m = CWLClass{} }
func (m *CWLClass) String() string            { return proto.CompactTextString(m) }
func (*CWLClass) ProtoMessage()               {}
func (*CWLClass) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isCWLClass_Class interface {
	isCWLClass_Class()
}

type CWLClass_Workflow struct {
	Workflow *Workflow `protobuf:"bytes,1,opt,name=workflow,oneof"`
}
type CWLClass_Commandline struct {
	Commandline *CommandLineTool `protobuf:"bytes,2,opt,name=commandline,oneof"`
}
type CWLClass_Expression struct {
	Expression *ExpressionTool `protobuf:"bytes,3,opt,name=expression,oneof"`
}

func (*CWLClass_Workflow) isCWLClass_Class()    {}
func (*CWLClass_Commandline) isCWLClass_Class() {}
func (*CWLClass_Expression) isCWLClass_Class()  {}

func (m *CWLClass) GetClass() isCWLClass_Class {
	if m != nil {
		return m.Class
	}
	return nil
}

func (m *CWLClass) GetWorkflow() *Workflow {
	if x, ok := m.GetClass().(*CWLClass_Workflow); ok {
		return x.Workflow
	}
	return nil
}

func (m *CWLClass) GetCommandline() *CommandLineTool {
	if x, ok := m.GetClass().(*CWLClass_Commandline); ok {
		return x.Commandline
	}
	return nil
}

func (m *CWLClass) GetExpression() *ExpressionTool {
	if x, ok := m.GetClass().(*CWLClass_Expression); ok {
		return x.Expression
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CWLClass) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CWLClass_OneofMarshaler, _CWLClass_OneofUnmarshaler, _CWLClass_OneofSizer, []interface{}{
		(*CWLClass_Workflow)(nil),
		(*CWLClass_Commandline)(nil),
		(*CWLClass_Expression)(nil),
	}
}

func _CWLClass_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CWLClass)
	// class
	switch x := m.Class.(type) {
	case *CWLClass_Workflow:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Workflow); err != nil {
			return err
		}
	case *CWLClass_Commandline:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commandline); err != nil {
			return err
		}
	case *CWLClass_Expression:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Expression); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CWLClass.Class has unexpected type %T", x)
	}
	return nil
}

func _CWLClass_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CWLClass)
	switch tag {
	case 1: // class.workflow
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Workflow)
		err := b.DecodeMessage(msg)
		m.Class = &CWLClass_Workflow{msg}
		return true, err
	case 2: // class.commandline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommandLineTool)
		err := b.DecodeMessage(msg)
		m.Class = &CWLClass_Commandline{msg}
		return true, err
	case 3: // class.expression
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExpressionTool)
		err := b.DecodeMessage(msg)
		m.Class = &CWLClass_Expression{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CWLClass_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CWLClass)
	// class
	switch x := m.Class.(type) {
	case *CWLClass_Workflow:
		s := proto.Size(x.Workflow)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CWLClass_Commandline:
		s := proto.Size(x.Commandline)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CWLClass_Expression:
		s := proto.Size(x.Expression)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GraphRecord struct {
	CwlVersion string      `protobuf:"bytes,1,opt,name=cwlVersion" json:"cwlVersion,omitempty"`
	Graph      []*CWLClass `protobuf:"bytes,2,rep,name=graph" json:"graph,omitempty"`
}

func (m *GraphRecord) Reset()                    { *m = GraphRecord{} }
func (m *GraphRecord) String() string            { return proto.CompactTextString(m) }
func (*GraphRecord) ProtoMessage()               {}
func (*GraphRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GraphRecord) GetCwlVersion() string {
	if m != nil {
		return m.CwlVersion
	}
	return ""
}

func (m *GraphRecord) GetGraph() []*CWLClass {
	if m != nil {
		return m.Graph
	}
	return nil
}

type CommandInputRecordField struct {
	Doc          []string            `protobuf:"bytes,1,rep,name=doc" json:"doc,omitempty"`
	InputBinding *CommandLineBinding `protobuf:"bytes,2,opt,name=inputBinding" json:"inputBinding,omitempty"`
	Type         *TypeRecord         `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Name         string              `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Label        string              `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
}

func (m *CommandInputRecordField) Reset()                    { *m = CommandInputRecordField{} }
func (m *CommandInputRecordField) String() string            { return proto.CompactTextString(m) }
func (*CommandInputRecordField) ProtoMessage()               {}
func (*CommandInputRecordField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CommandInputRecordField) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *CommandInputRecordField) GetInputBinding() *CommandLineBinding {
	if m != nil {
		return m.InputBinding
	}
	return nil
}

func (m *CommandInputRecordField) GetType() *TypeRecord {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CommandInputRecordField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CommandInputRecordField) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type EnumSchema struct {
	Symbols []string `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
}

func (m *EnumSchema) Reset()                    { *m = EnumSchema{} }
func (m *EnumSchema) String() string            { return proto.CompactTextString(m) }
func (*EnumSchema) ProtoMessage()               {}
func (*EnumSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *EnumSchema) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

type ExpressionToolOutputParameter struct {
	Streamable     bool                  `protobuf:"varint,1,opt,name=streamable" json:"streamable,omitempty"`
	Format         []string              `protobuf:"bytes,2,rep,name=format" json:"format,omitempty"`
	Doc            []string              `protobuf:"bytes,3,rep,name=doc" json:"doc,omitempty"`
	Label          string                `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
	OutputBinding  *CommandOutputBinding `protobuf:"bytes,5,opt,name=outputBinding" json:"outputBinding,omitempty"`
	SecondaryFiles []string              `protobuf:"bytes,6,rep,name=secondaryFiles" json:"secondaryFiles,omitempty"`
	Type           *TypeRecord           `protobuf:"bytes,7,opt,name=type" json:"type,omitempty"`
	Id             string                `protobuf:"bytes,8,opt,name=id" json:"id,omitempty"`
}

func (m *ExpressionToolOutputParameter) Reset()                    { *m = ExpressionToolOutputParameter{} }
func (m *ExpressionToolOutputParameter) String() string            { return proto.CompactTextString(m) }
func (*ExpressionToolOutputParameter) ProtoMessage()               {}
func (*ExpressionToolOutputParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ExpressionToolOutputParameter) GetStreamable() bool {
	if m != nil {
		return m.Streamable
	}
	return false
}

func (m *ExpressionToolOutputParameter) GetFormat() []string {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *ExpressionToolOutputParameter) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *ExpressionToolOutputParameter) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ExpressionToolOutputParameter) GetOutputBinding() *CommandOutputBinding {
	if m != nil {
		return m.OutputBinding
	}
	return nil
}

func (m *ExpressionToolOutputParameter) GetSecondaryFiles() []string {
	if m != nil {
		return m.SecondaryFiles
	}
	return nil
}

func (m *ExpressionToolOutputParameter) GetType() *TypeRecord {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ExpressionToolOutputParameter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type WorkflowStepInput struct {
	Default   *google_protobuf.Value `protobuf:"bytes,1,opt,name=default" json:"default,omitempty"`
	Source    []string               `protobuf:"bytes,2,rep,name=source" json:"source,omitempty"`
	ValueFrom string                 `protobuf:"bytes,3,opt,name=valueFrom" json:"valueFrom,omitempty"`
	LinkMerge string                 `protobuf:"bytes,4,opt,name=linkMerge" json:"linkMerge,omitempty"`
	Id        string                 `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
}

func (m *WorkflowStepInput) Reset()                    { *m = WorkflowStepInput{} }
func (m *WorkflowStepInput) String() string            { return proto.CompactTextString(m) }
func (*WorkflowStepInput) ProtoMessage()               {}
func (*WorkflowStepInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *WorkflowStepInput) GetDefault() *google_protobuf.Value {
	if m != nil {
		return m.Default
	}
	return nil
}

func (m *WorkflowStepInput) GetSource() []string {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *WorkflowStepInput) GetValueFrom() string {
	if m != nil {
		return m.ValueFrom
	}
	return ""
}

func (m *WorkflowStepInput) GetLinkMerge() string {
	if m != nil {
		return m.LinkMerge
	}
	return ""
}

func (m *WorkflowStepInput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type InputRecordSchema struct {
	Fields []*RecordField `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	Label  string         `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (m *InputRecordSchema) Reset()                    { *m = InputRecordSchema{} }
func (m *InputRecordSchema) String() string            { return proto.CompactTextString(m) }
func (*InputRecordSchema) ProtoMessage()               {}
func (*InputRecordSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *InputRecordSchema) GetFields() []*RecordField {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *InputRecordSchema) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type WorkflowStepOutput struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *WorkflowStepOutput) Reset()                    { *m = WorkflowStepOutput{} }
func (m *WorkflowStepOutput) String() string            { return proto.CompactTextString(m) }
func (*WorkflowStepOutput) ProtoMessage()               {}
func (*WorkflowStepOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *WorkflowStepOutput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CommandLineBinding struct {
	ShellQuote    bool   `protobuf:"varint,1,opt,name=shellQuote" json:"shellQuote,omitempty"`
	LoadContents  bool   `protobuf:"varint,2,opt,name=loadContents" json:"loadContents,omitempty"`
	Separate      bool   `protobuf:"varint,3,opt,name=separate" json:"separate,omitempty"`
	ValueFrom     string `protobuf:"bytes,4,opt,name=valueFrom" json:"valueFrom,omitempty"`
	Prefix        string `protobuf:"bytes,5,opt,name=prefix" json:"prefix,omitempty"`
	ItemSeparator string `protobuf:"bytes,6,opt,name=itemSeparator" json:"itemSeparator,omitempty"`
	Position      int64  `protobuf:"varint,7,opt,name=position" json:"position,omitempty"`
}

func (m *CommandLineBinding) Reset()                    { *m = CommandLineBinding{} }
func (m *CommandLineBinding) String() string            { return proto.CompactTextString(m) }
func (*CommandLineBinding) ProtoMessage()               {}
func (*CommandLineBinding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CommandLineBinding) GetShellQuote() bool {
	if m != nil {
		return m.ShellQuote
	}
	return false
}

func (m *CommandLineBinding) GetLoadContents() bool {
	if m != nil {
		return m.LoadContents
	}
	return false
}

func (m *CommandLineBinding) GetSeparate() bool {
	if m != nil {
		return m.Separate
	}
	return false
}

func (m *CommandLineBinding) GetValueFrom() string {
	if m != nil {
		return m.ValueFrom
	}
	return ""
}

func (m *CommandLineBinding) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *CommandLineBinding) GetItemSeparator() string {
	if m != nil {
		return m.ItemSeparator
	}
	return ""
}

func (m *CommandLineBinding) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

type Workflow struct {
	CwlVersion   string                     `protobuf:"bytes,1,opt,name=cwlVersion" json:"cwlVersion,omitempty"`
	Inputs       []*InputParameter          `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	Requirements []*google_protobuf.Struct  `protobuf:"bytes,3,rep,name=requirements" json:"requirements,omitempty"`
	Outputs      []*WorkflowOutputParameter `protobuf:"bytes,4,rep,name=outputs" json:"outputs,omitempty"`
	Class        string                     `protobuf:"bytes,5,opt,name=class" json:"class,omitempty"`
	Label        string                     `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	Steps        []*WorkflowStep            `protobuf:"bytes,7,rep,name=steps" json:"steps,omitempty"`
	Doc          []string                   `protobuf:"bytes,8,rep,name=doc" json:"doc,omitempty"`
	Id           string                     `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
	Hints        []*google_protobuf.Struct  `protobuf:"bytes,10,rep,name=hints" json:"hints,omitempty"`
}

func (m *Workflow) Reset()                    { *m = Workflow{} }
func (m *Workflow) String() string            { return proto.CompactTextString(m) }
func (*Workflow) ProtoMessage()               {}
func (*Workflow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Workflow) GetCwlVersion() string {
	if m != nil {
		return m.CwlVersion
	}
	return ""
}

func (m *Workflow) GetInputs() []*InputParameter {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Workflow) GetRequirements() []*google_protobuf.Struct {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *Workflow) GetOutputs() []*WorkflowOutputParameter {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *Workflow) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *Workflow) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Workflow) GetSteps() []*WorkflowStep {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Workflow) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *Workflow) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Workflow) GetHints() []*google_protobuf.Struct {
	if m != nil {
		return m.Hints
	}
	return nil
}

type InputRecordField struct {
	Doc          []string            `protobuf:"bytes,1,rep,name=doc" json:"doc,omitempty"`
	InputBinding *CommandLineBinding `protobuf:"bytes,2,opt,name=inputBinding" json:"inputBinding,omitempty"`
	Type         *TypeRecord         `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Name         string              `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Label        string              `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
}

func (m *InputRecordField) Reset()                    { *m = InputRecordField{} }
func (m *InputRecordField) String() string            { return proto.CompactTextString(m) }
func (*InputRecordField) ProtoMessage()               {}
func (*InputRecordField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *InputRecordField) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *InputRecordField) GetInputBinding() *CommandLineBinding {
	if m != nil {
		return m.InputBinding
	}
	return nil
}

func (m *InputRecordField) GetType() *TypeRecord {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *InputRecordField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InputRecordField) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type CommandOutputEnumSchema struct {
	Symbols       []string              `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
	OutputBinding *CommandOutputBinding `protobuf:"bytes,2,opt,name=outputBinding" json:"outputBinding,omitempty"`
	Label         string                `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
}

func (m *CommandOutputEnumSchema) Reset()                    { *m = CommandOutputEnumSchema{} }
func (m *CommandOutputEnumSchema) String() string            { return proto.CompactTextString(m) }
func (*CommandOutputEnumSchema) ProtoMessage()               {}
func (*CommandOutputEnumSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CommandOutputEnumSchema) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *CommandOutputEnumSchema) GetOutputBinding() *CommandOutputBinding {
	if m != nil {
		return m.OutputBinding
	}
	return nil
}

func (m *CommandOutputEnumSchema) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type OutputEnumSchema struct {
	Symbols       []string              `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
	OutputBinding *CommandOutputBinding `protobuf:"bytes,2,opt,name=outputBinding" json:"outputBinding,omitempty"`
	Label         string                `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
}

func (m *OutputEnumSchema) Reset()                    { *m = OutputEnumSchema{} }
func (m *OutputEnumSchema) String() string            { return proto.CompactTextString(m) }
func (*OutputEnumSchema) ProtoMessage()               {}
func (*OutputEnumSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *OutputEnumSchema) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *OutputEnumSchema) GetOutputBinding() *CommandOutputBinding {
	if m != nil {
		return m.OutputBinding
	}
	return nil
}

func (m *OutputEnumSchema) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type WorkflowOutputParameter struct {
	Streamable     bool                  `protobuf:"varint,1,opt,name=streamable" json:"streamable,omitempty"`
	Format         []string              `protobuf:"bytes,2,rep,name=format" json:"format,omitempty"`
	Doc            []string              `protobuf:"bytes,3,rep,name=doc" json:"doc,omitempty"`
	OutputSource   []string              `protobuf:"bytes,4,rep,name=outputSource" json:"outputSource,omitempty"`
	LinkMerge      string                `protobuf:"bytes,5,opt,name=linkMerge" json:"linkMerge,omitempty"`
	Label          string                `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	OutputBinding  *CommandOutputBinding `protobuf:"bytes,7,opt,name=outputBinding" json:"outputBinding,omitempty"`
	SecondaryFiles []string              `protobuf:"bytes,8,rep,name=secondaryFiles" json:"secondaryFiles,omitempty"`
	Type           *TypeRecord           `protobuf:"bytes,9,opt,name=type" json:"type,omitempty"`
	Id             string                `protobuf:"bytes,10,opt,name=id" json:"id,omitempty"`
}

func (m *WorkflowOutputParameter) Reset()                    { *m = WorkflowOutputParameter{} }
func (m *WorkflowOutputParameter) String() string            { return proto.CompactTextString(m) }
func (*WorkflowOutputParameter) ProtoMessage()               {}
func (*WorkflowOutputParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *WorkflowOutputParameter) GetStreamable() bool {
	if m != nil {
		return m.Streamable
	}
	return false
}

func (m *WorkflowOutputParameter) GetFormat() []string {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *WorkflowOutputParameter) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *WorkflowOutputParameter) GetOutputSource() []string {
	if m != nil {
		return m.OutputSource
	}
	return nil
}

func (m *WorkflowOutputParameter) GetLinkMerge() string {
	if m != nil {
		return m.LinkMerge
	}
	return ""
}

func (m *WorkflowOutputParameter) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *WorkflowOutputParameter) GetOutputBinding() *CommandOutputBinding {
	if m != nil {
		return m.OutputBinding
	}
	return nil
}

func (m *WorkflowOutputParameter) GetSecondaryFiles() []string {
	if m != nil {
		return m.SecondaryFiles
	}
	return nil
}

func (m *WorkflowOutputParameter) GetType() *TypeRecord {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *WorkflowOutputParameter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RecordField struct {
	Doc  []string    `protobuf:"bytes,1,rep,name=doc" json:"doc,omitempty"`
	Type *TypeRecord `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Name string      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *RecordField) Reset()                    { *m = RecordField{} }
func (m *RecordField) String() string            { return proto.CompactTextString(m) }
func (*RecordField) ProtoMessage()               {}
func (*RecordField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RecordField) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *RecordField) GetType() *TypeRecord {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *RecordField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type InlineJavascriptRequirement struct {
	Class         string   `protobuf:"bytes,1,opt,name=class" json:"class,omitempty"`
	ExpressionLib []string `protobuf:"bytes,2,rep,name=expressionLib" json:"expressionLib,omitempty"`
}

func (m *InlineJavascriptRequirement) Reset()                    { *m = InlineJavascriptRequirement{} }
func (m *InlineJavascriptRequirement) String() string            { return proto.CompactTextString(m) }
func (*InlineJavascriptRequirement) ProtoMessage()               {}
func (*InlineJavascriptRequirement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *InlineJavascriptRequirement) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *InlineJavascriptRequirement) GetExpressionLib() []string {
	if m != nil {
		return m.ExpressionLib
	}
	return nil
}

type RecordSchema struct {
	Fields []*RecordField `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
}

func (m *RecordSchema) Reset()                    { *m = RecordSchema{} }
func (m *RecordSchema) String() string            { return proto.CompactTextString(m) }
func (*RecordSchema) ProtoMessage()               {}
func (*RecordSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RecordSchema) GetFields() []*RecordField {
	if m != nil {
		return m.Fields
	}
	return nil
}

type CommandInputRecordSchema struct {
	Fields []*RecordField `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	Label  string         `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (m *CommandInputRecordSchema) Reset()                    { *m = CommandInputRecordSchema{} }
func (m *CommandInputRecordSchema) String() string            { return proto.CompactTextString(m) }
func (*CommandInputRecordSchema) ProtoMessage()               {}
func (*CommandInputRecordSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CommandInputRecordSchema) GetFields() []*RecordField {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *CommandInputRecordSchema) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type OutputParameter struct {
	Streamable     bool                  `protobuf:"varint,1,opt,name=streamable" json:"streamable,omitempty"`
	Format         []string              `protobuf:"bytes,2,rep,name=format" json:"format,omitempty"`
	Doc            []string              `protobuf:"bytes,3,rep,name=doc" json:"doc,omitempty"`
	Label          string                `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
	OutputBinding  *CommandOutputBinding `protobuf:"bytes,5,opt,name=outputBinding" json:"outputBinding,omitempty"`
	SecondaryFiles []string              `protobuf:"bytes,6,rep,name=secondaryFiles" json:"secondaryFiles,omitempty"`
	Id             string                `protobuf:"bytes,7,opt,name=id" json:"id,omitempty"`
}

func (m *OutputParameter) Reset()                    { *m = OutputParameter{} }
func (m *OutputParameter) String() string            { return proto.CompactTextString(m) }
func (*OutputParameter) ProtoMessage()               {}
func (*OutputParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *OutputParameter) GetStreamable() bool {
	if m != nil {
		return m.Streamable
	}
	return false
}

func (m *OutputParameter) GetFormat() []string {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *OutputParameter) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *OutputParameter) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *OutputParameter) GetOutputBinding() *CommandOutputBinding {
	if m != nil {
		return m.OutputBinding
	}
	return nil
}

func (m *OutputParameter) GetSecondaryFiles() []string {
	if m != nil {
		return m.SecondaryFiles
	}
	return nil
}

func (m *OutputParameter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ExpressionTool struct {
	CwlVersion   string                           `protobuf:"bytes,1,opt,name=cwlVersion" json:"cwlVersion,omitempty"`
	Inputs       []*InputParameter                `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	Requirements []*google_protobuf.Struct        `protobuf:"bytes,3,rep,name=requirements" json:"requirements,omitempty"`
	Outputs      []*ExpressionToolOutputParameter `protobuf:"bytes,4,rep,name=outputs" json:"outputs,omitempty"`
	Class        string                           `protobuf:"bytes,5,opt,name=class" json:"class,omitempty"`
	Label        string                           `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	Doc          []string                         `protobuf:"bytes,7,rep,name=doc" json:"doc,omitempty"`
	Expression   string                           `protobuf:"bytes,8,opt,name=expression" json:"expression,omitempty"`
	Id           string                           `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
	Hints        []*google_protobuf.Struct        `protobuf:"bytes,10,rep,name=hints" json:"hints,omitempty"`
}

func (m *ExpressionTool) Reset()                    { *m = ExpressionTool{} }
func (m *ExpressionTool) String() string            { return proto.CompactTextString(m) }
func (*ExpressionTool) ProtoMessage()               {}
func (*ExpressionTool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ExpressionTool) GetCwlVersion() string {
	if m != nil {
		return m.CwlVersion
	}
	return ""
}

func (m *ExpressionTool) GetInputs() []*InputParameter {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *ExpressionTool) GetRequirements() []*google_protobuf.Struct {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *ExpressionTool) GetOutputs() []*ExpressionToolOutputParameter {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *ExpressionTool) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *ExpressionTool) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ExpressionTool) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *ExpressionTool) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func (m *ExpressionTool) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ExpressionTool) GetHints() []*google_protobuf.Struct {
	if m != nil {
		return m.Hints
	}
	return nil
}

type CommandOutputBinding struct {
	Glob         []string `protobuf:"bytes,1,rep,name=glob" json:"glob,omitempty"`
	LoadContents bool     `protobuf:"varint,2,opt,name=loadContents" json:"loadContents,omitempty"`
	OutputEval   string   `protobuf:"bytes,3,opt,name=outputEval" json:"outputEval,omitempty"`
}

func (m *CommandOutputBinding) Reset()                    { *m = CommandOutputBinding{} }
func (m *CommandOutputBinding) String() string            { return proto.CompactTextString(m) }
func (*CommandOutputBinding) ProtoMessage()               {}
func (*CommandOutputBinding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CommandOutputBinding) GetGlob() []string {
	if m != nil {
		return m.Glob
	}
	return nil
}

func (m *CommandOutputBinding) GetLoadContents() bool {
	if m != nil {
		return m.LoadContents
	}
	return false
}

func (m *CommandOutputBinding) GetOutputEval() string {
	if m != nil {
		return m.OutputEval
	}
	return ""
}

type CommandLineTool struct {
	CwlVersion         string                    `protobuf:"bytes,1,opt,name=cwlVersion" json:"cwlVersion,omitempty"`
	Inputs             []*CommandInputParameter  `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	PermanentFailCodes []int64                   `protobuf:"varint,3,rep,packed,name=permanentFailCodes" json:"permanentFailCodes,omitempty"`
	Requirements       []*google_protobuf.Struct `protobuf:"bytes,4,rep,name=requirements" json:"requirements,omitempty"`
	SuccessCodes       []int64                   `protobuf:"varint,5,rep,packed,name=successCodes" json:"successCodes,omitempty"`
	Stdout             string                    `protobuf:"bytes,6,opt,name=stdout" json:"stdout,omitempty"`
	Outputs            []*CommandOutputParameter `protobuf:"bytes,7,rep,name=outputs" json:"outputs,omitempty"`
	Class              string                    `protobuf:"bytes,8,opt,name=class" json:"class,omitempty"`
	Stdin              string                    `protobuf:"bytes,9,opt,name=stdin" json:"stdin,omitempty"`
	BaseCommand        []string                  `protobuf:"bytes,10,rep,name=baseCommand" json:"baseCommand,omitempty"`
	Label              string                    `protobuf:"bytes,11,opt,name=label" json:"label,omitempty"`
	Arguments          []*CommandLineBinding     `protobuf:"bytes,12,rep,name=arguments" json:"arguments,omitempty"`
	Stderr             string                    `protobuf:"bytes,13,opt,name=stderr" json:"stderr,omitempty"`
	Doc                []string                  `protobuf:"bytes,14,rep,name=doc" json:"doc,omitempty"`
	TemporaryFailCodes []int64                   `protobuf:"varint,15,rep,packed,name=temporaryFailCodes" json:"temporaryFailCodes,omitempty"`
	Id                 string                    `protobuf:"bytes,16,opt,name=id" json:"id,omitempty"`
	Hints              []*google_protobuf.Struct `protobuf:"bytes,17,rep,name=hints" json:"hints,omitempty"`
}

func (m *CommandLineTool) Reset()                    { *m = CommandLineTool{} }
func (m *CommandLineTool) String() string            { return proto.CompactTextString(m) }
func (*CommandLineTool) ProtoMessage()               {}
func (*CommandLineTool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CommandLineTool) GetCwlVersion() string {
	if m != nil {
		return m.CwlVersion
	}
	return ""
}

func (m *CommandLineTool) GetInputs() []*CommandInputParameter {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *CommandLineTool) GetPermanentFailCodes() []int64 {
	if m != nil {
		return m.PermanentFailCodes
	}
	return nil
}

func (m *CommandLineTool) GetRequirements() []*google_protobuf.Struct {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *CommandLineTool) GetSuccessCodes() []int64 {
	if m != nil {
		return m.SuccessCodes
	}
	return nil
}

func (m *CommandLineTool) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *CommandLineTool) GetOutputs() []*CommandOutputParameter {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *CommandLineTool) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *CommandLineTool) GetStdin() string {
	if m != nil {
		return m.Stdin
	}
	return ""
}

func (m *CommandLineTool) GetBaseCommand() []string {
	if m != nil {
		return m.BaseCommand
	}
	return nil
}

func (m *CommandLineTool) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *CommandLineTool) GetArguments() []*CommandLineBinding {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *CommandLineTool) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *CommandLineTool) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *CommandLineTool) GetTemporaryFailCodes() []int64 {
	if m != nil {
		return m.TemporaryFailCodes
	}
	return nil
}

func (m *CommandLineTool) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CommandLineTool) GetHints() []*google_protobuf.Struct {
	if m != nil {
		return m.Hints
	}
	return nil
}

type CommandOutputParameter struct {
	Streamable     bool                  `protobuf:"varint,1,opt,name=streamable" json:"streamable,omitempty"`
	Format         []string              `protobuf:"bytes,2,rep,name=format" json:"format,omitempty"`
	Doc            []string              `protobuf:"bytes,3,rep,name=doc" json:"doc,omitempty"`
	Label          string                `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
	OutputBinding  *CommandOutputBinding `protobuf:"bytes,5,opt,name=outputBinding" json:"outputBinding,omitempty"`
	SecondaryFiles []string              `protobuf:"bytes,6,rep,name=secondaryFiles" json:"secondaryFiles,omitempty"`
	Type           *TypeRecord           `protobuf:"bytes,7,opt,name=type" json:"type,omitempty"`
	Id             string                `protobuf:"bytes,8,opt,name=id" json:"id,omitempty"`
}

func (m *CommandOutputParameter) Reset()                    { *m = CommandOutputParameter{} }
func (m *CommandOutputParameter) String() string            { return proto.CompactTextString(m) }
func (*CommandOutputParameter) ProtoMessage()               {}
func (*CommandOutputParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CommandOutputParameter) GetStreamable() bool {
	if m != nil {
		return m.Streamable
	}
	return false
}

func (m *CommandOutputParameter) GetFormat() []string {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *CommandOutputParameter) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *CommandOutputParameter) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *CommandOutputParameter) GetOutputBinding() *CommandOutputBinding {
	if m != nil {
		return m.OutputBinding
	}
	return nil
}

func (m *CommandOutputParameter) GetSecondaryFiles() []string {
	if m != nil {
		return m.SecondaryFiles
	}
	return nil
}

func (m *CommandOutputParameter) GetType() *TypeRecord {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CommandOutputParameter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type EnvironmentDef struct {
	EnvName  string `protobuf:"bytes,1,opt,name=envName" json:"envName,omitempty"`
	EnvValue string `protobuf:"bytes,2,opt,name=envValue" json:"envValue,omitempty"`
}

func (m *EnvironmentDef) Reset()                    { *m = EnvironmentDef{} }
func (m *EnvironmentDef) String() string            { return proto.CompactTextString(m) }
func (*EnvironmentDef) ProtoMessage()               {}
func (*EnvironmentDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *EnvironmentDef) GetEnvName() string {
	if m != nil {
		return m.EnvName
	}
	return ""
}

func (m *EnvironmentDef) GetEnvValue() string {
	if m != nil {
		return m.EnvValue
	}
	return ""
}

type OutputRecordSchema struct {
	Fields []*RecordField `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	Label  string         `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (m *OutputRecordSchema) Reset()                    { *m = OutputRecordSchema{} }
func (m *OutputRecordSchema) String() string            { return proto.CompactTextString(m) }
func (*OutputRecordSchema) ProtoMessage()               {}
func (*OutputRecordSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *OutputRecordSchema) GetFields() []*RecordField {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *OutputRecordSchema) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type InputEnumSchema struct {
	Symbols      []string            `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
	InputBinding *CommandLineBinding `protobuf:"bytes,2,opt,name=inputBinding" json:"inputBinding,omitempty"`
	Label        string              `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
}

func (m *InputEnumSchema) Reset()                    { *m = InputEnumSchema{} }
func (m *InputEnumSchema) String() string            { return proto.CompactTextString(m) }
func (*InputEnumSchema) ProtoMessage()               {}
func (*InputEnumSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *InputEnumSchema) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *InputEnumSchema) GetInputBinding() *CommandLineBinding {
	if m != nil {
		return m.InputBinding
	}
	return nil
}

func (m *InputEnumSchema) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type WorkflowStep struct {
	Requirements  []*google_protobuf.Struct `protobuf:"bytes,1,rep,name=requirements" json:"requirements,omitempty"`
	Doc           []string                  `protobuf:"bytes,2,rep,name=doc" json:"doc,omitempty"`
	Label         string                    `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
	In            []*WorkflowStepInput      `protobuf:"bytes,4,rep,name=in" json:"in,omitempty"`
	Run           *RunRecord                `protobuf:"bytes,5,opt,name=run" json:"run,omitempty"`
	Scatter       []string                  `protobuf:"bytes,6,rep,name=scatter" json:"scatter,omitempty"`
	Out           []*WorkflowStepOutput     `protobuf:"bytes,7,rep,name=out" json:"out,omitempty"`
	ScatterMethod string                    `protobuf:"bytes,8,opt,name=scatterMethod" json:"scatterMethod,omitempty"`
	Id            string                    `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
	Hints         []*google_protobuf.Struct `protobuf:"bytes,10,rep,name=hints" json:"hints,omitempty"`
}

func (m *WorkflowStep) Reset()                    { *m = WorkflowStep{} }
func (m *WorkflowStep) String() string            { return proto.CompactTextString(m) }
func (*WorkflowStep) ProtoMessage()               {}
func (*WorkflowStep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *WorkflowStep) GetRequirements() []*google_protobuf.Struct {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *WorkflowStep) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *WorkflowStep) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *WorkflowStep) GetIn() []*WorkflowStepInput {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *WorkflowStep) GetRun() *RunRecord {
	if m != nil {
		return m.Run
	}
	return nil
}

func (m *WorkflowStep) GetScatter() []string {
	if m != nil {
		return m.Scatter
	}
	return nil
}

func (m *WorkflowStep) GetOut() []*WorkflowStepOutput {
	if m != nil {
		return m.Out
	}
	return nil
}

func (m *WorkflowStep) GetScatterMethod() string {
	if m != nil {
		return m.ScatterMethod
	}
	return ""
}

func (m *WorkflowStep) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *WorkflowStep) GetHints() []*google_protobuf.Struct {
	if m != nil {
		return m.Hints
	}
	return nil
}

type CommandOutputRecordField struct {
	Doc           []string              `protobuf:"bytes,1,rep,name=doc" json:"doc,omitempty"`
	OutputBinding *CommandOutputBinding `protobuf:"bytes,2,opt,name=outputBinding" json:"outputBinding,omitempty"`
	Type          *TypeRecord           `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Name          string                `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *CommandOutputRecordField) Reset()                    { *m = CommandOutputRecordField{} }
func (m *CommandOutputRecordField) String() string            { return proto.CompactTextString(m) }
func (*CommandOutputRecordField) ProtoMessage()               {}
func (*CommandOutputRecordField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *CommandOutputRecordField) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *CommandOutputRecordField) GetOutputBinding() *CommandOutputBinding {
	if m != nil {
		return m.OutputBinding
	}
	return nil
}

func (m *CommandOutputRecordField) GetType() *TypeRecord {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CommandOutputRecordField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type File struct {
	Format         []string `protobuf:"bytes,1,rep,name=format" json:"format,omitempty"`
	Checksum       string   `protobuf:"bytes,2,opt,name=checksum" json:"checksum,omitempty"`
	Basename       string   `protobuf:"bytes,3,opt,name=basename" json:"basename,omitempty"`
	Nameext        string   `protobuf:"bytes,4,opt,name=nameext" json:"nameext,omitempty"`
	Nameroot       string   `protobuf:"bytes,5,opt,name=nameroot" json:"nameroot,omitempty"`
	Location       string   `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
	SecondaryFiles []string `protobuf:"bytes,7,rep,name=secondaryFiles" json:"secondaryFiles,omitempty"`
	Path           string   `protobuf:"bytes,8,opt,name=path" json:"path,omitempty"`
	Dirname        string   `protobuf:"bytes,9,opt,name=dirname" json:"dirname,omitempty"`
	Contents       string   `protobuf:"bytes,10,opt,name=contents" json:"contents,omitempty"`
	Size           int64    `protobuf:"varint,11,opt,name=size" json:"size,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *File) GetFormat() []string {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *File) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *File) GetBasename() string {
	if m != nil {
		return m.Basename
	}
	return ""
}

func (m *File) GetNameext() string {
	if m != nil {
		return m.Nameext
	}
	return ""
}

func (m *File) GetNameroot() string {
	if m != nil {
		return m.Nameroot
	}
	return ""
}

func (m *File) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *File) GetSecondaryFiles() []string {
	if m != nil {
		return m.SecondaryFiles
	}
	return nil
}

func (m *File) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *File) GetDirname() string {
	if m != nil {
		return m.Dirname
	}
	return ""
}

func (m *File) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

func (m *File) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type InputParameter struct {
	Streamable     bool                    `protobuf:"varint,1,opt,name=streamable" json:"streamable,omitempty"`
	InputBinding   *CommandLineBinding     `protobuf:"bytes,2,opt,name=inputBinding" json:"inputBinding,omitempty"`
	Format         []string                `protobuf:"bytes,3,rep,name=format" json:"format,omitempty"`
	Default        *google_protobuf.Struct `protobuf:"bytes,4,opt,name=default" json:"default,omitempty"`
	Doc            []string                `protobuf:"bytes,5,rep,name=doc" json:"doc,omitempty"`
	Label          string                  `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	SecondaryFiles []string                `protobuf:"bytes,7,rep,name=secondaryFiles" json:"secondaryFiles,omitempty"`
	Type           *TypeRecord             `protobuf:"bytes,8,opt,name=type" json:"type,omitempty"`
	Id             string                  `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
}

func (m *InputParameter) Reset()                    { *m = InputParameter{} }
func (m *InputParameter) String() string            { return proto.CompactTextString(m) }
func (*InputParameter) ProtoMessage()               {}
func (*InputParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *InputParameter) GetStreamable() bool {
	if m != nil {
		return m.Streamable
	}
	return false
}

func (m *InputParameter) GetInputBinding() *CommandLineBinding {
	if m != nil {
		return m.InputBinding
	}
	return nil
}

func (m *InputParameter) GetFormat() []string {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *InputParameter) GetDefault() *google_protobuf.Struct {
	if m != nil {
		return m.Default
	}
	return nil
}

func (m *InputParameter) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *InputParameter) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *InputParameter) GetSecondaryFiles() []string {
	if m != nil {
		return m.SecondaryFiles
	}
	return nil
}

func (m *InputParameter) GetType() *TypeRecord {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *InputParameter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type OutputRecordField struct {
	Doc           []string              `protobuf:"bytes,1,rep,name=doc" json:"doc,omitempty"`
	OutputBinding *CommandOutputBinding `protobuf:"bytes,2,opt,name=outputBinding" json:"outputBinding,omitempty"`
	Type          *TypeRecord           `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Name          string                `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *OutputRecordField) Reset()                    { *m = OutputRecordField{} }
func (m *OutputRecordField) String() string            { return proto.CompactTextString(m) }
func (*OutputRecordField) ProtoMessage()               {}
func (*OutputRecordField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *OutputRecordField) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *OutputRecordField) GetOutputBinding() *CommandOutputBinding {
	if m != nil {
		return m.OutputBinding
	}
	return nil
}

func (m *OutputRecordField) GetType() *TypeRecord {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *OutputRecordField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CommandOutputRecordSchema struct {
	Fields []*RecordField `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	Label  string         `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (m *CommandOutputRecordSchema) Reset()                    { *m = CommandOutputRecordSchema{} }
func (m *CommandOutputRecordSchema) String() string            { return proto.CompactTextString(m) }
func (*CommandOutputRecordSchema) ProtoMessage()               {}
func (*CommandOutputRecordSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *CommandOutputRecordSchema) GetFields() []*RecordField {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *CommandOutputRecordSchema) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type CommandInputEnumSchema struct {
	Symbols      []string            `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
	InputBinding *CommandLineBinding `protobuf:"bytes,2,opt,name=inputBinding" json:"inputBinding,omitempty"`
	Label        string              `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
}

func (m *CommandInputEnumSchema) Reset()                    { *m = CommandInputEnumSchema{} }
func (m *CommandInputEnumSchema) String() string            { return proto.CompactTextString(m) }
func (*CommandInputEnumSchema) ProtoMessage()               {}
func (*CommandInputEnumSchema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *CommandInputEnumSchema) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *CommandInputEnumSchema) GetInputBinding() *CommandLineBinding {
	if m != nil {
		return m.InputBinding
	}
	return nil
}

func (m *CommandInputEnumSchema) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type CommandInputParameter struct {
	Streamable     bool                   `protobuf:"varint,1,opt,name=streamable" json:"streamable,omitempty"`
	InputBinding   *CommandLineBinding    `protobuf:"bytes,2,opt,name=inputBinding" json:"inputBinding,omitempty"`
	Format         []string               `protobuf:"bytes,3,rep,name=format" json:"format,omitempty"`
	Default        *google_protobuf.Value `protobuf:"bytes,4,opt,name=default" json:"default,omitempty"`
	Doc            []string               `protobuf:"bytes,5,rep,name=doc" json:"doc,omitempty"`
	Label          string                 `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	SecondaryFiles []string               `protobuf:"bytes,7,rep,name=secondaryFiles" json:"secondaryFiles,omitempty"`
	Type           *TypeRecord            `protobuf:"bytes,8,opt,name=type" json:"type,omitempty"`
	Id             string                 `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
}

func (m *CommandInputParameter) Reset()                    { *m = CommandInputParameter{} }
func (m *CommandInputParameter) String() string            { return proto.CompactTextString(m) }
func (*CommandInputParameter) ProtoMessage()               {}
func (*CommandInputParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *CommandInputParameter) GetStreamable() bool {
	if m != nil {
		return m.Streamable
	}
	return false
}

func (m *CommandInputParameter) GetInputBinding() *CommandLineBinding {
	if m != nil {
		return m.InputBinding
	}
	return nil
}

func (m *CommandInputParameter) GetFormat() []string {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *CommandInputParameter) GetDefault() *google_protobuf.Value {
	if m != nil {
		return m.Default
	}
	return nil
}

func (m *CommandInputParameter) GetDoc() []string {
	if m != nil {
		return m.Doc
	}
	return nil
}

func (m *CommandInputParameter) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *CommandInputParameter) GetSecondaryFiles() []string {
	if m != nil {
		return m.SecondaryFiles
	}
	return nil
}

func (m *CommandInputParameter) GetType() *TypeRecord {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CommandInputParameter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*ArrayRecord)(nil), "ArrayRecord")
	proto.RegisterType((*FieldRecord)(nil), "FieldRecord")
	proto.RegisterType((*RecordRecord)(nil), "RecordRecord")
	proto.RegisterType((*EnumRecord)(nil), "EnumRecord")
	proto.RegisterType((*OneOfRecord)(nil), "OneOfRecord")
	proto.RegisterType((*TypeRecord)(nil), "TypeRecord")
	proto.RegisterType((*RunRecord)(nil), "RunRecord")
	proto.RegisterType((*DataRecord)(nil), "DataRecord")
	proto.RegisterType((*CWLClass)(nil), "CWLClass")
	proto.RegisterType((*GraphRecord)(nil), "GraphRecord")
	proto.RegisterType((*CommandInputRecordField)(nil), "CommandInputRecordField")
	proto.RegisterType((*EnumSchema)(nil), "EnumSchema")
	proto.RegisterType((*ExpressionToolOutputParameter)(nil), "ExpressionToolOutputParameter")
	proto.RegisterType((*WorkflowStepInput)(nil), "WorkflowStepInput")
	proto.RegisterType((*InputRecordSchema)(nil), "InputRecordSchema")
	proto.RegisterType((*WorkflowStepOutput)(nil), "WorkflowStepOutput")
	proto.RegisterType((*CommandLineBinding)(nil), "CommandLineBinding")
	proto.RegisterType((*Workflow)(nil), "Workflow")
	proto.RegisterType((*InputRecordField)(nil), "InputRecordField")
	proto.RegisterType((*CommandOutputEnumSchema)(nil), "CommandOutputEnumSchema")
	proto.RegisterType((*OutputEnumSchema)(nil), "OutputEnumSchema")
	proto.RegisterType((*WorkflowOutputParameter)(nil), "WorkflowOutputParameter")
	proto.RegisterType((*RecordField)(nil), "RecordField")
	proto.RegisterType((*InlineJavascriptRequirement)(nil), "InlineJavascriptRequirement")
	proto.RegisterType((*RecordSchema)(nil), "RecordSchema")
	proto.RegisterType((*CommandInputRecordSchema)(nil), "CommandInputRecordSchema")
	proto.RegisterType((*OutputParameter)(nil), "OutputParameter")
	proto.RegisterType((*ExpressionTool)(nil), "ExpressionTool")
	proto.RegisterType((*CommandOutputBinding)(nil), "CommandOutputBinding")
	proto.RegisterType((*CommandLineTool)(nil), "CommandLineTool")
	proto.RegisterType((*CommandOutputParameter)(nil), "CommandOutputParameter")
	proto.RegisterType((*EnvironmentDef)(nil), "EnvironmentDef")
	proto.RegisterType((*OutputRecordSchema)(nil), "OutputRecordSchema")
	proto.RegisterType((*InputEnumSchema)(nil), "InputEnumSchema")
	proto.RegisterType((*WorkflowStep)(nil), "WorkflowStep")
	proto.RegisterType((*CommandOutputRecordField)(nil), "CommandOutputRecordField")
	proto.RegisterType((*File)(nil), "File")
	proto.RegisterType((*InputParameter)(nil), "InputParameter")
	proto.RegisterType((*OutputRecordField)(nil), "OutputRecordField")
	proto.RegisterType((*CommandOutputRecordSchema)(nil), "CommandOutputRecordSchema")
	proto.RegisterType((*CommandInputEnumSchema)(nil), "CommandInputEnumSchema")
	proto.RegisterType((*CommandInputParameter)(nil), "CommandInputParameter")
}

func init() { proto.RegisterFile("cwl.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0xbd, 0x93, 0x1c, 0x47,
	0x15, 0xbf, 0x99, 0xfd, 0x9c, 0xb7, 0x7b, 0x1f, 0x6a, 0xe4, 0xd3, 0x22, 0x64, 0x7d, 0x8c, 0x85,
	0xe5, 0x84, 0xb1, 0x24, 0x5c, 0x05, 0x85, 0x48, 0xb8, 0xb3, 0x8e, 0x33, 0x25, 0xfb, 0x4c, 0x9f,
	0x4a, 0x2a, 0x22, 0xaa, 0x77, 0xb6, 0x77, 0x6f, 0x4a, 0xb3, 0xd3, 0x4b, 0x4f, 0xcf, 0x49, 0xe7,
	0x84, 0x22, 0x21, 0x24, 0xa3, 0x9c, 0x91, 0x51, 0x05, 0x09, 0x44, 0x24, 0xf0, 0x57, 0x10, 0x93,
	0x3b, 0xc2, 0x7f, 0x01, 0x09, 0xd5, 0x5f, 0x33, 0x3d, 0xbb, 0x7b, 0x7b, 0x27, 0xe9, 0xca, 0x32,
	0x38, 0xda, 0x7d, 0x1f, 0x33, 0xdd, 0xfd, 0xde, 0xef, 0xfd, 0xde, 0xeb, 0x81, 0x20, 0x7e, 0x9e,
	0x46, 0x33, 0xce, 0x04, 0xbb, 0x7a, 0x6d, 0xc2, 0xd8, 0x24, 0xa5, 0xef, 0x2b, 0x69, 0x58, 0x8c,
	0xdf, 0xcf, 0x05, 0x2f, 0x62, 0xa1, 0xad, 0xe1, 0x5d, 0xe8, 0xfd, 0x84, 0x73, 0x72, 0x82, 0x69,
	0xcc, 0xf8, 0x08, 0xdd, 0x82, 0x56, 0x22, 0xe8, 0x34, 0x1f, 0x78, 0x37, 0xbd, 0xf7, 0x7a, 0xf7,
	0x7b, 0xd1, 0xe3, 0x93, 0x19, 0xd5, 0x36, 0xac, 0x2d, 0xe1, 0x0e, 0xf4, 0xf6, 0x12, 0x9a, 0x8e,
	0xcc, 0x13, 0x08, 0x9a, 0x19, 0x99, 0x52, 0xf5, 0x40, 0x80, 0xd5, 0x7f, 0x74, 0x03, 0x9a, 0xe2,
	0x64, 0x46, 0x07, 0xfe, 0xe2, 0x4b, 0x94, 0x21, 0xdc, 0x87, 0xbe, 0x91, 0x4f, 0x7f, 0xc9, 0x6d,
	0x68, 0x8f, 0xe5, 0x3a, 0xf9, 0xc0, 0xbf, 0xd9, 0x78, 0xaf, 0x77, 0xbf, 0x1f, 0x39, 0xcb, 0x62,
	0x63, 0x0b, 0x7f, 0x04, 0xf0, 0x30, 0x2b, 0xa6, 0x2b, 0xde, 0x33, 0x80, 0x4e, 0x7e, 0x32, 0x1d,
	0xb2, 0x54, 0xbf, 0x28, 0xc0, 0x56, 0x94, 0x67, 0x3f, 0xc8, 0xe8, 0xc1, 0xb8, 0x3a, 0xbb, 0xdc,
	0x9c, 0x3c, 0x7b, 0x63, 0xe1, 0xec, 0xca, 0x12, 0xfe, 0xc7, 0x03, 0xa8, 0xb4, 0xe8, 0xb2, 0xbb,
	0xdc, 0xfe, 0x5a, 0xb9, 0xf1, 0x16, 0x91, 0x21, 0x35, 0xc7, 0xef, 0x47, 0x4e, 0x80, 0xf7, 0xd7,
	0xb0, 0x36, 0x4a, 0x2f, 0x96, 0x51, 0x36, 0x1e, 0x34, 0x8c, 0x97, 0xb3, 0x15, 0xe9, 0xa5, 0x8c,
	0xe8, 0x0e, 0xb4, 0xb9, 0x52, 0x0d, 0x9a, 0xca, 0x6d, 0x3d, 0x72, 0xe3, 0xb6, 0xbf, 0x86, 0x8d,
	0x19, 0xdd, 0x82, 0x26, 0xcd, 0x8a, 0xe9, 0xa0, 0x65, 0x42, 0x5e, 0x05, 0x45, 0xee, 0x4b, 0x9a,
	0xd0, 0x0f, 0xa0, 0x9f, 0x64, 0xb3, 0x42, 0xec, 0x24, 0xd9, 0x28, 0xc9, 0x26, 0x83, 0xb6, 0x72,
	0xfd, 0x56, 0xb4, 0xcb, 0xa6, 0x53, 0x92, 0x8d, 0x1e, 0x25, 0x19, 0x35, 0x26, 0x5c, 0x73, 0xdc,
	0x69, 0xeb, 0x74, 0x86, 0x7f, 0xf7, 0x20, 0xc0, 0x45, 0x56, 0x1d, 0x7e, 0x46, 0xc4, 0x51, 0x75,
	0x78, 0x29, 0xa1, 0x0f, 0xa0, 0x17, 0xeb, 0xf7, 0xa5, 0x49, 0x66, 0x11, 0xb0, 0xe5, 0xae, 0xf1,
	0x98, 0xb1, 0x74, 0x7f, 0x0d, 0xbb, 0x6e, 0xe8, 0x1e, 0x00, 0x7d, 0x31, 0xe3, 0x34, 0xcf, 0x13,
	0x96, 0x99, 0x88, 0x6c, 0x46, 0x0f, 0x4b, 0x95, 0x79, 0xc6, 0x71, 0x42, 0x77, 0xa0, 0xfb, 0x9c,
	0xf1, 0x67, 0xe3, 0x94, 0x3d, 0x37, 0xb1, 0x09, 0xa2, 0xa7, 0x46, 0xb1, 0xbf, 0x86, 0x4b, 0xe3,
	0x4e, 0x0b, 0x1a, 0xbc, 0xc8, 0xc2, 0xcf, 0x7d, 0x80, 0x0f, 0x89, 0x20, 0x66, 0xf7, 0xef, 0x40,
	0x3f, 0x17, 0x3c, 0xc9, 0x26, 0xbf, 0x3c, 0x26, 0x69, 0x51, 0xa5, 0xb0, 0xa7, 0xb5, 0x4f, 0xa4,
	0x12, 0xfd, 0x58, 0x39, 0x15, 0xb1, 0x30, 0x4e, 0xfa, 0x34, 0x57, 0x22, 0x5d, 0x51, 0x91, 0xad,
	0xa8, 0xe8, 0x50, 0x39, 0x99, 0xa7, 0x8b, 0x58, 0xe8, 0xa7, 0x6f, 0x41, 0x6f, 0x9c, 0x32, 0x62,
	0x1f, 0x96, 0xa7, 0xf2, 0xe4, 0x21, 0x94, 0x52, 0xbb, 0xbc, 0x0d, 0x41, 0x92, 0x59, 0x07, 0x79,
	0x8a, 0x86, 0xdc, 0x7a, 0x92, 0x19, 0xf3, 0x03, 0x80, 0x34, 0xc9, 0xad, 0x5d, 0xa7, 0xf6, 0xea,
	0xc2, 0xea, 0x8f, 0x92, 0x5c, 0xfb, 0xef, 0xaf, 0xe1, 0x20, 0xb5, 0x02, 0xba, 0x01, 0x30, 0x64,
	0x2c, 0x35, 0x0f, 0xcb, 0x64, 0x77, 0xa5, 0x83, 0xd4, 0x29, 0x07, 0x99, 0xd6, 0x11, 0x11, 0x24,
	0xfc, 0xa3, 0x07, 0xdd, 0xdd, 0xa7, 0x8f, 0x76, 0x53, 0x92, 0xe7, 0xb5, 0xb0, 0x7a, 0x2b, 0xc2,
	0xfa, 0x95, 0x25, 0x7a, 0xa7, 0x03, 0xad, 0x58, 0x6e, 0x2d, 0xfc, 0x04, 0x7a, 0x3f, 0xe5, 0x64,
	0x76, 0x64, 0x32, 0x78, 0x1d, 0x20, 0x7e, 0x9e, 0x3e, 0xa1, 0x5c, 0xbd, 0x4a, 0x57, 0xbc, 0xa3,
	0x41, 0x37, 0xa0, 0x35, 0x91, 0xee, 0x86, 0x3e, 0x82, 0xc8, 0x9e, 0x11, 0x6b, 0x7d, 0xf8, 0x57,
	0x0f, 0xae, 0x98, 0xed, 0x7e, 0x24, 0xe1, 0xae, 0xdf, 0xab, 0x48, 0x06, 0x6d, 0x41, 0x63, 0xc4,
	0x62, 0xc5, 0x04, 0x01, 0x96, 0x7f, 0x17, 0xaa, 0xc7, 0x3f, 0x67, 0xf5, 0x94, 0x64, 0xd8, 0x38,
	0x85, 0x0c, 0x4b, 0xd2, 0x6a, 0x3a, 0xa4, 0x75, 0x19, 0x5a, 0x29, 0x19, 0xd2, 0x54, 0x25, 0x3d,
	0xc0, 0x5a, 0x08, 0xdf, 0xd5, 0x64, 0x77, 0x18, 0x1f, 0xd1, 0x29, 0x71, 0x89, 0xcd, 0xab, 0x13,
	0xdb, 0xef, 0x7d, 0x78, 0xbb, 0x1e, 0xd3, 0x83, 0x42, 0xcc, 0x0a, 0xf1, 0x29, 0xe1, 0x64, 0x4a,
	0x05, 0xe5, 0x32, 0x78, 0xb9, 0xe0, 0x94, 0x4c, 0xc9, 0x30, 0xd5, 0xe0, 0xef, 0x62, 0x47, 0x83,
	0xb6, 0xa1, 0x3d, 0x66, 0x7c, 0x4a, 0x84, 0xe1, 0x4c, 0x23, 0xd9, 0xb8, 0x34, 0xaa, 0xb8, 0x94,
	0x3b, 0x6d, 0x3a, 0x3b, 0x45, 0x0f, 0x60, 0x9d, 0xa9, 0x25, 0x6d, 0xb8, 0x34, 0x78, 0xdf, 0xb2,
	0xe1, 0x3a, 0x70, 0x8d, 0xb8, 0xee, 0x8b, 0xde, 0x85, 0x8d, 0x9c, 0xc6, 0x2c, 0x1b, 0x11, 0x7e,
	0xb2, 0x97, 0xa4, 0x34, 0x1f, 0xb4, 0xd5, 0x7a, 0x73, 0xda, 0x32, 0xb2, 0x9d, 0xd3, 0x22, 0xbb,
	0x01, 0x7e, 0x32, 0x1a, 0x74, 0xd5, 0xc6, 0xfc, 0x64, 0x14, 0xfe, 0xd9, 0x83, 0x4b, 0x16, 0xcc,
	0x87, 0x82, 0xce, 0x54, 0xda, 0xd1, 0x5d, 0xe8, 0x8c, 0xe8, 0x98, 0x14, 0xa9, 0x30, 0x88, 0xdf,
	0x5e, 0x28, 0x31, 0x55, 0x30, 0xd8, 0xba, 0xc9, 0xe8, 0xe4, 0xac, 0xe0, 0x31, 0xb5, 0xd1, 0xd1,
	0x12, 0xba, 0x06, 0x81, 0xaa, 0xb6, 0x3d, 0xce, 0xa6, 0x2a, 0xdf, 0x01, 0xae, 0x14, 0xd2, 0x9a,
	0x26, 0xd9, 0xb3, 0x8f, 0x29, 0x9f, 0xd8, 0x64, 0x57, 0x0a, 0xb3, 0xd7, 0x56, 0xb9, 0xd7, 0x03,
	0xb8, 0xe4, 0xa0, 0xd2, 0xa4, 0xbc, 0xea, 0x89, 0x9e, 0xe9, 0x89, 0x0e, 0x68, 0x6d, 0x4f, 0xac,
	0x52, 0xe2, 0xbb, 0xe0, 0xb9, 0x0d, 0xc8, 0x3d, 0xbb, 0xce, 0x80, 0x59, 0xd6, 0x2b, 0x97, 0xfd,
	0xb7, 0x07, 0x68, 0x11, 0xd2, 0x0a, 0x2f, 0x47, 0x34, 0x4d, 0x7f, 0x5e, 0x30, 0x51, 0xe1, 0xa5,
	0xd4, 0xa0, 0x10, 0xfa, 0x29, 0x23, 0xa3, 0x5d, 0x96, 0x09, 0x9a, 0x89, 0x5c, 0xad, 0xdc, 0xc5,
	0x35, 0x1d, 0xba, 0x0a, 0xdd, 0x9c, 0xce, 0x08, 0x27, 0x42, 0x17, 0x43, 0x17, 0x97, 0x72, 0x3d,
	0x72, 0xcd, 0xf9, 0xc8, 0x6d, 0x43, 0x7b, 0xc6, 0xe9, 0x38, 0x79, 0x61, 0xe2, 0x63, 0x24, 0x74,
	0x1b, 0xd6, 0xe5, 0x4c, 0x72, 0xa8, 0xdf, 0xc2, 0xb8, 0x62, 0xb9, 0x00, 0xd7, 0x95, 0x72, 0xdd,
	0x19, 0xcb, 0x13, 0x21, 0x69, 0x42, 0x42, 0xa5, 0x81, 0x4b, 0x39, 0xfc, 0xc2, 0x87, 0xae, 0x8d,
	0xca, 0x99, 0x8c, 0x72, 0x07, 0xda, 0xaa, 0xb2, 0xed, 0x44, 0xb2, 0x19, 0xa9, 0x0c, 0x95, 0x55,
	0x85, 0x8d, 0x19, 0x3d, 0x80, 0x3e, 0xa7, 0xbf, 0x2a, 0x12, 0x4e, 0xa7, 0x2a, 0x1a, 0x0d, 0xe5,
	0x7e, 0x5a, 0xdf, 0xc0, 0x35, 0x67, 0x74, 0x1f, 0x3a, 0xba, 0x1c, 0xf2, 0x41, 0x53, 0x3d, 0x37,
	0x28, 0x09, 0x78, 0xae, 0x8a, 0xb1, 0x75, 0x94, 0x19, 0x57, 0x1c, 0x69, 0xe9, 0x42, 0x09, 0x15,
	0x0e, 0xda, 0x6e, 0x69, 0xbe, 0x03, 0xad, 0x5c, 0xd0, 0x59, 0x3e, 0xe8, 0xa8, 0xb7, 0xaf, 0x47,
	0x2e, 0x2a, 0xb0, 0xb6, 0xd9, 0x3a, 0xef, 0x56, 0x75, 0xae, 0x81, 0x12, 0x58, 0xa0, 0xa0, 0xef,
	0x41, 0xeb, 0x28, 0x91, 0x87, 0x83, 0xd5, 0x87, 0xd3, 0x5e, 0xe1, 0x9f, 0x3c, 0xd8, 0xfa, 0x1f,
	0x61, 0xd9, 0xdf, 0x56, 0x7d, 0x41, 0x07, 0xfc, 0x3c, 0x9c, 0xbb, 0xc8, 0x78, 0xfe, 0x4b, 0x30,
	0x5e, 0xb9, 0x91, 0x86, 0xbb, 0x91, 0x5f, 0xc3, 0xd6, 0x9b, 0xdd, 0xc0, 0x3f, 0x7d, 0xb8, 0x72,
	0x0a, 0xf6, 0x2e, 0xb0, 0x83, 0x84, 0xd0, 0xd7, 0x9b, 0x39, 0xd4, 0x9c, 0xda, 0x54, 0xa6, 0x9a,
	0xae, 0xce, 0x9d, 0xad, 0x79, 0xee, 0x5c, 0x0e, 0xf4, 0x85, 0x80, 0x74, 0x5e, 0xab, 0x07, 0x75,
	0x57, 0xf6, 0xa0, 0x60, 0x75, 0x0f, 0x82, 0x92, 0x60, 0x1f, 0x43, 0x6f, 0x75, 0x09, 0x9c, 0x75,
	0x79, 0x2a, 0x91, 0xdc, 0xa8, 0x90, 0x1c, 0xfe, 0x02, 0xbe, 0xf3, 0x51, 0x26, 0x27, 0xac, 0x9f,
	0x91, 0x63, 0x92, 0xc7, 0x3c, 0x99, 0x09, 0x5c, 0x91, 0x4a, 0xc5, 0x0f, 0x9e, 0xcb, 0x0f, 0xb7,
	0x61, 0xbd, 0x9a, 0xb3, 0x1e, 0x25, 0x43, 0x93, 0xa9, 0xba, 0x32, 0xfc, 0xc0, 0xde, 0xd5, 0x5e,
	0xa6, 0x07, 0x85, 0x4f, 0x60, 0xb0, 0x38, 0x5b, 0x5d, 0x40, 0x17, 0xfb, 0xc2, 0x83, 0xcd, 0xff,
	0xcb, 0x61, 0x46, 0xe3, 0xa4, 0x53, 0xe2, 0xe4, 0x4b, 0x1f, 0x36, 0xea, 0x33, 0xdc, 0xd7, 0xa4,
	0x3f, 0xfd, 0x70, 0xbe, 0x3f, 0x5d, 0x8f, 0x56, 0xce, 0x9a, 0xaf, 0xd6, 0xa5, 0x4c, 0x6e, 0x3a,
	0x55, 0x6e, 0xae, 0xd7, 0xae, 0x0e, 0x7a, 0xa8, 0x73, 0x2f, 0x84, 0xaf, 0xd9, 0xa0, 0x32, 0xb8,
	0xbc, 0x2c, 0x9d, 0xb2, 0xda, 0x26, 0x29, 0x1b, 0x9a, 0x0a, 0x55, 0xff, 0xcf, 0x35, 0xed, 0x5c,
	0x07, 0xd0, 0xe7, 0x7e, 0x78, 0x4c, 0x2c, 0xad, 0x3a, 0x9a, 0xf0, 0xcb, 0x26, 0x6c, 0xce, 0x5d,
	0x96, 0xce, 0x4c, 0x70, 0x34, 0x97, 0xe0, 0xed, 0xc8, 0xad, 0xb1, 0xc5, 0x3c, 0x47, 0x80, 0x66,
	0x94, 0x4f, 0x49, 0x46, 0x33, 0xb1, 0x47, 0x92, 0x74, 0x97, 0x8d, 0xa8, 0xce, 0x76, 0x03, 0x2f,
	0xb1, 0x2c, 0xe0, 0xa2, 0xf9, 0x32, 0xb8, 0x08, 0xa1, 0x9f, 0x17, 0x71, 0x4c, 0xf3, 0x5c, 0x2f,
	0xd3, 0x52, 0xcb, 0xd4, 0x74, 0x6a, 0x70, 0x16, 0x23, 0x56, 0x08, 0x93, 0x6c, 0x23, 0xa1, 0x7b,
	0x15, 0xa6, 0x3a, 0x66, 0xcd, 0x5a, 0x32, 0x56, 0x81, 0xa9, 0x3b, 0x07, 0xa6, 0x5c, 0x8c, 0x92,
	0xcc, 0xe0, 0x40, 0x0b, 0xe8, 0x26, 0xf4, 0x86, 0x24, 0xa7, 0xe6, 0x95, 0x0a, 0x10, 0x01, 0x76,
	0x55, 0x15, 0x08, 0x7b, 0x2e, 0x08, 0xef, 0x41, 0x40, 0xf8, 0xa4, 0xd0, 0xc1, 0xe8, 0xab, 0x8d,
	0x2d, 0x1d, 0x45, 0x2a, 0x2f, 0x73, 0x42, 0xca, 0xf9, 0x60, 0xbd, 0x3c, 0x21, 0xe5, 0xdc, 0xe2,
	0x79, 0xa3, 0xc2, 0x73, 0x04, 0x48, 0xd0, 0xe9, 0x8c, 0x71, 0x49, 0x01, 0x65, 0x72, 0x36, 0x75,
	0x72, 0x16, 0x2d, 0x06, 0xdf, 0x5b, 0x8b, 0xf8, 0xbe, 0x74, 0x2e, 0x7c, 0xff, 0xce, 0x87, 0xed,
	0xe5, 0x31, 0xfd, 0x86, 0x5e, 0x06, 0xf7, 0x60, 0xe3, 0x61, 0x76, 0x9c, 0x70, 0x96, 0xc9, 0xcc,
	0x7d, 0x48, 0xc7, 0x72, 0xb6, 0xa2, 0xd9, 0xf1, 0x27, 0xd5, 0x07, 0x44, 0x2b, 0xca, 0x2b, 0x04,
	0xcd, 0x8e, 0x9f, 0x94, 0x1f, 0x81, 0x02, 0x5c, 0xca, 0xe1, 0xa7, 0x80, 0xf4, 0x01, 0x2e, 0xac,
	0xc7, 0x7d, 0x06, 0x9b, 0xaa, 0xa0, 0xcf, 0x35, 0xf6, 0xbd, 0xf2, 0xc4, 0xbc, 0x7c, 0xe4, 0xfb,
	0x97, 0x0f, 0x7d, 0xf7, 0x42, 0xb0, 0xc0, 0x09, 0xde, 0xcb, 0x70, 0x82, 0x41, 0x88, 0xbf, 0x04,
	0x21, 0xee, 0xaa, 0x28, 0x04, 0x3f, 0xc9, 0x0c, 0xdd, 0xa0, 0x68, 0xe1, 0x8a, 0x8e, 0xfd, 0x24,
	0x43, 0xd7, 0xd4, 0x77, 0x3c, 0x83, 0x1d, 0x88, 0xca, 0x0f, 0x91, 0x58, 0xaa, 0x55, 0x80, 0x62,
	0x22, 0x04, 0xe5, 0x06, 0x1f, 0x56, 0x44, 0xdf, 0x85, 0x86, 0x24, 0x9c, 0x8e, 0x29, 0xdf, 0xc5,
	0x3b, 0x30, 0x96, 0x76, 0x39, 0x0c, 0x99, 0x27, 0x3e, 0xa6, 0xe2, 0x88, 0x59, 0xa4, 0xd4, 0x95,
	0xaf, 0xdb, 0x64, 0xfe, 0xe0, 0x95, 0x63, 0x91, 0x8b, 0x99, 0xd3, 0x46, 0xc1, 0xd7, 0x1a, 0xe9,
	0x5f, 0xe5, 0x46, 0x14, 0xfe, 0xc5, 0x87, 0xa6, 0xac, 0x27, 0xa7, 0xe6, 0xbd, 0x5a, 0xcd, 0x5f,
	0x85, 0x6e, 0x7c, 0x44, 0xe3, 0x67, 0x79, 0x31, 0xb5, 0x95, 0x60, 0x65, 0x69, 0x93, 0x9c, 0xea,
	0x0c, 0xa7, 0xa5, 0x2c, 0xf3, 0x23, 0x7f, 0xe9, 0x0b, 0x61, 0xd6, 0xb3, 0xa2, 0x7c, 0x4a, 0xfe,
	0xe5, 0x8c, 0x09, 0x33, 0x18, 0x94, 0xb2, 0xb4, 0xa5, 0x2c, 0x26, 0xea, 0xea, 0xae, 0x3b, 0x46,
	0x29, 0x2f, 0x21, 0x86, 0xce, 0x52, 0x62, 0x40, 0xe6, 0x3b, 0xb5, 0xce, 0xa7, 0xfe, 0x4a, 0x3d,
	0x80, 0xce, 0x28, 0xe1, 0x6a, 0xa3, 0x3a, 0x97, 0x56, 0x54, 0xe7, 0xb3, 0x6d, 0x1d, 0xcc, 0xf9,
	0x6c, 0x4b, 0x47, 0xd0, 0xcc, 0x93, 0xcf, 0xa8, 0xea, 0x11, 0x0d, 0xac, 0xfe, 0x87, 0x7f, 0xf3,
	0x61, 0xa3, 0xde, 0x7d, 0xcf, 0xa4, 0xd3, 0x57, 0xae, 0xd8, 0x2a, 0x27, 0x8d, 0x5a, 0x4e, 0xee,
	0x55, 0x1f, 0xb0, 0x9a, 0x2b, 0xbf, 0x50, 0x57, 0x5f, 0xb0, 0x0c, 0xd6, 0x5a, 0x4b, 0x0a, 0xb3,
	0x36, 0x86, 0x9d, 0x37, 0xc8, 0x16, 0x6c, 0xdd, 0xd5, 0xec, 0x5b, 0x16, 0x4e, 0xf8, 0xb9, 0x07,
	0x97, 0xbe, 0x9e, 0x25, 0xf0, 0x14, 0xbe, 0xbd, 0xa4, 0x44, 0x2f, 0x80, 0xd6, 0x7f, 0xe3, 0x95,
	0x1d, 0xf8, 0x8d, 0xd1, 0xfb, 0x3f, 0x7c, 0x78, 0x6b, 0xe9, 0xcc, 0xf8, 0xd5, 0xa3, 0xf6, 0xee,
	0x3c, 0x6a, 0xcf, 0xfc, 0xec, 0xfa, 0xa6, 0x41, 0x3b, 0x6c, 0xab, 0x9d, 0x7d, 0xff, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xa8, 0x87, 0x1e, 0x9d, 0x5e, 0x1d, 0x00, 0x00,
}
