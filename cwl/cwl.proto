
syntax = "proto3";

import "google/protobuf/struct.proto";

message ArrayRecord {
    TypeRecord items = 1;
}

message FieldRecord {
    string name = 1;
    TypeRecord type = 2;
}

message RecordRecord {
    string name = 1;
    repeated FieldRecord fields = 2;
}

message EnumRecord {
    string name = 1;
    repeated string symbols = 2;
}

message OneOfRecord {
    repeated TypeRecord types = 1;
}

message TypeRecord {
    oneof type {
        string name = 1;
        ArrayRecord array = 2;
        OneOfRecord oneof = 3;
        RecordRecord record = 4;
        EnumRecord enum = 5;
    }
    CommandLineBinding inputBinding = 6;
}

message RunRecord {
    oneof run {
        string path = 1;
        CommandLineTool commandline = 2;
        ExpressionTool expression = 3;
        Workflow workflow = 4;
    }
}

message DataRecord {
    oneof data {
        string string_value = 1;
        google.protobuf.Struct struct_value = 2;
        double float_value = 3;
        int64 int_value = 4;
        google.protobuf.ListValue list_value = 5;
        bool bool_value = 6;
    }
}

message CWLClass {
    oneof class {
        Workflow workflow = 1;
        CommandLineTool commandline = 2;
        ExpressionTool expression = 3;
    }
}

message GraphRecord {
    string cwlVersion = 1;
    repeated CWLClass graph = 2;
}

message CommandInputRecordField {
    repeated string doc = 1; 
    CommandLineBinding inputBinding = 2; 
    TypeRecord type = 3; //[u'PrimitiveType', {u'fields': [{u'doc': u'Defines the fields of the record.', u'jsonldPredicate': {u'_id': u'https://w3id.org/cwl/salad#fields', u'mapSubject': u'name', u'mapPredicate': u'type'}, u'type': [u'null', {u'items': u'RecordField', u'type': u'array'}], u'name': u'fields'}, {u'doc': u'Must be `record`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'record'], u'type': u'enum', u'name': u'Record_symbol'}, u'name': u'type'}], u'type': u'record', u'name': u'RecordSchema'}, {u'doc': u'Define an enumerated type.\n', u'type': u'record', u'name': u'EnumSchema', u'fields': [{u'doc': u'Defines the set of valid symbols.', u'jsonldPredicate': {u'_type': u'@id', u'_id': u'https://w3id.org/cwl/salad#symbols', u'identity': True}, u'type': {u'items': u'string', u'type': u'array'}, u'name': u'symbols', u'inherited_from': u'https://w3id.org/cwl/salad#EnumSchema'}, {u'doc': u'Must be `enum`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'enum'], u'type': u'enum', u'name': u'Enum_symbol'}, u'name': u'type', u'inherited_from': u'https://w3id.org/cwl/salad#EnumSchema'}]}, {u'fields': [{u'doc': u'Defines the type of the array elements.', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#items'}, u'type': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string', {u'items': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string'], u'type': u'array'}], u'name': u'items'}, {u'doc': u'Must be `array`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'array'], u'type': u'enum', u'name': u'Array_symbol'}, u'name': u'type'}], u'type': u'record', u'name': u'ArraySchema'}, u'string', {u'items': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string'], u'type': u'array'}]
    string name = 4; 
    string label = 5; 
}

message EnumSchema {
    repeated string symbols = 1; 
}

message ExpressionToolOutputParameter {
    bool streamable = 1; 
    repeated string format = 2; //[u'string', u'Expression']
    repeated string doc = 3; //[u'string', {u'items': u'string', u'type': u'array'}]
    string label = 4; 
    CommandOutputBinding outputBinding = 5; 
    repeated string secondaryFiles = 6; //[u'string', u'Expression', {u'items': [u'string', u'Expression'], u'type': u'array'}]
    TypeRecord type = 7; //[u'CWLType', u'OutputRecordSchema', u'OutputEnumSchema', u'OutputArraySchema', u'string', {u'items': [u'CWLType', u'OutputRecordSchema', u'OutputEnumSchema', u'OutputArraySchema', u'string'], u'type': u'array'}]
    string id = 8; 
}

message WorkflowStepInput {
    google.protobuf.Struct default = 1; 
    repeated string source = 2; //[u'string', {u'items': u'string', u'type': u'array'}]
    string valueFrom = 3; //[u'string', u'Expression']
    string linkMerge = 4; 
    string id = 5; 
}

message InputRecordSchema {
    repeated RecordField fields = 1; 
    string label = 2; 
}

message WorkflowStepOutput {
    string id = 1; 
}

message CommandLineBinding {
    bool shellQuote = 1; 
    bool loadContents = 2; 
    bool separate = 3; 
    string valueFrom = 4; //[u'string', u'Expression']
    string prefix = 5; 
    string itemSeparator = 6; 
    int64 position = 7; 
}

message Workflow {
    string cwlVersion = 1; 
    repeated InputParameter inputs = 2; 
    repeated google.protobuf.Struct requirements = 3; //{u'items': [u'InlineJavascriptRequirement', u'SchemaDefRequirement', u'DockerRequirement', u'SoftwareRequirement', u'InitialWorkDirRequirement', u'EnvVarRequirement', u'ShellCommandRequirement', u'ResourceRequirement', u'SubworkflowFeatureRequirement', u'ScatterFeatureRequirement', u'MultipleInputFeatureRequirement', u'StepInputExpressionRequirement'], u'type': u'array'}
    repeated WorkflowOutputParameter outputs = 4; 
    string class = 5; 
    string label = 6; 
    repeated WorkflowStep steps = 7; 
    repeated string doc = 8; 
    string id = 9; 
    repeated google.protobuf.Struct hints = 10; 
}

message InputRecordField {
    repeated string doc = 1; 
    CommandLineBinding inputBinding = 2; 
    TypeRecord type = 3; //[u'PrimitiveType', {u'fields': [{u'doc': u'Defines the fields of the record.', u'jsonldPredicate': {u'_id': u'https://w3id.org/cwl/salad#fields', u'mapSubject': u'name', u'mapPredicate': u'type'}, u'type': [{u'items': u'RecordField', u'type': u'array'}], u'name': u'fields'}, {u'doc': u'Must be `record`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'record'], u'type': u'enum', u'name': u'Record_symbol'}, u'name': u'type'}], u'type': u'record', u'name': u'RecordSchema'}, {u'doc': u'Define an enumerated type.\n', u'type': u'record', u'name': u'EnumSchema', u'fields': [{u'doc': u'Defines the set of valid symbols.', u'jsonldPredicate': {u'_type': u'@id', u'_id': u'https://w3id.org/cwl/salad#symbols', u'identity': True}, u'type': {u'items': u'string', u'type': u'array'}, u'name': u'symbols', u'inherited_from': u'https://w3id.org/cwl/salad#EnumSchema'}, {u'doc': u'Must be `enum`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'enum'], u'type': u'enum', u'name': u'Enum_symbol'}, u'name': u'type', u'inherited_from': u'https://w3id.org/cwl/salad#EnumSchema'}]}, {u'fields': [{u'doc': u'Defines the type of the array elements.', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#items'}, u'type': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string', {u'items': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string'], u'type': u'array'}], u'name': u'items'}, {u'doc': u'Must be `array`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'array'], u'type': u'enum', u'name': u'Array_symbol'}, u'name': u'type'}], u'type': u'record', u'name': u'ArraySchema'}, u'string', {u'items': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string'], u'type': u'array'}]
    string name = 4; 
    string label = 5; 
}

message CommandOutputEnumSchema {
    repeated string symbols = 1; 
    CommandOutputBinding outputBinding = 2; 
    string label = 3; 
}

message OutputEnumSchema {
    repeated string symbols = 1; 
    CommandOutputBinding outputBinding = 2; 
    string label = 3; 
}

message WorkflowOutputParameter {
    bool streamable = 1; 
    repeated string format = 2; //[u'string', u'Expression']
    repeated string doc = 3; //[u'string', {u'items': u'string', u'type': u'array'}]
    repeated string outputSource = 4; //[u'string', {u'items': u'string', u'type': u'array'}]
    string linkMerge = 5; 
    string label = 6; 
    CommandOutputBinding outputBinding = 7; 
    repeated string secondaryFiles = 8; //[u'string', u'Expression', {u'items': [u'string', u'Expression'], u'type': u'array'}]
    TypeRecord type = 9; //[u'CWLType', u'OutputRecordSchema', u'OutputEnumSchema', u'OutputArraySchema', u'string', {u'items': [u'CWLType', u'OutputRecordSchema', u'OutputEnumSchema', u'OutputArraySchema', u'string'], u'type': u'array'}]
    string id = 10; 
}

message RecordField {
    repeated string doc = 1; 
    TypeRecord type = 2; //[u'PrimitiveType', {u'fields': [{u'doc': u'Defines the fields of the record.', u'jsonldPredicate': {u'_id': u'https://w3id.org/cwl/salad#fields', u'mapSubject': u'name', u'mapPredicate': u'type'}, u'type': [{u'items': u'RecordField', u'type': u'array'}], u'name': u'fields'}, {u'doc': u'Must be `record`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'record'], u'type': u'enum', u'name': u'Record_symbol'}, u'name': u'type'}], u'type': u'record', u'name': u'RecordSchema'}, {u'doc': u'Define an enumerated type.\n', u'type': u'record', u'name': u'EnumSchema', u'fields': [{u'doc': u'Defines the set of valid symbols.', u'jsonldPredicate': {u'_type': u'@id', u'_id': u'https://w3id.org/cwl/salad#symbols', u'identity': True}, u'type': {u'items': u'string', u'type': u'array'}, u'name': u'symbols', u'inherited_from': u'https://w3id.org/cwl/salad#EnumSchema'}, {u'doc': u'Must be `enum`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'enum'], u'type': u'enum', u'name': u'Enum_symbol'}, u'name': u'type', u'inherited_from': u'https://w3id.org/cwl/salad#EnumSchema'}]}, {u'fields': [{u'doc': u'Defines the type of the array elements.', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#items'}, u'type': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string', {u'items': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string'], u'type': u'array'}], u'name': u'items'}, {u'doc': u'Must be `array`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'array'], u'type': u'enum', u'name': u'Array_symbol'}, u'name': u'type'}], u'type': u'record', u'name': u'ArraySchema'}, u'string', {u'items': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string'], u'type': u'array'}]
    string name = 3; 
}

message InlineJavascriptRequirement {
    string class = 1; 
    repeated string expressionLib = 2; 
}

message RecordSchema {
    repeated RecordField fields = 1; 
}

message CommandInputRecordSchema {
    repeated RecordField fields = 1; 
    string label = 2; 
}

message OutputParameter {
    bool streamable = 1; 
    repeated string format = 2; //[u'string', u'Expression']
    repeated string doc = 3; //[u'string', {u'items': u'string', u'type': u'array'}]
    string label = 4; 
    CommandOutputBinding outputBinding = 5; 
    repeated string secondaryFiles = 6; //[u'string', u'Expression', {u'items': [u'string', u'Expression'], u'type': u'array'}]
    string id = 7; 
}

message ExpressionTool {
    string cwlVersion = 1; 
    repeated InputParameter inputs = 2; 
    repeated google.protobuf.Struct requirements = 3; //{u'items': [u'InlineJavascriptRequirement', u'SchemaDefRequirement', u'DockerRequirement', u'SoftwareRequirement', u'InitialWorkDirRequirement', u'EnvVarRequirement', u'ShellCommandRequirement', u'ResourceRequirement', u'SubworkflowFeatureRequirement', u'ScatterFeatureRequirement', u'MultipleInputFeatureRequirement', u'StepInputExpressionRequirement'], u'type': u'array'}
    repeated ExpressionToolOutputParameter outputs = 4; 
    string class = 5; 
    string label = 6; 
    repeated string doc = 7; 
    string expression = 8; //[u'string', u'Expression']
    string id = 9; 
    repeated google.protobuf.Struct hints = 10; 
}

message CommandOutputBinding {
    repeated string glob = 1; //[u'string', u'Expression', {u'items': u'string', u'type': u'array'}]
    bool loadContents = 2; 
    string outputEval = 3; //[u'string', u'Expression']
}

message CommandLineTool {
    string cwlVersion = 1; 
    repeated CommandInputParameter inputs = 2; 
    repeated int64 permanentFailCodes = 3; 
    repeated google.protobuf.Struct requirements = 4; //{u'items': [u'InlineJavascriptRequirement', u'SchemaDefRequirement', {u'doc': u"Indicates that a workflow component should be run in a\n[Docker](http://docker.com) container, and specifies how to fetch or build\nthe image.\n\nIf a CommandLineTool lists `DockerRequirement` under\n`hints` (or `requirements`), it may (or must) be run in the specified Docker\ncontainer.\n\nThe platform must first acquire or install the correct Docker image as\nspecified by `dockerPull`, `dockerImport`, `dockerLoad` or `dockerFile`.\n\nThe platform must execute the tool in the container using `docker run` with\nthe appropriate Docker image and tool command line.\n\nThe workflow platform may provide input files and the designated output\ndirectory through the use of volume bind mounts.  The platform may rewrite\nfile paths in the input object to correspond to the Docker bind mounted\nlocations.\n\nWhen running a tool contained in Docker, the workflow platform must not\nassume anything about the contents of the Docker container, such as the\npresence or absence of specific software, except to assume that the\ngenerated command line represents a valid command within the runtime\nenvironment of the container.\n\n## Interaction with other requirements\n\nIf [EnvVarRequirement](#EnvVarRequirement) is specified alongside a\nDockerRequirement, the environment variables must be provided to Docker\nusing `--env` or `--env-file` and interact with the container's preexisting\nenvironment as defined by Docker.\n", u'extends': u'https://w3id.org/cwl/cwl#ProcessRequirement', u'name': u'DockerRequirement', u'fields': [{u'doc': u"Always 'DockerRequirement'", u'jsonldPredicate': {u'_type': u'@vocab', u'_id': u'@type'}, u'type': u'string', u'name': u'class'}, {u'doc': u'Specify a Docker image to retrieve using `docker pull`.', u'type': [u'null', u'string'], u'name': u'dockerPull'}, {u'doc': u'Specify a HTTP URL from which to download a Docker image using `docker load`.', u'type': [u'null', u'string'], u'name': u'dockerLoad'}, {u'doc': u'Supply the contents of a Dockerfile which will be built using `docker build`.', u'type': [u'null', u'string'], u'name': u'dockerFile'}, {u'doc': u'Provide HTTP URL to download and gunzip a Docker images using `docker import.', u'type': [u'null', u'string'], u'name': u'dockerImport'}, {u'doc': u'The image id that will be used for `docker run`.  May be a\nhuman-readable image name or the image identifier hash.  May be skipped\nif `dockerPull` is specified, in which case the `dockerPull` image id\nmust be used.\n', u'type': [u'null', u'string'], u'name': u'dockerImageId'}, {u'doc': u'Set the designated output directory to a specific location inside the\nDocker container.\n', u'type': [u'null', u'string'], u'name': u'dockerOutputDirectory'}], u'type': u'record'}, {u'doc': u'A list of software packages that should be configured in the environment of\nthe defined process.\n', u'extends': u'https://w3id.org/cwl/cwl#ProcessRequirement', u'name': u'SoftwareRequirement', u'fields': [{u'doc': u"Always 'SoftwareRequirement'", u'jsonldPredicate': {u'_type': u'@vocab', u'_id': u'@type'}, u'type': u'string', u'name': u'class'}, {u'doc': u'The list of software to be configured.', u'jsonldPredicate': {u'mapSubject': u'package', u'mapPredicate': u'specs'}, u'type': {u'items': {u'fields': [{u'doc': u'The name of the software to be made available. If the name is\ncommon, inconsistent, or otherwise ambiguous it should be combined with\none or more identifiers in the `specs` field.\n', u'type': u'string', u'name': u'package'}, {u'doc': u'The (optional) versions of the software that are known to be\ncompatible.\n', u'type': [u'null', {u'items': u'string', u'type': u'array'}], u'name': u'version'}, {u'doc': u'One or more [IRI](https://en.wikipedia.org/wiki/Internationalized_Resource_Identifier)s\nidentifying resources for installing or enabling the software named in\nthe `package` field. Implementations may provide resolvers which map\nthese software identifer IRIs to some configuration action; or they can\nuse only the name from the `package` field on a best effort basis.\n\nFor example, the IRI https://packages.debian.org/bowtie could\nbe resolved with `apt-get install bowtie`. The IRI\nhttps://anaconda.org/bioconda/bowtie could be resolved with `conda\ninstall -c bioconda bowtie`.\n\nIRIs can also be system independent and used to map to a specific\nsoftware installation or selection mechanism.\nUsing [RRID](https://www.identifiers.org/rrid/) as an example:\nhttps://identifiers.org/rrid/RRID:SCR_005476\ncould be fulfilled using the above mentioned Debian or bioconda\npackage, a local installation managed by [Environement Modules](http://modules.sourceforge.net/),\nor any other mechanism the platform chooses. IRIs can also be from\nidentifer sources that are discipline specific yet still system\nindependent. As an example, the equivalent [ELIXIR Tools and Data\nService Registry](https://bio.tools) IRI to the previous RRID example is\nhttps://bio.tools/tool/bowtie2/version/2.2.8.\nIf supported by a given registry, implementations are encouraged to\nquery these system independent sofware identifier IRIs directly for\nlinks to packaging systems.\n\nA site specific IRI can be listed as well. For example, an academic\ncomputing cluster using Environement Modules could list the IRI\n`https://hpc.example.edu/modules/bowtie-tbb/1.22` to indicate that\n`module load bowtie-tbb/1.1.2` should be executed to make available\n`bowtie` version 1.1.2 compiled with the TBB library prior to running\nthe accompanying Workflow or CommandLineTool. Note that the example IRI\nis specific to a particular institution and computing environment as\nthe Environment Modules system does not have a common namespace or\nstandardized naming convention.\n\nThis last example is the least portable and should only be used if\nmechanisms based off of the `package` field or more generic IRIs are\nunavailable or unsuitable. While harmless to other sites, site specific\nsoftware IRIs should be left out of shared CWL descriptions to avoid\nclutter.\n', u'type': [u'null', {u'items': u'string', u'type': u'array'}], u'name': u'specs'}], u'type': u'record', u'name': u'SoftwarePackage'}, u'type': u'array'}, u'name': u'packages'}], u'type': u'record'}, {u'doc': u'Define a list of files and subdirectories that must be created by the workflow platform in the designated output directory prior to executing the command line tool.', u'extends': u'https://w3id.org/cwl/cwl#ProcessRequirement', u'name': u'InitialWorkDirRequirement', u'fields': [{u'doc': u'InitialWorkDirRequirement', u'jsonldPredicate': {u'_type': u'@vocab', u'_id': u'@type'}, u'type': u'string', u'name': u'class'}, {u'doc': u'The list of files or subdirectories that must be placed in the\ndesignated output directory prior to executing the command line tool.\n\nMay be an expression.  If so, the expression return value must validate\nas `{type: array, items: [File, Directory]}`.\n\nFiles or Directories which are listed in the input parameters and\nappear in the `InitialWorkDirRequirement` listing must have their\n`path` set to their staged location in the designated output directory.\nIf the same File or Directory appears more than once in the\n`InitialWorkDirRequirement` listing, the implementation must choose\nexactly one value for `path`; how this value is chosen is undefined.\n', u'jsonldPredicate': {u'_id': u'https://w3id.org/cwl/cwl#listing'}, u'type': [{u'items': [u'File', u'Directory', {u'doc': u'Define a file or subdirectory that must be placed in the designated output\ndirectory prior to executing the command line tool.  May be the result of\nexecuting an expression, such as building a configuration file from a\ntemplate.\n', u'type': u'record', u'name': u'Dirent', u'fields': [{u'doc': u'The name of the file or subdirectory to create in the output directory.\nIf `entry` is a File or Directory, the `entryname` field overrides the value\nof `basename` of the File or Directory object.  Optional.\n', u'jsonldPredicate': {u'_id': u'https://w3id.org/cwl/cwl#entryname'}, u'type': [u'null', u'string', u'Expression'], u'name': u'entryname'}, {u'doc': u'If the value is a string literal or an expression which evaluates to a\nstring, a new file must be created with the string as the file contents.\n\nIf the value is an expression that evaluates to a `File` object, this\nindicates the referenced file should be added to the designated output\ndirectory prior to executing the tool.\n\nIf the value is an expression that evaluates to a `Dirent` object, this\nindicates that the File or Directory in `entry` should be added to the\ndesignated output directory with the name in `entryname`.\n\nIf `writable` is false, the file may be made available using a bind\nmount or file system link to avoid unnecessary copying of the input\nfile.\n', u'jsonldPredicate': {u'_id': u'https://w3id.org/cwl/cwl#entry'}, u'type': [u'string', u'Expression'], u'name': u'entry'}, {u'doc': u'If true, the file or directory must be writable by the tool.  Changes\nto the file or directory must be isolated and not visible by any other\nCommandLineTool process.  This may be implemented by making a copy of\nthe original file or directory.  Default false (files and directories\nread-only by default).\n\nA directory marked as `writable: true` implies that all files and\nsubdirectories are recursively writable as well.\n', u'type': [u'null', u'boolean'], u'name': u'writable'}]}, u'string', u'Expression'], u'type': u'array'}, u'string', u'Expression'], u'name': u'listing'}], u'type': u'record'}, {u'doc': u'Define a list of environment variables which will be set in the\nexecution environment of the tool.  See `EnvironmentDef` for details.\n', u'extends': u'https://w3id.org/cwl/cwl#ProcessRequirement', u'name': u'EnvVarRequirement', u'fields': [{u'doc': u"Always 'EnvVarRequirement'", u'jsonldPredicate': {u'_type': u'@vocab', u'_id': u'@type'}, u'type': u'string', u'name': u'class'}, {u'doc': u'The list of environment variables.', u'jsonldPredicate': {u'mapSubject': u'envName', u'mapPredicate': u'envValue'}, u'type': {u'items': u'EnvironmentDef', u'type': u'array'}, u'name': u'envDef'}], u'type': u'record'}, {u'doc': u'Modify the behavior of CommandLineTool to generate a single string\ncontaining a shell command line.  Each item in the argument list must be\njoined into a string separated by single spaces and quoted to prevent\nintepretation by the shell, unless `CommandLineBinding` for that argument\ncontains `shellQuote: false`.  If `shellQuote: false` is specified, the\nargument is joined into the command string without quoting, which allows\nthe use of shell metacharacters such as `|` for pipes.\n', u'extends': u'https://w3id.org/cwl/cwl#ProcessRequirement', u'name': u'ShellCommandRequirement', u'fields': [{u'doc': u"Always 'ShellCommandRequirement'", u'jsonldPredicate': {u'_type': u'@vocab', u'_id': u'@type'}, u'type': u'string', u'name': u'class'}], u'type': u'record'}, {u'doc': u'Specify basic hardware resource requirements.\n\n"min" is the minimum amount of a resource that must be reserved to schedule\na job. If "min" cannot be satisfied, the job should not be run.\n\n"max" is the maximum amount of a resource that the job shall be permitted\nto use. If a node has sufficient resources, multiple jobs may be scheduled\non a single node provided each job\'s "max" resource requirements are\nmet. If a job attempts to exceed its "max" resource allocation, an\nimplementation may deny additional resources, which may result in job\nfailure.\n\nIf "min" is specified but "max" is not, then "max" == "min"\nIf "max" is specified by "min" is not, then "min" == "max".\n\nIt is an error if max < min.\n\nIt is an error if the value of any of these fields is negative.\n\nIf neither "min" nor "max" is specified for a resource, an implementation may provide a default.\n', u'extends': u'https://w3id.org/cwl/cwl#ProcessRequirement', u'name': u'ResourceRequirement', u'fields': [{u'doc': u"Always 'ResourceRequirement'", u'jsonldPredicate': {u'_type': u'@vocab', u'_id': u'@type'}, u'type': u'string', u'name': u'class'}, {u'doc': u'Minimum reserved number of CPU cores', u'type': [u'null', u'long', u'string', u'Expression'], u'name': u'coresMin'}, {u'doc': u'Maximum reserved number of CPU cores', u'type': [u'null', u'int', u'string', u'Expression'], u'name': u'coresMax'}, {u'doc': u'Minimum reserved RAM in mebibytes (2**20)', u'type': [u'null', u'long', u'string', u'Expression'], u'name': u'ramMin'}, {u'doc': u'Maximum reserved RAM in mebibytes (2**20)', u'type': [u'null', u'long', u'string', u'Expression'], u'name': u'ramMax'}, {u'doc': u'Minimum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)', u'type': [u'null', u'long', u'string', u'Expression'], u'name': u'tmpdirMin'}, {u'doc': u'Maximum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)', u'type': [u'null', u'long', u'string', u'Expression'], u'name': u'tmpdirMax'}, {u'doc': u'Minimum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)', u'type': [u'null', u'long', u'string', u'Expression'], u'name': u'outdirMin'}, {u'doc': u'Maximum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)', u'type': [u'null', u'long', u'string', u'Expression'], u'name': u'outdirMax'}], u'type': u'record'}, {u'doc': u'Indicates that the workflow platform must support nested workflows in\nthe `run` field of [WorkflowStep](#WorkflowStep).\n', u'extends': u'https://w3id.org/cwl/cwl#ProcessRequirement', u'name': u'SubworkflowFeatureRequirement', u'fields': [{u'doc': u"Always 'SubworkflowFeatureRequirement'", u'jsonldPredicate': {u'_type': u'@vocab', u'_id': u'@type'}, u'type': u'string', u'name': u'class'}], u'type': u'record'}, {u'doc': u'Indicates that the workflow platform must support the `scatter` and\n`scatterMethod` fields of [WorkflowStep](#WorkflowStep).\n', u'extends': u'https://w3id.org/cwl/cwl#ProcessRequirement', u'name': u'ScatterFeatureRequirement', u'fields': [{u'doc': u"Always 'ScatterFeatureRequirement'", u'jsonldPredicate': {u'_type': u'@vocab', u'_id': u'@type'}, u'type': u'string', u'name': u'class'}], u'type': u'record'}, {u'doc': u'Indicates that the workflow platform must support multiple inbound data links\nlisted in the `source` field of [WorkflowStepInput](#WorkflowStepInput).\n', u'extends': u'https://w3id.org/cwl/cwl#ProcessRequirement', u'name': u'MultipleInputFeatureRequirement', u'fields': [{u'doc': u"Always 'MultipleInputFeatureRequirement'", u'jsonldPredicate': {u'_type': u'@vocab', u'_id': u'@type'}, u'type': u'string', u'name': u'class'}], u'type': u'record'}, {u'doc': u'Indicate that the workflow platform must support the `valueFrom` field\nof [WorkflowStepInput](#WorkflowStepInput).\n', u'extends': u'https://w3id.org/cwl/cwl#ProcessRequirement', u'name': u'StepInputExpressionRequirement', u'fields': [{u'doc': u"Always 'StepInputExpressionRequirement'", u'jsonldPredicate': {u'_type': u'@vocab', u'_id': u'@type'}, u'type': u'string', u'name': u'class'}], u'type': u'record'}], u'type': u'array'}
    repeated int64 successCodes = 5; 
    string stdout = 6; //[u'string', u'Expression']
    repeated CommandOutputParameter outputs = 7; 
    string class = 8; 
    string stdin = 9; //[u'string', u'Expression']
    repeated string baseCommand = 10; //[u'string', {u'items': u'string', u'type': u'array'}]
    string label = 11; 
    repeated CommandLineBinding arguments = 12; //{u'items': [u'string', u'Expression', u'CommandLineBinding'], u'type': u'array'}
    string stderr = 13; //[u'string', u'Expression']
    repeated string doc = 14; 
    repeated int64 temporaryFailCodes = 15; 
    string id = 16; 
    repeated google.protobuf.Struct hints = 17; 
}

message CommandOutputParameter {
    bool streamable = 1; 
    repeated string format = 2; //[u'string', u'Expression']
    repeated string doc = 3; //[u'string', {u'items': u'string', u'type': u'array'}]
    string label = 4; 
    CommandOutputBinding outputBinding = 5; 
    repeated string secondaryFiles = 6; //[u'string', u'Expression', {u'items': [u'string', u'Expression'], u'type': u'array'}]
    TypeRecord type = 7; //[u'CWLType', {u'symbols': [u'stdout'], u'doc': u'Only valid as a `type` for a `CommandLineTool` output with no\n`outputBinding` set.\n\nThe following\n```\noutputs:\n  an_output_name:\n    type: stdout\n\nstdout: a_stdout_file\n```\nis equivalent to\n```\noutputs:\n  an_output_name:\n    type: File\n    streamable: true\n    outputBinding:\n      glob: a_stdout_file\n\nstdout: a_stdout_file\n```\n\nIf there is no `stdout` name provided, a random filename will be created.\nFor example, the following\n```\noutputs:\n  an_output_name:\n    type: stdout\n```\nis equivalent to\n```\noutputs:\n  an_output_name:\n    type: File\n    streamable: true\n    outputBinding:\n      glob: random_stdout_filenameABCDEFG\n\nstdout: random_stdout_filenameABCDEFG\n```\n', u'docParent': u'https://w3id.org/cwl/cwl#CommandOutputParameter', u'type': u'enum', u'name': u'stdout'}, {u'symbols': [u'stderr'], u'doc': u'Only valid as a `type` for a `CommandLineTool` output with no\n`outputBinding` set.\n\nThe following\n```\noutputs:\n  an_output_name:\n  type: stderr\n\nstderr: a_stderr_file\n```\nis equivalent to\n```\noutputs:\n  an_output_name:\n    type: File\n    streamable: true\n    outputBinding:\n      glob: a_stderr_file\n\nstderr: a_stderr_file\n```\n\nIf there is no `stderr` name provided, a random filename will be created.\nFor example, the following\n```\noutputs:\n  an_output_name:\n    type: stderr\n```\nis equivalent to\n```\noutputs:\n  an_output_name:\n    type: File\n    streamable: true\n    outputBinding:\n      glob: random_stderr_filenameABCDEFG\n\nstderr: random_stderr_filenameABCDEFG\n```\n', u'docParent': u'https://w3id.org/cwl/cwl#CommandOutputParameter', u'type': u'enum', u'name': u'stderr'}, u'CommandOutputRecordSchema', u'CommandOutputEnumSchema', u'CommandOutputArraySchema', u'string', {u'items': [u'CWLType', u'CommandOutputRecordSchema', u'CommandOutputEnumSchema', u'CommandOutputArraySchema', u'string'], u'type': u'array'}]
    string id = 8; 
}

message EnvironmentDef {
    string envName = 1; 
    string envValue = 2; //[u'string', u'Expression']
}

message OutputRecordSchema {
    repeated RecordField fields = 1; 
    string label = 2; 
}

message InputEnumSchema {
    repeated string symbols = 1; 
    CommandLineBinding inputBinding = 2; 
    string label = 3; 
}

message WorkflowStep {
    repeated google.protobuf.Struct requirements = 1; //{u'items': [u'InlineJavascriptRequirement', u'SchemaDefRequirement', u'DockerRequirement', u'SoftwareRequirement', u'InitialWorkDirRequirement', u'EnvVarRequirement', u'ShellCommandRequirement', u'ResourceRequirement', u'SubworkflowFeatureRequirement', u'ScatterFeatureRequirement', u'MultipleInputFeatureRequirement', u'StepInputExpressionRequirement'], u'type': u'array'}
    repeated string doc = 2; 
    string label = 3; 
    repeated WorkflowStepInput in = 4; 
    RunRecord run = 5; //[u'string', u'CommandLineTool', u'ExpressionTool', {u'name': u'Workflow', u'doc': u'A workflow describes a set of **steps** and the **dependencies** between\nthose steps.  When a step produces output that will be consumed by a\nsecond step, the first step is a dependency of the second step.\n\nWhen there is a dependency, the workflow engine must execute the preceeding\nstep and wait for it to successfully produce output before executing the\ndependent step.  If two steps are defined in the workflow graph that\nare not directly or indirectly dependent, these steps are **independent**,\nand may execute in any order or execute concurrently.  A workflow is\ncomplete when all steps have been executed.\n\nDependencies between parameters are expressed using the `source` field on\n[workflow step input parameters](#WorkflowStepInput) and [workflow output\nparameters](#WorkflowOutputParameter).\n\nThe `source` field expresses the dependency of one parameter on another\nsuch that when a value is associated with the parameter specified by\n`source`, that value is propagated to the destination parameter.  When all\ndata links inbound to a given step are fufilled, the step is ready to\nexecute.\n\n## Workflow success and failure\n\nA completed step must result in one of `success`, `temporaryFailure` or\n`permanentFailure` states.  An implementation may choose to retry a step\nexecution which resulted in `temporaryFailure`.  An implementation may\nchoose to either continue running other steps of a workflow, or terminate\nimmediately upon `permanentFailure`.\n\n* If any step of a workflow execution results in `permanentFailure`, then\nthe workflow status is `permanentFailure`.\n\n* If one or more steps result in `temporaryFailure` and all other steps\ncomplete `success` or are not executed, then the workflow status is\n`temporaryFailure`.\n\n* If all workflow steps are executed and complete with `success`, then the\nworkflow status is `success`.\n\n# Extensions\n\n[ScatterFeatureRequirement](#ScatterFeatureRequirement) and\n[SubworkflowFeatureRequirement](#SubworkflowFeatureRequirement) are\navailable as standard [extensions](#Extensions_and_Metadata) to core\nworkflow semantics.\n', u'extends': u'https://w3id.org/cwl/cwl#Process', u'documentRoot': True, u'specialize': [{u'specializeFrom': u'https://w3id.org/cwl/cwl#OutputParameter', u'specializeTo': u'https://w3id.org/cwl/cwl#WorkflowOutputParameter'}], u'type': u'record', u'fields': [{u'doc': u'The unique identifier for this process object.', u'jsonldPredicate': u'@id', u'type': [u'string'], u'name': u'id', u'inherited_from': u'https://w3id.org/cwl/cwl#Process'}, {u'doc': u'Defines the input parameters of the process.  The process is ready to\nrun when all required input parameters are associated with concrete\nvalues.  Input parameters include a schema for each parameter which is\nused to validate the input object.  It may also be used to build a user\ninterface for constructing the input object.\n\nWhen accepting an input object, all input parameters must have a value.\nIf an input parameter is missing from the input object, it must be\nassigned a value of `null` (or the value of `default` for that\nparameter, if provided) for the purposes of validation and evaluation\nof expressions.\n', u'jsonldPredicate': {u'_id': u'https://w3id.org/cwl/cwl#inputs', u'mapSubject': u'id', u'mapPredicate': u'type'}, u'type': {u'items': u'InputParameter', u'type': u'array'}, u'name': u'inputs', u'inherited_from': u'https://w3id.org/cwl/cwl#Process'}, {u'doc': u'Defines the parameters representing the output of the process.  May be\nused to generate and/or validate the output object.\n', u'jsonldPredicate': {u'_id': u'https://w3id.org/cwl/cwl#outputs', u'mapSubject': u'id', u'mapPredicate': u'type'}, u'type': {u'items': u'WorkflowOutputParameter', u'type': u'array'}, u'name': u'outputs', u'inherited_from': u'https://w3id.org/cwl/cwl#Process'}, {u'doc': u'Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this process.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.\n', u'jsonldPredicate': {u'_id': u'https://w3id.org/cwl/cwl#requirements', u'mapSubject': u'class'}, u'type': [{u'items': [u'InlineJavascriptRequirement', u'SchemaDefRequirement', u'DockerRequirement', u'SoftwareRequirement', u'InitialWorkDirRequirement', u'EnvVarRequirement', u'ShellCommandRequirement', u'ResourceRequirement', u'SubworkflowFeatureRequirement', u'ScatterFeatureRequirement', u'MultipleInputFeatureRequirement', u'StepInputExpressionRequirement'], u'type': u'array'}], u'name': u'requirements', u'inherited_from': u'https://w3id.org/cwl/cwl#Process'}, {u'doc': u'Declares hints applying to either the runtime environment or the\nworkflow engine that may be helpful in executing this process.  It is\nnot an error if an implementation cannot satisfy all hints, however\nthe implementation may report a warning.\n', u'jsonldPredicate': {u'noLinkCheck': True, u'_id': u'https://w3id.org/cwl/cwl#hints', u'mapSubject': u'class'}, u'type': [{u'items': u'Any', u'type': u'array'}], u'name': u'hints', u'inherited_from': u'https://w3id.org/cwl/cwl#Process'}, {u'doc': u'A short, human-readable label of this process object.', u'jsonldPredicate': u'rdfs:label', u'type': [u'string'], u'name': u'label', u'inherited_from': u'https://w3id.org/cwl/cwl#Process'}, {u'doc': u'A long, human-readable description of this process object.', u'jsonldPredicate': u'rdfs:comment', u'type': [u'string'], u'name': u'doc', u'inherited_from': u'https://w3id.org/cwl/cwl#Process'}, {u'doc': u'CWL document version. Always required at the document root. Not\nrequired for a Process embedded inside another Process.\n', u'jsonldPredicate': {u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/cwl#cwlVersion'}, u'type': [u'CWLVersion'], u'name': u'cwlVersion', u'inherited_from': u'https://w3id.org/cwl/cwl#Process'}, {u'jsonldPredicate': {u'_type': u'@vocab', u'_id': u'@type'}, u'type': u'string', u'name': u'class'}, {u'doc': u'The individual steps that make up the workflow.  Each step is executed when all of its\ninput data links are fufilled.  An implementation may choose to execute\nthe steps in a different order than listed and/or execute steps\nconcurrently, provided that dependencies between steps are met.\n', u'jsonldPredicate': {u'mapSubject': u'id'}, u'type': [{u'items': u'WorkflowStep', u'type': u'array'}], u'name': u'steps'}]}]
    repeated string scatter = 6; //[u'string', {u'items': u'string', u'type': u'array'}]
    repeated WorkflowStepOutput out = 7; //{u'items': [u'string', u'WorkflowStepOutput'], u'type': u'array'}
    string scatterMethod = 8; 
    string id = 9; 
    repeated google.protobuf.Struct hints = 10; 
}

message CommandOutputRecordField {
    repeated string doc = 1; 
    CommandOutputBinding outputBinding = 2; 
    TypeRecord type = 3; //[u'PrimitiveType', {u'fields': [{u'doc': u'Defines the fields of the record.', u'jsonldPredicate': {u'_id': u'https://w3id.org/cwl/salad#fields', u'mapSubject': u'name', u'mapPredicate': u'type'}, u'type': [{u'items': u'RecordField', u'type': u'array'}], u'name': u'fields'}, {u'doc': u'Must be `record`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'record'], u'type': u'enum', u'name': u'Record_symbol'}, u'name': u'type'}], u'type': u'record', u'name': u'RecordSchema'}, {u'doc': u'Define an enumerated type.\n', u'type': u'record', u'name': u'EnumSchema', u'fields': [{u'doc': u'Defines the set of valid symbols.', u'jsonldPredicate': {u'_type': u'@id', u'_id': u'https://w3id.org/cwl/salad#symbols', u'identity': True}, u'type': {u'items': u'string', u'type': u'array'}, u'name': u'symbols', u'inherited_from': u'https://w3id.org/cwl/salad#EnumSchema'}, {u'doc': u'Must be `enum`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'enum'], u'type': u'enum', u'name': u'Enum_symbol'}, u'name': u'type', u'inherited_from': u'https://w3id.org/cwl/salad#EnumSchema'}]}, {u'fields': [{u'doc': u'Defines the type of the array elements.', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#items'}, u'type': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string', {u'items': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string'], u'type': u'array'}], u'name': u'items'}, {u'doc': u'Must be `array`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'array'], u'type': u'enum', u'name': u'Array_symbol'}, u'name': u'type'}], u'type': u'record', u'name': u'ArraySchema'}, u'string', {u'items': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string'], u'type': u'array'}]
    string name = 4; 
}

message File {
    repeated string format = 1; 
    string checksum = 2; 
    string basename = 3; 
    string nameext = 4; 
    string nameroot = 5; 
    string location = 6; 
    repeated string secondaryFiles = 7; //{u'items': [u'File', {u'doc': u'Represents a directory to present to a command line tool.\n\nDirectories are represented as objects with `class` of `Directory`.  Directory objects have\na number of properties that provide metadata about the directory.\n\nThe `location` property of a Directory is a URI that uniquely identifies\nthe directory.  Implementations must support the file:// URI scheme and may\nsupport other schemes such as http://.  Alternately to `location`,\nimplementations must also accept the `path` property on Direcotry, which\nmust be a filesystem path available on the same host as the CWL runner (for\ninputs) or the runtime environment of a command line tool execution (for\ncommand line tool outputs).\n\nA Directory object may have a `listing` field.  This is a list of File and\nDirectory objects that are contained in the Directory.  For each entry in\n`listing`, the `basename` property defines the name of the File or\nSubdirectory when staged to disk.  If `listing` is not provided, the\nimplementation must have some way of fetching the Directory listing at\nruntime based on the `location` field.\n\nIf a Directory does not have `location`, it is a Directory literal.  A\nDirectory literal must provide `listing`.  Directory literals must be\ncreated on disk at runtime as needed.\n\nThe resources in a Directory literal do not need to have any implied\nrelationship in their `location`.  For example, a Directory listing may\ncontain two files located on different hosts.  It is the responsibility of\nthe runtime to ensure that those files are staged to disk appropriately.\nSecondary files associated with files in `listing` must also be staged to\nthe same Directory.\n\nWhen executing a CommandLineTool, Directories must be recursively staged\nfirst and have local values of `path` assigend.\n\nDirectory objects in CommandLineTool output must provide either a\n`location` URI or a `path` property in the context of the tool execution\nruntime (local to the compute node, or within the executing container).\n\nAn ExpressionTool may forward file references from input to output by using\nthe same value for `location`.\n\nName conflicts (the same `basename` appearing multiple times in `listing`\nor in any entry in `secondaryFiles` in the listing) is a fatal error.\n', u'type': u'record', u'name': u'Directory', u'fields': [{u'doc': u'Must be `Directory` to indicate this object describes a Directory.', u'jsonldPredicate': {u'_type': u'@vocab', u'_id': u'@type'}, u'type': {u'symbols': [u'Directory'], u'type': u'enum', u'name': u'Directory_class'}, u'name': u'class'}, {u'doc': u'An IRI that identifies the directory resource.  This may be a relative\nreference, in which case it must be resolved using the base IRI of the\ndocument.  The location may refer to a local or remote resource.  If\nthe `listing` field is not set, the implementation must use the\nlocation IRI to retrieve directory listing.  If an implementation is\nunable to retrieve the directory listing stored at a remote resource (due to\nunsupported protocol, access denied, or other issue) it must signal an\nerror.\n\nIf the `location` field is not provided, the `listing` field must be\nprovided.  The implementation must assign a unique identifier for\nthe `location` field.\n\nIf the `path` field is provided but the `location` field is not, an\nimplementation may assign the value of the `path` field to `location`,\nthen follow the rules above.\n', u'jsonldPredicate': {u'_type': u'@id', u'_id': u'@id'}, u'type': [u'null', u'string'], u'name': u'location'}, {u'doc': u'The local path where the Directory is made available prior to executing a\nCommandLineTool.  This must be set by the implementation.  This field\nmust not be used in any other context.  The command line tool being\nexecuted must be able to to access the directory at `path` using the POSIX\n`opendir(2)` syscall.\n\nIf the `path` contains [POSIX shell metacharacters](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02)\n(`|`,`&`, `;`, `<`, `>`, `(`,`)`, `$`,`` ` ``, `\\`, `"`, `\'`,\n`<space>`, `<tab>`, and `<newline>`) or characters\n[not allowed](http://www.iana.org/assignments/idna-tables-6.3.0/idna-tables-6.3.0.xhtml)\nfor [Internationalized Domain Names for Applications](https://tools.ietf.org/html/rfc6452)\nthen implementations may terminate the process with a\n`permanentFailure`.\n', u'jsonldPredicate': {u'_type': u'@id', u'_id': u'https://w3id.org/cwl/cwl#path'}, u'type': [u'null', u'string'], u'name': u'path'}, {u'doc': u'The base name of the directory, that is, the name of the file without any\nleading directory path.  The base name must not contain a slash `/`.\n\nIf not provided, the implementation must set this field based on the\n`location` field by taking the final path component after parsing\n`location` as an IRI.  If `basename` is provided, it is not required to\nmatch the value from `location`.\n\nWhen this file is made available to a CommandLineTool, it must be named\nwith `basename`, i.e. the final component of the `path` field must match\n`basename`.\n', u'jsonldPredicate': u'cwl:basename', u'type': [u'null', u'string'], u'name': u'basename'}, {u'doc': u'List of files or subdirectories contained in this directory.  The name\nof each file or subdirectory is determined by the `basename` field of\neach `File` or `Directory` object.  It is an error if a `File` shares a\n`basename` with any other entry in `listing`.  If two or more\n`Directory` object share the same `basename`, this must be treated as\nequivalent to a single subdirectory with the listings recursively\nmerged.\n', u'jsonldPredicate': {u'_id': u'https://w3id.org/cwl/cwl#listing'}, u'type': [u'null', {u'items': [u'File', u'Directory'], u'type': u'array'}], u'name': u'listing'}], u'docAfter': u'https://w3id.org/cwl/cwl#File'}], u'type': u'array'}
    string path = 8; 
    string dirname = 9; 
    string contents = 10; 
    int64 size = 11; 
}

message InputParameter {
    bool streamable = 1; 
    CommandLineBinding inputBinding = 2; 
    repeated string format = 3; //[u'string', {u'items': u'string', u'type': u'array'}, u'Expression']
    google.protobuf.Struct default = 4; 
    repeated string doc = 5; //[u'string', {u'items': u'string', u'type': u'array'}]
    string label = 6; 
    repeated string secondaryFiles = 7; //[u'string', u'Expression', {u'items': [u'string', u'Expression'], u'type': u'array'}]
    TypeRecord type = 8; //[u'CWLType', u'InputRecordSchema', u'InputEnumSchema', u'InputArraySchema', u'string', {u'items': [u'CWLType', u'InputRecordSchema', u'InputEnumSchema', u'InputArraySchema', u'string'], u'type': u'array'}]
    string id = 9; 
}

message OutputRecordField {
    repeated string doc = 1; 
    CommandOutputBinding outputBinding = 2; 
    TypeRecord type = 3; //[u'PrimitiveType', {u'fields': [{u'doc': u'Defines the fields of the record.', u'jsonldPredicate': {u'_id': u'https://w3id.org/cwl/salad#fields', u'mapSubject': u'name', u'mapPredicate': u'type'}, u'type': [{u'items': u'RecordField', u'type': u'array'}], u'name': u'fields'}, {u'doc': u'Must be `record`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'record'], u'type': u'enum', u'name': u'Record_symbol'}, u'name': u'type'}], u'type': u'record', u'name': u'RecordSchema'}, {u'doc': u'Define an enumerated type.\n', u'type': u'record', u'name': u'EnumSchema', u'fields': [{u'doc': u'Defines the set of valid symbols.', u'jsonldPredicate': {u'_type': u'@id', u'_id': u'https://w3id.org/cwl/salad#symbols', u'identity': True}, u'type': {u'items': u'string', u'type': u'array'}, u'name': u'symbols', u'inherited_from': u'https://w3id.org/cwl/salad#EnumSchema'}, {u'doc': u'Must be `enum`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'enum'], u'type': u'enum', u'name': u'Enum_symbol'}, u'name': u'type', u'inherited_from': u'https://w3id.org/cwl/salad#EnumSchema'}]}, {u'fields': [{u'doc': u'Defines the type of the array elements.', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#items'}, u'type': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string', {u'items': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string'], u'type': u'array'}], u'name': u'items'}, {u'doc': u'Must be `array`', u'jsonldPredicate': {u'refScope': 2, u'_type': u'@vocab', u'_id': u'https://w3id.org/cwl/salad#type', u'typeDSL': True}, u'type': {u'symbols': [u'array'], u'type': u'enum', u'name': u'Array_symbol'}, u'name': u'type'}], u'type': u'record', u'name': u'ArraySchema'}, u'string', {u'items': [u'PrimitiveType', u'RecordSchema', u'EnumSchema', u'ArraySchema', u'string'], u'type': u'array'}]
    string name = 4; 
}

message CommandOutputRecordSchema {
    repeated RecordField fields = 1; 
    string label = 2; 
}

message CommandInputEnumSchema {
    repeated string symbols = 1; 
    CommandLineBinding inputBinding = 2; 
    string label = 3; 
}

message CommandInputParameter {
    bool streamable = 1; 
    CommandLineBinding inputBinding = 2; 
    repeated string format = 3; //[u'string', {u'items': u'string', u'type': u'array'}, u'Expression']
    DataRecord default = 4; 
    repeated string doc = 5; //[u'string', {u'items': u'string', u'type': u'array'}]
    string label = 6; 
    repeated string secondaryFiles = 7; //[u'string', u'Expression', {u'items': [u'string', u'Expression'], u'type': u'array'}]
    TypeRecord type = 8; //[u'CWLType', u'InputRecordSchema', u'InputEnumSchema', u'InputArraySchema', u'string', {u'items': [u'CWLType', u'InputRecordSchema', u'InputEnumSchema', u'InputArraySchema', u'string'], u'type': u'array'}]
    string id = 9; 
}

