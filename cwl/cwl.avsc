[
    {
        "symbols": [
            "null", 
            "boolean", 
            "int", 
            "long", 
            "float", 
            "double", 
            "string"
        ], 
        "doc": [
            "Salad data types are based on Avro schema declarations.  Refer to the\n[Avro schema declaration documentation](https://avro.apache.org/docs/current/spec.html#schemas) for\ndetailed information.\n", 
            "null: no value", 
            "boolean: a binary value", 
            "int: 32-bit signed integer", 
            "long: 64-bit signed integer", 
            "float: single precision (32-bit) IEEE 754 floating-point number", 
            "double: double precision (64-bit) IEEE 754 floating-point number", 
            "string: Unicode character sequence"
        ], 
        "type": "enum", 
        "name": "PrimitiveType"
    }, 
    {
        "symbols": [
            "Any"
        ], 
        "type": "enum", 
        "docAfter": "https://w3id.org/cwl/salad#PrimitiveType", 
        "name": "Any", 
        "doc": "The **Any** type validates for any non-null value.\n"
    }, 
    {
        "doc": "A field of a record.", 
        "type": "record", 
        "name": "RecordField", 
        "fields": [
            {
                "doc": "The name of the field\n", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "name"
            }, 
            {
                "doc": "A documentation string for this field\n", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "doc"
            }, 
            {
                "doc": "The field type\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "PrimitiveType", 
                    {
                        "fields": [
                            {
                                "doc": "Defines the fields of the record.", 
                                "jsonldPredicate": {
                                    "_id": "https://w3id.org/cwl/salad#fields", 
                                    "mapSubject": "name", 
                                    "mapPredicate": "type"
                                }, 
                                "type": [
                                    "null", 
                                    {
                                        "items": "RecordField", 
                                        "type": "array"
                                    }
                                ], 
                                "name": "fields"
                            }, 
                            {
                                "doc": "Must be `record`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": {
                                    "symbols": [
                                        "record"
                                    ], 
                                    "type": "enum", 
                                    "name": "Record_symbol"
                                }, 
                                "name": "type"
                            }
                        ], 
                        "type": "record", 
                        "name": "RecordSchema"
                    }, 
                    {
                        "doc": "Define an enumerated type.\n", 
                        "type": "record", 
                        "name": "EnumSchema", 
                        "fields": [
                            {
                                "doc": "Defines the set of valid symbols.", 
                                "jsonldPredicate": {
                                    "_type": "@id", 
                                    "_id": "https://w3id.org/cwl/salad#symbols", 
                                    "identity": true
                                }, 
                                "type": {
                                    "items": "string", 
                                    "type": "array"
                                }, 
                                "name": "symbols", 
                                "inherited_from": "https://w3id.org/cwl/salad#EnumSchema"
                            }, 
                            {
                                "doc": "Must be `enum`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": {
                                    "symbols": [
                                        "enum"
                                    ], 
                                    "type": "enum", 
                                    "name": "Enum_symbol"
                                }, 
                                "name": "type", 
                                "inherited_from": "https://w3id.org/cwl/salad#EnumSchema"
                            }
                        ]
                    }, 
                    {
                        "fields": [
                            {
                                "doc": "Defines the type of the array elements.", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#items"
                                }, 
                                "type": [
                                    "PrimitiveType", 
                                    "RecordSchema", 
                                    "EnumSchema", 
                                    "ArraySchema", 
                                    "string", 
                                    {
                                        "items": [
                                            "PrimitiveType", 
                                            "RecordSchema", 
                                            "EnumSchema", 
                                            "ArraySchema", 
                                            "string"
                                        ], 
                                        "type": "array"
                                    }
                                ], 
                                "name": "items"
                            }, 
                            {
                                "doc": "Must be `array`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": {
                                    "symbols": [
                                        "array"
                                    ], 
                                    "type": "enum", 
                                    "name": "Array_symbol"
                                }, 
                                "name": "type"
                            }
                        ], 
                        "type": "record", 
                        "name": "ArraySchema"
                    }, 
                    "string", 
                    {
                        "items": [
                            "PrimitiveType", 
                            "RecordSchema", 
                            "EnumSchema", 
                            "ArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "type"
            }
        ]
    }, 
    {
        "symbols": [
            "draft-2", 
            "draft-3.dev1", 
            "draft-3.dev2", 
            "draft-3.dev3", 
            "draft-3.dev4", 
            "draft-3.dev5", 
            "draft-3", 
            "draft-4.dev1", 
            "draft-4.dev2", 
            "draft-4.dev3", 
            "v1.0.dev4", 
            "v1.0"
        ], 
        "doc": "Version symbols for published CWL document versions.", 
        "type": "enum", 
        "name": "CWLVersion"
    }, 
    {
        "symbols": [
            "File", 
            "Directory"
        ], 
        "extends": "https://w3id.org/cwl/salad#PrimitiveType", 
        "name": "CWLType", 
        "doc": [
            "Extends primitive types with the concept of a file and directory as a builtin type.", 
            "File: A File object", 
            "Directory: A Directory object"
        ], 
        "symbol": [
            "https://w3id.org/cwl/salad#null", 
            "http://www.w3.org/2001/XMLSchema#boolean", 
            "http://www.w3.org/2001/XMLSchema#int", 
            "http://www.w3.org/2001/XMLSchema#long", 
            "http://www.w3.org/2001/XMLSchema#float", 
            "http://www.w3.org/2001/XMLSchema#double", 
            "http://www.w3.org/2001/XMLSchema#string", 
            "https://w3id.org/cwl/cwl#File", 
            "https://w3id.org/cwl/cwl#Directory"
        ], 
        "type": "enum"
    }, 
    {
        "doc": "Represents a file (or group of files when `secondaryFiles` is provided) that\nwill be accessible by tools using standard POSIX file system call API such as\nopen(2) and read(2).\n\nFiles are represented as objects with `class` of `File`.  File objects have\na number of properties that provide metadata about the file.\n\nThe `location` property of a File is a URI that uniquely identifies the\nfile.  Implementations must support the file:// URI scheme and may support\nother schemes such as http://.  The value of `location` may also be a\nrelative reference, in which case it must be resolved relative to the URI\nof the document it appears in.  Alternately to `location`, implementations\nmust also accept the `path` property on File, which must be a filesystem\npath available on the same host as the CWL runner (for inputs) or the\nruntime environment of a command line tool execution (for command line tool\noutputs).\n\nIf no `location` or `path` is specified, a file object must specify\n`contents` with the UTF-8 text content of the file.  This is a \"file\nliteral\".  File literals do not correspond to external resources, but are\ncreated on disk with `contents` with when needed for a executing a tool.\nWhere appropriate, expressions can return file literals to define new files\non a runtime.  The maximum size of `contents` is 64 kilobytes.\n\nThe `basename` property defines the filename on disk where the file is\nstaged.  This may differ from the resource name.  If not provided,\n`basename` must be computed from the last path part of `location` and made\navailable to expressions.\n\nThe `secondaryFiles` property is a list of File or Directory objects that\nmust be staged in the same directory as the primary file.  It is an error\nfor file names to be duplicated in `secondaryFiles`.\n\nThe `size` property is the size in bytes of the File.  It must be computed\nfrom the resource and made available to expressions.  The `checksum` field\ncontains a cryptographic hash of the file content for use it verifying file\ncontents.  Implementations may, at user option, enable or disable\ncomputation of the `checksum` field for performance or other reasons.\nHowever, the ability to compute output checksums is required to pass the\nCWL conformance test suite.\n\nWhen executing a CommandLineTool, the files and secondary files may be\nstaged to an arbitrary directory, but must use the value of `basename` for\nthe filename.  The `path` property must be file path in the context of the\ntool execution runtime (local to the compute node, or within the executing\ncontainer).  All computed properties should be available to expressions.\nFile literals also must be staged and `path` must be set.\n\nWhen collecting CommandLineTool outputs, `glob` matching returns file paths\n(with the `path` property) and the derived properties. This can all be\nmodified by `outputEval`.  Alternately, if the file `cwl.outputs.json` is\npresent in the output, `outputBinding` is ignored.\n\nFile objects in the output must provide either a `location` URI or a `path`\nproperty in the context of the tool execution runtime (local to the compute\nnode, or within the executing container).\n\nWhen evaluating an ExpressionTool, file objects must be referenced via\n`location` (the expression tool does not have access to files on disk so\n`path` is meaningless) or as file literals.  It is legal to return a file\nobject with an existing `location` but a different `basename`.  The\n`loadContents` field of ExpressionTool inputs behaves the same as on\nCommandLineTool inputs, however it is not meaningful on the outputs.\n\nAn ExpressionTool may forward file references from input to output by using\nthe same value for `location`.\n", 
        "docParent": "https://w3id.org/cwl/cwl#CWLType", 
        "type": "record", 
        "name": "File", 
        "fields": [
            {
                "doc": "Must be `File` to indicate this object describes a file.", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": {
                    "symbols": [
                        "File"
                    ], 
                    "type": "enum", 
                    "name": "File_class"
                }, 
                "name": "class"
            }, 
            {
                "doc": "An IRI that identifies the file resource.  This may be a relative\nreference, in which case it must be resolved using the base IRI of the\ndocument.  The location may refer to a local or remote resource; the\nimplementation must use the IRI to retrieve file content.  If an\nimplementation is unable to retrieve the file content stored at a\nremote resource (due to unsupported protocol, access denied, or other\nissue) it must signal an error.\n\nIf the `location` field is not provided, the `contents` field must be\nprovided.  The implementation must assign a unique identifier for\nthe `location` field.\n\nIf the `path` field is provided but the `location` field is not, an\nimplementation may assign the value of the `path` field to `location`,\nthen follow the rules above.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "@id"
                }, 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "location"
            }, 
            {
                "doc": "The local host path where the File is available when a CommandLineTool is\nexecuted.  This field must be set by the implementation.  The final\npath component must match the value of `basename`.  This field\nmust not be used in any other context.  The command line tool being\nexecuted must be able to to access the file at `path` using the POSIX\n`open(2)` syscall.\n\nAs a special case, if the `path` field is provided but the `location`\nfield is not, an implementation may assign the value of the `path`\nfield to `location`, and remove the `path` field.\n\nIf the `path` contains [POSIX shell metacharacters](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02)\n(`|`,`&`, `;`, `<`, `>`, `(`,`)`, `$`,`` ` ``, `\\`, `\"`, `'`,\n`<space>`, `<tab>`, and `<newline>`) or characters\n[not allowed](http://www.iana.org/assignments/idna-tables-6.3.0/idna-tables-6.3.0.xhtml)\nfor [Internationalized Domain Names for Applications](https://tools.ietf.org/html/rfc6452)\nthen implementations may terminate the process with a\n`permanentFailure`.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#path"
                }, 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "path"
            }, 
            {
                "doc": "The base name of the file, that is, the name of the file without any\nleading directory path.  The base name must not contain a slash `/`.\n\nIf not provided, the implementation must set this field based on the\n`location` field by taking the final path component after parsing\n`location` as an IRI.  If `basename` is provided, it is not required to\nmatch the value from `location`.\n\nWhen this file is made available to a CommandLineTool, it must be named\nwith `basename`, i.e. the final component of the `path` field must match\n`basename`.\n", 
                "jsonldPredicate": "cwl:basename", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "basename"
            }, 
            {
                "doc": "The name of the directory containing file, that is, the path leading up\nto the final slash in the path such that `dirname + '/' + basename ==\npath`.\n\nThe implementation must set this field based on the value of `path`\nprior to evaluating parameter references or expressions in a\nCommandLineTool document.  This field must not be used in any other\ncontext.\n", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "dirname"
            }, 
            {
                "doc": "The basename root such that `nameroot + nameext == basename`, and\n`nameext` is empty or begins with a period and contains at most one\nperiod.  For the purposess of path splitting leading periods on the\nbasename are ignored; a basename of `.cshrc` will have a nameroot of\n`.cshrc`.\n\nThe implementation must set this field automatically based on the value\nof `basename` prior to evaluating parameter references or expressions.\n", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "nameroot"
            }, 
            {
                "doc": "The basename extension such that `nameroot + nameext == basename`, and\n`nameext` is empty or begins with a period and contains at most one\nperiod.  Leading periods on the basename are ignored; a basename of\n`.cshrc` will have an empty `nameext`.\n\nThe implementation must set this field automatically based on the value\nof `basename` prior to evaluating parameter references or expressions.\n", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "nameext"
            }, 
            {
                "doc": "Optional hash code for validating file integrity.  Currently must be in the form\n\"sha1$ + hexadecimal string\" using the SHA-1 algorithm.\n", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "checksum"
            }, 
            {
                "doc": "Optional file size", 
                "type": [
                    "null", 
                    "long"
                ], 
                "name": "size"
            }, 
            {
                "doc": "A list of additional files or directories that are associated with the\nprimary file and must be transferred alongside the primary file.\nExamples include indexes of the primary file, or external references\nwhich must be included when loading primary document.  A file object\nlisted in `secondaryFiles` may itself include `secondaryFiles` for\nwhich the same rules apply.\n", 
                "jsonldPredicate": "cwl:secondaryFiles", 
                "type": [
                    "null", 
                    {
                        "items": [
                            "File", 
                            {
                                "type": "record", 
                                "doc": "Represents a directory to present to a command line tool.\n\nDirectories are represented as objects with `class` of `Directory`.  Directory objects have\na number of properties that provide metadata about the directory.\n\nThe `location` property of a Directory is a URI that uniquely identifies\nthe directory.  Implementations must support the file:// URI scheme and may\nsupport other schemes such as http://.  Alternately to `location`,\nimplementations must also accept the `path` property on Direcotry, which\nmust be a filesystem path available on the same host as the CWL runner (for\ninputs) or the runtime environment of a command line tool execution (for\ncommand line tool outputs).\n\nA Directory object may have a `listing` field.  This is a list of File and\nDirectory objects that are contained in the Directory.  For each entry in\n`listing`, the `basename` property defines the name of the File or\nSubdirectory when staged to disk.  If `listing` is not provided, the\nimplementation must have some way of fetching the Directory listing at\nruntime based on the `location` field.\n\nIf a Directory does not have `location`, it is a Directory literal.  A\nDirectory literal must provide `listing`.  Directory literals must be\ncreated on disk at runtime as needed.\n\nThe resources in a Directory literal do not need to have any implied\nrelationship in their `location`.  For example, a Directory listing may\ncontain two files located on different hosts.  It is the responsibility of\nthe runtime to ensure that those files are staged to disk appropriately.\nSecondary files associated with files in `listing` must also be staged to\nthe same Directory.\n\nWhen executing a CommandLineTool, Directories must be recursively staged\nfirst and have local values of `path` assigend.\n\nDirectory objects in CommandLineTool output must provide either a\n`location` URI or a `path` property in the context of the tool execution\nruntime (local to the compute node, or within the executing container).\n\nAn ExpressionTool may forward file references from input to output by using\nthe same value for `location`.\n\nName conflicts (the same `basename` appearing multiple times in `listing`\nor in any entry in `secondaryFiles` in the listing) is a fatal error.\n", 
                                "docAfter": "https://w3id.org/cwl/cwl#File", 
                                "name": "Directory", 
                                "fields": [
                                    {
                                        "doc": "Must be `Directory` to indicate this object describes a Directory.", 
                                        "jsonldPredicate": {
                                            "_type": "@vocab", 
                                            "_id": "@type"
                                        }, 
                                        "type": {
                                            "symbols": [
                                                "Directory"
                                            ], 
                                            "type": "enum", 
                                            "name": "Directory_class"
                                        }, 
                                        "name": "class"
                                    }, 
                                    {
                                        "doc": "An IRI that identifies the directory resource.  This may be a relative\nreference, in which case it must be resolved using the base IRI of the\ndocument.  The location may refer to a local or remote resource.  If\nthe `listing` field is not set, the implementation must use the\nlocation IRI to retrieve directory listing.  If an implementation is\nunable to retrieve the directory listing stored at a remote resource (due to\nunsupported protocol, access denied, or other issue) it must signal an\nerror.\n\nIf the `location` field is not provided, the `listing` field must be\nprovided.  The implementation must assign a unique identifier for\nthe `location` field.\n\nIf the `path` field is provided but the `location` field is not, an\nimplementation may assign the value of the `path` field to `location`,\nthen follow the rules above.\n", 
                                        "jsonldPredicate": {
                                            "_type": "@id", 
                                            "_id": "@id"
                                        }, 
                                        "type": [
                                            "null", 
                                            "string"
                                        ], 
                                        "name": "location"
                                    }, 
                                    {
                                        "doc": "The local path where the Directory is made available prior to executing a\nCommandLineTool.  This must be set by the implementation.  This field\nmust not be used in any other context.  The command line tool being\nexecuted must be able to to access the directory at `path` using the POSIX\n`opendir(2)` syscall.\n\nIf the `path` contains [POSIX shell metacharacters](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02)\n(`|`,`&`, `;`, `<`, `>`, `(`,`)`, `$`,`` ` ``, `\\`, `\"`, `'`,\n`<space>`, `<tab>`, and `<newline>`) or characters\n[not allowed](http://www.iana.org/assignments/idna-tables-6.3.0/idna-tables-6.3.0.xhtml)\nfor [Internationalized Domain Names for Applications](https://tools.ietf.org/html/rfc6452)\nthen implementations may terminate the process with a\n`permanentFailure`.\n", 
                                        "jsonldPredicate": {
                                            "_type": "@id", 
                                            "_id": "https://w3id.org/cwl/cwl#path"
                                        }, 
                                        "type": [
                                            "null", 
                                            "string"
                                        ], 
                                        "name": "path"
                                    }, 
                                    {
                                        "doc": "The base name of the directory, that is, the name of the file without any\nleading directory path.  The base name must not contain a slash `/`.\n\nIf not provided, the implementation must set this field based on the\n`location` field by taking the final path component after parsing\n`location` as an IRI.  If `basename` is provided, it is not required to\nmatch the value from `location`.\n\nWhen this file is made available to a CommandLineTool, it must be named\nwith `basename`, i.e. the final component of the `path` field must match\n`basename`.\n", 
                                        "jsonldPredicate": "cwl:basename", 
                                        "type": [
                                            "null", 
                                            "string"
                                        ], 
                                        "name": "basename"
                                    }, 
                                    {
                                        "doc": "List of files or subdirectories contained in this directory.  The name\nof each file or subdirectory is determined by the `basename` field of\neach `File` or `Directory` object.  It is an error if a `File` shares a\n`basename` with any other entry in `listing`.  If two or more\n`Directory` object share the same `basename`, this must be treated as\nequivalent to a single subdirectory with the listings recursively\nmerged.\n", 
                                        "jsonldPredicate": {
                                            "_id": "https://w3id.org/cwl/cwl#listing"
                                        }, 
                                        "type": [
                                            "null", 
                                            {
                                                "items": [
                                                    "File", 
                                                    "Directory"
                                                ], 
                                                "type": "array"
                                            }
                                        ], 
                                        "name": "listing"
                                    }
                                ]
                            }
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "secondaryFiles"
            }, 
            {
                "doc": "The format of the file: this must be an IRI of a concept node that\nrepresents the file format, preferrably defined within an ontology.\nIf no ontology is available, file formats may be tested by exact match.\n\nReasoning about format compatability must be done by checking that an\ninput file format is the same, `owl:equivalentClass` or\n`rdfs:subClassOf` the format required by the input parameter.\n`owl:equivalentClass` is transitive with `rdfs:subClassOf`, e.g. if\n`<B> owl:equivalentClass <C>` and `<B> owl:subclassOf <A>` then infer\n`<C> owl:subclassOf <A>`.\n\nFile format ontologies may be provided in the \"$schema\" metadata at the\nroot of the document.  If no ontologies are specified in `$schema`, the\nruntime may perform exact file format matches.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#format", 
                    "identity": true
                }, 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "format"
            }, 
            {
                "doc": "File contents literal.  Maximum of 64 KiB.\n\nIf neither `location` nor `path` is provided, `contents` must be\nnon-null.  The implementation must assign a unique identifier for the\n`location` field.  When the file is staged as input to CommandLineTool,\nthe value of `contents` must be written to a file.\n\nIf `loadContents` of `inputBinding` or `outputBinding` is true and\n`location` is valid, the implementation must read up to the first 64\nKiB of text from the file and place it in the \"contents\" field.\n", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "contents"
            }
        ]
    }, 
    {
        "symbols": [
            "ExpressionPlaceholder"
        ], 
        "doc": "'Expression' is not a real type.  It indicates that a field must allow\nruntime parameter references.  If [InlineJavascriptRequirement](#InlineJavascriptRequirement)\nis declared and supported by the platform, the field must also allow\nJavascript expressions.\n", 
        "type": "enum", 
        "name": "Expression"
    }, 
    {
        "extends": "https://w3id.org/cwl/salad#RecordField", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/salad#RecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#InputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#EnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#InputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#ArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#InputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#PrimitiveType", 
                "specializeTo": "https://w3id.org/cwl/cwl#CWLType"
            }
        ], 
        "type": "record", 
        "name": "InputRecordField", 
        "fields": [
            {
                "doc": "The name of the field\n", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "name", 
                "inherited_from": "https://w3id.org/cwl/salad#RecordField"
            }, 
            {
                "doc": "A documentation string for this field\n", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "doc", 
                "inherited_from": "https://w3id.org/cwl/salad#RecordField"
            }, 
            {
                "doc": "The field type\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "CWLType", 
                    {
                        "extends": [
                            "https://w3id.org/cwl/salad#RecordSchema", 
                            "https://w3id.org/cwl/cwl#InputSchema"
                        ], 
                        "specialize": [
                            {
                                "specializeFrom": "https://w3id.org/cwl/salad#RecordField", 
                                "specializeTo": "https://w3id.org/cwl/cwl#InputRecordField"
                            }
                        ], 
                        "type": "record", 
                        "name": "InputRecordSchema", 
                        "fields": [
                            {
                                "doc": "Defines the fields of the record.", 
                                "jsonldPredicate": {
                                    "_id": "https://w3id.org/cwl/salad#fields", 
                                    "mapSubject": "name", 
                                    "mapPredicate": "type"
                                }, 
                                "type": [
                                    "null", 
                                    {
                                        "items": "InputRecordField", 
                                        "type": "array"
                                    }
                                ], 
                                "name": "fields", 
                                "inherited_from": "https://w3id.org/cwl/salad#RecordSchema"
                            }, 
                            {
                                "doc": "Must be `record`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": "Record_symbol", 
                                "name": "type", 
                                "inherited_from": "https://w3id.org/cwl/salad#RecordSchema"
                            }, 
                            {
                                "doc": "A short, human-readable label of this object.", 
                                "jsonldPredicate": "rdfs:label", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "label", 
                                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
                            }
                        ]
                    }, 
                    {
                        "extends": [
                            "https://w3id.org/cwl/salad#EnumSchema", 
                            "https://w3id.org/cwl/cwl#InputSchema"
                        ], 
                        "type": "record", 
                        "name": "InputEnumSchema", 
                        "fields": [
                            {
                                "doc": "Defines the set of valid symbols.", 
                                "jsonldPredicate": {
                                    "_type": "@id", 
                                    "_id": "https://w3id.org/cwl/salad#symbols", 
                                    "identity": true
                                }, 
                                "type": {
                                    "items": "string", 
                                    "type": "array"
                                }, 
                                "name": "symbols", 
                                "inherited_from": "https://w3id.org/cwl/salad#EnumSchema"
                            }, 
                            {
                                "doc": "Must be `enum`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": "Enum_symbol", 
                                "name": "type", 
                                "inherited_from": "https://w3id.org/cwl/salad#EnumSchema"
                            }, 
                            {
                                "doc": "A short, human-readable label of this object.", 
                                "jsonldPredicate": "rdfs:label", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "label", 
                                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
                            }, 
                            {
                                "jsonldPredicate": "cwl:inputBinding", 
                                "type": [
                                    "null", 
                                    {
                                        "doc": "\nWhen listed under `inputBinding` in the input schema, the term\n\"value\" refers to the the corresponding value in the input object.  For\nbinding objects listed in `CommandLineTool.arguments`, the term \"value\"\nrefers to the effective value after evaluating `valueFrom`.\n\nThe binding behavior when building the command line depends on the data\ntype of the value.  If there is a mismatch between the type described by\nthe input schema and the effective value, such as resulting from an\nexpression evaluation, an implementation must use the data type of the\neffective value.\n\n  - **string**: Add `prefix` and the string to the command line.\n\n  - **number**: Add `prefix` and decimal representation to command line.\n\n  - **boolean**: If true, add `prefix` to the command line.  If false, add\n      nothing.\n\n  - **File**: Add `prefix` and the value of\n    [`File.path`](#File) to the command line.\n\n  - **array**: If `itemSeparator` is specified, add `prefix` and the join\n      the array into a single string with `itemSeparator` separating the\n      items.  Otherwise first add `prefix`, then recursively process\n      individual elements.\n\n  - **object**: Add `prefix` only, and recursively add object fields for\n      which `inputBinding` is specified.\n\n  - **null**: Add nothing.\n", 
                                        "extends": "https://w3id.org/cwl/cwl#InputBinding", 
                                        "type": "record", 
                                        "name": "CommandLineBinding", 
                                        "fields": [
                                            {
                                                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nRead up to the first 64 KiB of text from the file and place it in the\n\"contents\" field of the file object for use by expressions.\n", 
                                                "jsonldPredicate": "cwl:loadContents", 
                                                "type": [
                                                    "null", 
                                                    "boolean"
                                                ], 
                                                "name": "loadContents", 
                                                "inherited_from": "https://w3id.org/cwl/cwl#InputBinding"
                                            }, 
                                            {
                                                "doc": "The sorting key.  Default position is 0.", 
                                                "type": [
                                                    "null", 
                                                    "int"
                                                ], 
                                                "name": "position"
                                            }, 
                                            {
                                                "doc": "Command line prefix to add before the value.", 
                                                "type": [
                                                    "null", 
                                                    "string"
                                                ], 
                                                "name": "prefix"
                                            }, 
                                            {
                                                "doc": "If true (default), then the prefix and value must be added as separate\ncommand line arguments; if false, prefix and value must be concatenated\ninto a single command line argument.\n", 
                                                "type": [
                                                    "null", 
                                                    "boolean"
                                                ], 
                                                "name": "separate"
                                            }, 
                                            {
                                                "doc": "Join the array elements into a single string with the elements\nseparated by by `itemSeparator`.\n", 
                                                "type": [
                                                    "null", 
                                                    "string"
                                                ], 
                                                "name": "itemSeparator"
                                            }, 
                                            {
                                                "doc": "If `valueFrom` is a constant string value, use this as the value and\napply the binding rules above.\n\nIf `valueFrom` is an expression, evaluate the expression to yield the\nactual value to use to build the command line and apply the binding\nrules above.  If the inputBinding is associated with an input\nparameter, the value of `self` in the expression will be the value of\nthe input parameter.  Input parameter defaults (as specified by the\n`InputParameter.default` field) must be applied before evaluating the\nexpression.\n\nWhen a binding is part of the `CommandLineTool.arguments` field,\nthe `valueFrom` field is required.\n", 
                                                "jsonldPredicate": "cwl:valueFrom", 
                                                "type": [
                                                    "null", 
                                                    "string", 
                                                    "Expression"
                                                ], 
                                                "name": "valueFrom"
                                            }, 
                                            {
                                                "doc": "If `ShellCommandRequirement` is in the requirements for the current command,\nthis controls whether the value is quoted on the command line (default is true).\nUse `shellQuote: false` to inject metacharacters for operations such as pipes.\n\nIf `shellQuote` is true or not provided, the implementation must not\npermit interpretation of any shell metacharacters or directives.\n", 
                                                "type": [
                                                    "null", 
                                                    "boolean"
                                                ], 
                                                "name": "shellQuote"
                                            }
                                        ]
                                    }
                                ], 
                                "name": "inputBinding"
                            }
                        ]
                    }, 
                    {
                        "extends": [
                            "https://w3id.org/cwl/salad#ArraySchema", 
                            "https://w3id.org/cwl/cwl#InputSchema"
                        ], 
                        "specialize": [
                            {
                                "specializeFrom": "https://w3id.org/cwl/salad#RecordSchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#InputRecordSchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/salad#EnumSchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#InputEnumSchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/salad#ArraySchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#InputArraySchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/salad#PrimitiveType", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CWLType"
                            }
                        ], 
                        "type": "record", 
                        "name": "InputArraySchema", 
                        "fields": [
                            {
                                "doc": "Defines the type of the array elements.", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#items"
                                }, 
                                "type": [
                                    "CWLType", 
                                    "InputRecordSchema", 
                                    "InputEnumSchema", 
                                    "InputArraySchema", 
                                    "string", 
                                    {
                                        "items": [
                                            "CWLType", 
                                            "InputRecordSchema", 
                                            "InputEnumSchema", 
                                            "InputArraySchema", 
                                            "string"
                                        ], 
                                        "type": "array"
                                    }
                                ], 
                                "name": "items", 
                                "inherited_from": "https://w3id.org/cwl/salad#ArraySchema"
                            }, 
                            {
                                "doc": "Must be `array`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": "Array_symbol", 
                                "name": "type", 
                                "inherited_from": "https://w3id.org/cwl/salad#ArraySchema"
                            }, 
                            {
                                "doc": "A short, human-readable label of this object.", 
                                "jsonldPredicate": "rdfs:label", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "label", 
                                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
                            }, 
                            {
                                "jsonldPredicate": "cwl:inputBinding", 
                                "type": [
                                    "null", 
                                    "CommandLineBinding"
                                ], 
                                "name": "inputBinding"
                            }
                        ]
                    }, 
                    "string", 
                    {
                        "items": [
                            "CWLType", 
                            "InputRecordSchema", 
                            "InputEnumSchema", 
                            "InputArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "type", 
                "inherited_from": "https://w3id.org/cwl/salad#RecordField"
            }, 
            {
                "jsonldPredicate": "cwl:inputBinding", 
                "type": [
                    "null", 
                    "CommandLineBinding"
                ], 
                "name": "inputBinding"
            }, 
            {
                "doc": "A short, human-readable label of this process object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "label"
            }
        ]
    }, 
    {
        "extends": "https://w3id.org/cwl/salad#RecordField", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/salad#RecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#OutputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#EnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#OutputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#ArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#OutputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/salad#PrimitiveType", 
                "specializeTo": "https://w3id.org/cwl/cwl#CWLType"
            }
        ], 
        "type": "record", 
        "name": "OutputRecordField", 
        "fields": [
            {
                "doc": "The name of the field\n", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "name", 
                "inherited_from": "https://w3id.org/cwl/salad#RecordField"
            }, 
            {
                "doc": "A documentation string for this field\n", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "doc", 
                "inherited_from": "https://w3id.org/cwl/salad#RecordField"
            }, 
            {
                "doc": "The field type\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "CWLType", 
                    {
                        "docParent": "https://w3id.org/cwl/cwl#OutputParameter", 
                        "extends": [
                            "https://w3id.org/cwl/salad#RecordSchema", 
                            "https://w3id.org/cwl/cwl#OutputSchema"
                        ], 
                        "name": "OutputRecordSchema", 
                        "fields": [
                            {
                                "doc": "Defines the fields of the record.", 
                                "jsonldPredicate": {
                                    "_id": "https://w3id.org/cwl/salad#fields", 
                                    "mapSubject": "name", 
                                    "mapPredicate": "type"
                                }, 
                                "type": [
                                    "null", 
                                    {
                                        "items": "OutputRecordField", 
                                        "type": "array"
                                    }
                                ], 
                                "name": "fields", 
                                "inherited_from": "https://w3id.org/cwl/salad#RecordSchema"
                            }, 
                            {
                                "doc": "Must be `record`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": "Record_symbol", 
                                "name": "type", 
                                "inherited_from": "https://w3id.org/cwl/salad#RecordSchema"
                            }, 
                            {
                                "doc": "A short, human-readable label of this object.", 
                                "jsonldPredicate": "rdfs:label", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "label", 
                                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
                            }
                        ], 
                        "specialize": [
                            {
                                "specializeFrom": "https://w3id.org/cwl/salad#RecordField", 
                                "specializeTo": "https://w3id.org/cwl/cwl#OutputRecordField"
                            }
                        ], 
                        "type": "record"
                    }, 
                    {
                        "extends": [
                            "https://w3id.org/cwl/salad#EnumSchema", 
                            "https://w3id.org/cwl/cwl#OutputSchema"
                        ], 
                        "docParent": "https://w3id.org/cwl/cwl#OutputParameter", 
                        "type": "record", 
                        "name": "OutputEnumSchema", 
                        "fields": [
                            {
                                "doc": "Defines the set of valid symbols.", 
                                "jsonldPredicate": {
                                    "_type": "@id", 
                                    "_id": "https://w3id.org/cwl/salad#symbols", 
                                    "identity": true
                                }, 
                                "type": {
                                    "items": "string", 
                                    "type": "array"
                                }, 
                                "name": "symbols", 
                                "inherited_from": "https://w3id.org/cwl/salad#EnumSchema"
                            }, 
                            {
                                "doc": "Must be `enum`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": "Enum_symbol", 
                                "name": "type", 
                                "inherited_from": "https://w3id.org/cwl/salad#EnumSchema"
                            }, 
                            {
                                "doc": "A short, human-readable label of this object.", 
                                "jsonldPredicate": "rdfs:label", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "label", 
                                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
                            }, 
                            {
                                "jsonldPredicate": "cwl:outputBinding", 
                                "type": [
                                    "null", 
                                    {
                                        "doc": "Describes how to generate an output parameter based on the files produced\nby a CommandLineTool.\n\nThe output parameter value is generated by applying these operations in the\nfollowing order:\n\n  - glob\n  - loadContents\n  - outputEval\n  - secondaryFiles\n", 
                                        "extends": "https://w3id.org/cwl/cwl#OutputBinding", 
                                        "type": "record", 
                                        "name": "CommandOutputBinding", 
                                        "fields": [
                                            {
                                                "doc": "Find files relative to the output directory, using POSIX glob(3)\npathname matching.  If an array is provided, find files that match any\npattern in the array.  If an expression is provided, the expression must\nreturn a string or an array of strings, which will then be evaluated as\none or more glob patterns.  Must only match and return files which\nactually exist.\n", 
                                                "type": [
                                                    "null", 
                                                    "string", 
                                                    "Expression", 
                                                    {
                                                        "items": "string", 
                                                        "type": "array"
                                                    }
                                                ], 
                                                "name": "glob"
                                            }, 
                                            {
                                                "doc": "For each file matched in `glob`, read up to\nthe first 64 KiB of text from the file and place it in the `contents`\nfield of the file object for manipulation by `outputEval`.\n", 
                                                "jsonldPredicate": "cwl:loadContents", 
                                                "type": [
                                                    "null", 
                                                    "boolean"
                                                ], 
                                                "name": "loadContents"
                                            }, 
                                            {
                                                "doc": "Evaluate an expression to generate the output value.  If `glob` was\nspecified, the value of `self` must be an array containing file objects\nthat were matched.  If no files were matched, `self` must be a zero\nlength array; if a single file was matched, the value of `self` is an\narray of a single element.  Additionally, if `loadContents` is `true`,\nthe File objects must include up to the first 64 KiB of file contents\nin the `contents` field.\n", 
                                                "type": [
                                                    "null", 
                                                    "string", 
                                                    "Expression"
                                                ], 
                                                "name": "outputEval"
                                            }
                                        ]
                                    }
                                ], 
                                "name": "outputBinding"
                            }
                        ]
                    }, 
                    {
                        "docParent": "https://w3id.org/cwl/cwl#OutputParameter", 
                        "extends": [
                            "https://w3id.org/cwl/salad#ArraySchema", 
                            "https://w3id.org/cwl/cwl#OutputSchema"
                        ], 
                        "name": "OutputArraySchema", 
                        "fields": [
                            {
                                "doc": "Defines the type of the array elements.", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#items"
                                }, 
                                "type": [
                                    "CWLType", 
                                    "OutputRecordSchema", 
                                    "OutputEnumSchema", 
                                    "OutputArraySchema", 
                                    "string", 
                                    {
                                        "items": [
                                            "CWLType", 
                                            "OutputRecordSchema", 
                                            "OutputEnumSchema", 
                                            "OutputArraySchema", 
                                            "string"
                                        ], 
                                        "type": "array"
                                    }
                                ], 
                                "name": "items", 
                                "inherited_from": "https://w3id.org/cwl/salad#ArraySchema"
                            }, 
                            {
                                "doc": "Must be `array`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": "Array_symbol", 
                                "name": "type", 
                                "inherited_from": "https://w3id.org/cwl/salad#ArraySchema"
                            }, 
                            {
                                "doc": "A short, human-readable label of this object.", 
                                "jsonldPredicate": "rdfs:label", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "label", 
                                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
                            }, 
                            {
                                "jsonldPredicate": "cwl:outputBinding", 
                                "type": [
                                    "null", 
                                    "CommandOutputBinding"
                                ], 
                                "name": "outputBinding"
                            }
                        ], 
                        "specialize": [
                            {
                                "specializeFrom": "https://w3id.org/cwl/salad#RecordSchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#OutputRecordSchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/salad#EnumSchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#OutputEnumSchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/salad#ArraySchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#OutputArraySchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/salad#PrimitiveType", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CWLType"
                            }
                        ], 
                        "type": "record"
                    }, 
                    "string", 
                    {
                        "items": [
                            "CWLType", 
                            "OutputRecordSchema", 
                            "OutputEnumSchema", 
                            "OutputArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "type", 
                "inherited_from": "https://w3id.org/cwl/salad#RecordField"
            }, 
            {
                "jsonldPredicate": "cwl:outputBinding", 
                "type": [
                    "null", 
                    "CommandOutputBinding"
                ], 
                "name": "outputBinding"
            }
        ]
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#Parameter", 
        "type": "record", 
        "name": "InputParameter", 
        "fields": [
            {
                "doc": "A short, human-readable label of this object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "label", 
                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or directories that\nmust be included alongside the primary file.  All listed secondary\nfiles must be present.  An implementation may fail workflow execution\nif an expected secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  2. Append the remainder of the string to the end of the file path.\n", 
                "jsonldPredicate": "cwl:secondaryFiles", 
                "type": [
                    "null", 
                    "string", 
                    "Expression", 
                    {
                        "items": [
                            "string", 
                            "Expression"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "secondaryFiles", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.\n", 
                "type": [
                    "null", 
                    "boolean"
                ], 
                "name": "streamable", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "A documentation string for this type, or an array of strings which should be concatenated.", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "doc", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "The unique identifier for this parameter object.", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "id"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nThis must be one or more IRIs of concept nodes\nthat represents file formats which are allowed as input to this\nparameter, preferrably defined within an ontology.  If no ontology is\navailable, file formats may be tested by exact match.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#format", 
                    "identity": true
                }, 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }, 
                    "Expression"
                ], 
                "name": "format"
            }, 
            {
                "doc": "Describes how to handle the inputs of a process and convert them\ninto a concrete form for execution, such as command line parameters.\n", 
                "jsonldPredicate": "cwl:inputBinding", 
                "type": [
                    "null", 
                    "CommandLineBinding"
                ], 
                "name": "inputBinding"
            }, 
            {
                "doc": "The default value to use for this parameter if the parameter is missing\nfrom the input object, or if the value of the parameter in the input\nobject is `null`.  Default values are applied before evaluating expressions\n(e.g. dependent `valueFrom` fields).\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#default", 
                    "noLinkCheck": true
                }, 
                "type": [
                    "null", 
                    "Any"
                ], 
                "name": "default"
            }, 
            {
                "doc": "Specify valid types of data that may be assigned to this parameter.\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "null", 
                    "CWLType", 
                    "InputRecordSchema", 
                    "InputEnumSchema", 
                    "InputArraySchema", 
                    "string", 
                    {
                        "items": [
                            "CWLType", 
                            "InputRecordSchema", 
                            "InputEnumSchema", 
                            "InputArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "type"
            }
        ]
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#Parameter", 
        "type": "record", 
        "name": "OutputParameter", 
        "fields": [
            {
                "doc": "A short, human-readable label of this object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "label", 
                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or directories that\nmust be included alongside the primary file.  All listed secondary\nfiles must be present.  An implementation may fail workflow execution\nif an expected secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  2. Append the remainder of the string to the end of the file path.\n", 
                "jsonldPredicate": "cwl:secondaryFiles", 
                "type": [
                    "null", 
                    "string", 
                    "Expression", 
                    {
                        "items": [
                            "string", 
                            "Expression"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "secondaryFiles", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.\n", 
                "type": [
                    "null", 
                    "boolean"
                ], 
                "name": "streamable", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "A documentation string for this type, or an array of strings which should be concatenated.", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "doc", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "The unique identifier for this parameter object.", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "id", 
                "inherited_from": "https://w3id.org/cwl/cwl#OutputParameter"
            }, 
            {
                "doc": "Describes how to handle the outputs of a process.\n", 
                "jsonldPredicate": "cwl:outputBinding", 
                "type": [
                    "null", 
                    "CommandOutputBinding"
                ], 
                "name": "outputBinding", 
                "inherited_from": "https://w3id.org/cwl/cwl#OutputParameter"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nThis is the file format that will be assigned to\nthe output parameter.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#format", 
                    "identity": true
                }, 
                "type": [
                    "null", 
                    "string", 
                    "Expression"
                ], 
                "name": "format", 
                "inherited_from": "https://w3id.org/cwl/cwl#OutputParameter"
            }
        ]
    }, 
    {
        "doc": "Indicates that the workflow platform must support inline Javascript expressions.\nIf this requirement is not present, the workflow platform must not perform expression\ninterpolatation.\n", 
        "type": "record", 
        "name": "InlineJavascriptRequirement", 
        "fields": [
            {
                "doc": "Always 'InlineJavascriptRequirement'", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "class"
            }, 
            {
                "doc": "Additional code fragments that will also be inserted\nbefore executing the expression code.  Allows for function definitions that may\nbe called from CWL expressions.\n", 
                "type": [
                    "null", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "expressionLib"
            }
        ], 
        "extends": "https://w3id.org/cwl/cwl#ProcessRequirement"
    }, 
    {
        "doc": "This field consists of an array of type definitions which must be used when\ninterpreting the `inputs` and `outputs` fields.  When a `type` field\ncontain a IRI, the implementation must check if the type is defined in\n`schemaDefs` and use that definition.  If the type is not found in\n`schemaDefs`, it is an error.  The entries in `schemaDefs` must be\nprocessed in the order listed such that later schema definitions may refer\nto earlier schema definitions.\n", 
        "type": "record", 
        "name": "SchemaDefRequirement", 
        "fields": [
            {
                "doc": "Always 'SchemaDefRequirement'", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "class"
            }, 
            {
                "doc": "The list of type definitions.", 
                "type": {
                    "items": [
                        "InputRecordSchema", 
                        "InputEnumSchema", 
                        "InputArraySchema"
                    ], 
                    "type": "array"
                }, 
                "name": "types"
            }
        ], 
        "extends": "https://w3id.org/cwl/cwl#ProcessRequirement"
    }, 
    {
        "doc": "Define an environment variable that will be set in the runtime environment\nby the workflow platform when executing the command line tool.  May be the\nresult of executing an expression, such as getting a parameter from input.\n", 
        "type": "record", 
        "name": "EnvironmentDef", 
        "fields": [
            {
                "doc": "The environment variable name", 
                "type": "string", 
                "name": "envName"
            }, 
            {
                "doc": "The environment variable value", 
                "type": [
                    "string", 
                    "Expression"
                ], 
                "name": "envValue"
            }
        ]
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#InputRecordField", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputRecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputEnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputBinding", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandLineBinding"
            }
        ], 
        "type": "record", 
        "name": "CommandInputRecordField", 
        "fields": [
            {
                "doc": "The name of the field\n", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "name", 
                "inherited_from": "https://w3id.org/cwl/salad#RecordField"
            }, 
            {
                "doc": "A documentation string for this field\n", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "doc", 
                "inherited_from": "https://w3id.org/cwl/salad#RecordField"
            }, 
            {
                "doc": "The field type\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "CWLType", 
                    {
                        "extends": "https://w3id.org/cwl/cwl#InputRecordSchema", 
                        "specialize": [
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#InputRecordField", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputRecordField"
                            }
                        ], 
                        "type": "record", 
                        "name": "CommandInputRecordSchema", 
                        "fields": [
                            {
                                "doc": "Defines the fields of the record.", 
                                "jsonldPredicate": {
                                    "_id": "https://w3id.org/cwl/salad#fields", 
                                    "mapSubject": "name", 
                                    "mapPredicate": "type"
                                }, 
                                "type": [
                                    "null", 
                                    {
                                        "items": "CommandInputRecordField", 
                                        "type": "array"
                                    }
                                ], 
                                "name": "fields", 
                                "inherited_from": "https://w3id.org/cwl/salad#RecordSchema"
                            }, 
                            {
                                "doc": "Must be `record`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": "Record_symbol", 
                                "name": "type", 
                                "inherited_from": "https://w3id.org/cwl/salad#RecordSchema"
                            }, 
                            {
                                "doc": "A short, human-readable label of this object.", 
                                "jsonldPredicate": "rdfs:label", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "label", 
                                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
                            }
                        ]
                    }, 
                    {
                        "extends": "https://w3id.org/cwl/cwl#InputEnumSchema", 
                        "specialize": [
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#InputBinding", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandLineBinding"
                            }
                        ], 
                        "type": "record", 
                        "name": "CommandInputEnumSchema", 
                        "fields": [
                            {
                                "doc": "Defines the set of valid symbols.", 
                                "jsonldPredicate": {
                                    "_type": "@id", 
                                    "_id": "https://w3id.org/cwl/salad#symbols", 
                                    "identity": true
                                }, 
                                "type": {
                                    "items": "string", 
                                    "type": "array"
                                }, 
                                "name": "symbols", 
                                "inherited_from": "https://w3id.org/cwl/salad#EnumSchema"
                            }, 
                            {
                                "doc": "Must be `enum`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": "Enum_symbol", 
                                "name": "type", 
                                "inherited_from": "https://w3id.org/cwl/salad#EnumSchema"
                            }, 
                            {
                                "doc": "A short, human-readable label of this object.", 
                                "jsonldPredicate": "rdfs:label", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "label", 
                                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
                            }, 
                            {
                                "jsonldPredicate": "cwl:inputBinding", 
                                "type": [
                                    "null", 
                                    "CommandLineBinding"
                                ], 
                                "name": "inputBinding", 
                                "inherited_from": "https://w3id.org/cwl/cwl#InputEnumSchema"
                            }
                        ]
                    }, 
                    {
                        "extends": "https://w3id.org/cwl/cwl#InputArraySchema", 
                        "specialize": [
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#InputRecordSchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputRecordSchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#InputEnumSchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputEnumSchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#InputArraySchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputArraySchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#InputBinding", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandLineBinding"
                            }
                        ], 
                        "type": "record", 
                        "name": "CommandInputArraySchema", 
                        "fields": [
                            {
                                "doc": "Defines the type of the array elements.", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#items"
                                }, 
                                "type": [
                                    "CWLType", 
                                    "CommandInputRecordSchema", 
                                    "CommandInputEnumSchema", 
                                    "CommandInputArraySchema", 
                                    "string", 
                                    {
                                        "items": [
                                            "CWLType", 
                                            "CommandInputRecordSchema", 
                                            "CommandInputEnumSchema", 
                                            "CommandInputArraySchema", 
                                            "string"
                                        ], 
                                        "type": "array"
                                    }
                                ], 
                                "name": "items", 
                                "inherited_from": "https://w3id.org/cwl/salad#ArraySchema"
                            }, 
                            {
                                "doc": "Must be `array`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": "Array_symbol", 
                                "name": "type", 
                                "inherited_from": "https://w3id.org/cwl/salad#ArraySchema"
                            }, 
                            {
                                "doc": "A short, human-readable label of this object.", 
                                "jsonldPredicate": "rdfs:label", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "label", 
                                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
                            }, 
                            {
                                "jsonldPredicate": "cwl:inputBinding", 
                                "type": [
                                    "null", 
                                    "CommandLineBinding"
                                ], 
                                "name": "inputBinding", 
                                "inherited_from": "https://w3id.org/cwl/cwl#InputArraySchema"
                            }
                        ]
                    }, 
                    "string", 
                    {
                        "items": [
                            "CWLType", 
                            "CommandInputRecordSchema", 
                            "CommandInputEnumSchema", 
                            "CommandInputArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "type", 
                "inherited_from": "https://w3id.org/cwl/salad#RecordField"
            }, 
            {
                "jsonldPredicate": "cwl:inputBinding", 
                "type": [
                    "null", 
                    "CommandLineBinding"
                ], 
                "name": "inputBinding", 
                "inherited_from": "https://w3id.org/cwl/cwl#InputRecordField"
            }, 
            {
                "doc": "A short, human-readable label of this process object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "label", 
                "inherited_from": "https://w3id.org/cwl/cwl#InputRecordField"
            }
        ]
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#OutputRecordField", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputRecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputEnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputBinding", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputBinding"
            }
        ], 
        "type": "record", 
        "name": "CommandOutputRecordField", 
        "fields": [
            {
                "doc": "The name of the field\n", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "name", 
                "inherited_from": "https://w3id.org/cwl/salad#RecordField"
            }, 
            {
                "doc": "A documentation string for this field\n", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "doc", 
                "inherited_from": "https://w3id.org/cwl/salad#RecordField"
            }, 
            {
                "doc": "The field type\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "CWLType", 
                    {
                        "extends": "https://w3id.org/cwl/cwl#OutputRecordSchema", 
                        "specialize": [
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#OutputRecordField", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputRecordField"
                            }
                        ], 
                        "type": "record", 
                        "name": "CommandOutputRecordSchema", 
                        "fields": [
                            {
                                "doc": "Defines the fields of the record.", 
                                "jsonldPredicate": {
                                    "_id": "https://w3id.org/cwl/salad#fields", 
                                    "mapSubject": "name", 
                                    "mapPredicate": "type"
                                }, 
                                "type": [
                                    "null", 
                                    {
                                        "items": "CommandOutputRecordField", 
                                        "type": "array"
                                    }
                                ], 
                                "name": "fields", 
                                "inherited_from": "https://w3id.org/cwl/salad#RecordSchema"
                            }, 
                            {
                                "doc": "Must be `record`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": "Record_symbol", 
                                "name": "type", 
                                "inherited_from": "https://w3id.org/cwl/salad#RecordSchema"
                            }, 
                            {
                                "doc": "A short, human-readable label of this object.", 
                                "jsonldPredicate": "rdfs:label", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "label", 
                                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
                            }
                        ]
                    }, 
                    {
                        "extends": "https://w3id.org/cwl/cwl#OutputEnumSchema", 
                        "specialize": [
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#OutputRecordSchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputRecordSchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#OutputEnumSchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputEnumSchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#OutputArraySchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputArraySchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#OutputBinding", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputBinding"
                            }
                        ], 
                        "type": "record", 
                        "name": "CommandOutputEnumSchema", 
                        "fields": [
                            {
                                "doc": "Defines the set of valid symbols.", 
                                "jsonldPredicate": {
                                    "_type": "@id", 
                                    "_id": "https://w3id.org/cwl/salad#symbols", 
                                    "identity": true
                                }, 
                                "type": {
                                    "items": "string", 
                                    "type": "array"
                                }, 
                                "name": "symbols", 
                                "inherited_from": "https://w3id.org/cwl/salad#EnumSchema"
                            }, 
                            {
                                "doc": "Must be `enum`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": "Enum_symbol", 
                                "name": "type", 
                                "inherited_from": "https://w3id.org/cwl/salad#EnumSchema"
                            }, 
                            {
                                "doc": "A short, human-readable label of this object.", 
                                "jsonldPredicate": "rdfs:label", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "label", 
                                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
                            }, 
                            {
                                "jsonldPredicate": "cwl:outputBinding", 
                                "type": [
                                    "null", 
                                    "CommandOutputBinding"
                                ], 
                                "name": "outputBinding", 
                                "inherited_from": "https://w3id.org/cwl/cwl#OutputEnumSchema"
                            }
                        ]
                    }, 
                    {
                        "extends": "https://w3id.org/cwl/cwl#OutputArraySchema", 
                        "specialize": [
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#OutputRecordSchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputRecordSchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#OutputEnumSchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputEnumSchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#OutputArraySchema", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputArraySchema"
                            }, 
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#OutputBinding", 
                                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputBinding"
                            }
                        ], 
                        "type": "record", 
                        "name": "CommandOutputArraySchema", 
                        "fields": [
                            {
                                "doc": "Defines the type of the array elements.", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#items"
                                }, 
                                "type": [
                                    "CWLType", 
                                    "CommandOutputRecordSchema", 
                                    "CommandOutputEnumSchema", 
                                    "CommandOutputArraySchema", 
                                    "string", 
                                    {
                                        "items": [
                                            "CWLType", 
                                            "CommandOutputRecordSchema", 
                                            "CommandOutputEnumSchema", 
                                            "CommandOutputArraySchema", 
                                            "string"
                                        ], 
                                        "type": "array"
                                    }
                                ], 
                                "name": "items", 
                                "inherited_from": "https://w3id.org/cwl/salad#ArraySchema"
                            }, 
                            {
                                "doc": "Must be `array`", 
                                "jsonldPredicate": {
                                    "refScope": 2, 
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/salad#type", 
                                    "typeDSL": true
                                }, 
                                "type": "Array_symbol", 
                                "name": "type", 
                                "inherited_from": "https://w3id.org/cwl/salad#ArraySchema"
                            }, 
                            {
                                "doc": "A short, human-readable label of this object.", 
                                "jsonldPredicate": "rdfs:label", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "label", 
                                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
                            }, 
                            {
                                "jsonldPredicate": "cwl:outputBinding", 
                                "type": [
                                    "null", 
                                    "CommandOutputBinding"
                                ], 
                                "name": "outputBinding", 
                                "inherited_from": "https://w3id.org/cwl/cwl#OutputArraySchema"
                            }
                        ]
                    }, 
                    "string", 
                    {
                        "items": [
                            "CWLType", 
                            "CommandOutputRecordSchema", 
                            "CommandOutputEnumSchema", 
                            "CommandOutputArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "type", 
                "inherited_from": "https://w3id.org/cwl/salad#RecordField"
            }, 
            {
                "jsonldPredicate": "cwl:outputBinding", 
                "type": [
                    "null", 
                    "CommandOutputBinding"
                ], 
                "name": "outputBinding", 
                "inherited_from": "https://w3id.org/cwl/cwl#OutputRecordField"
            }
        ]
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#InputParameter", 
        "name": "CommandInputParameter", 
        "doc": "An input parameter for a CommandLineTool.", 
        "fields": [
            {
                "doc": "A short, human-readable label of this object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "label", 
                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or directories that\nmust be included alongside the primary file.  All listed secondary\nfiles must be present.  An implementation may fail workflow execution\nif an expected secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  2. Append the remainder of the string to the end of the file path.\n", 
                "jsonldPredicate": "cwl:secondaryFiles", 
                "type": [
                    "null", 
                    "string", 
                    "Expression", 
                    {
                        "items": [
                            "string", 
                            "Expression"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "secondaryFiles", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.\n", 
                "type": [
                    "null", 
                    "boolean"
                ], 
                "name": "streamable", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "A documentation string for this type, or an array of strings which should be concatenated.", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "doc", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "The unique identifier for this parameter object.", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "id", 
                "inherited_from": "https://w3id.org/cwl/cwl#InputParameter"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nThis must be one or more IRIs of concept nodes\nthat represents file formats which are allowed as input to this\nparameter, preferrably defined within an ontology.  If no ontology is\navailable, file formats may be tested by exact match.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#format", 
                    "identity": true
                }, 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }, 
                    "Expression"
                ], 
                "name": "format", 
                "inherited_from": "https://w3id.org/cwl/cwl#InputParameter"
            }, 
            {
                "doc": "Describes how to handle the inputs of a process and convert them\ninto a concrete form for execution, such as command line parameters.\n", 
                "jsonldPredicate": "cwl:inputBinding", 
                "type": [
                    "null", 
                    "CommandLineBinding"
                ], 
                "name": "inputBinding", 
                "inherited_from": "https://w3id.org/cwl/cwl#InputParameter"
            }, 
            {
                "doc": "The default value to use for this parameter if the parameter is missing\nfrom the input object, or if the value of the parameter in the input\nobject is `null`.  Default values are applied before evaluating expressions\n(e.g. dependent `valueFrom` fields).\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#default", 
                    "noLinkCheck": true
                }, 
                "type": [
                    "null", 
                    "Any"
                ], 
                "name": "default", 
                "inherited_from": "https://w3id.org/cwl/cwl#InputParameter"
            }, 
            {
                "doc": "Specify valid types of data that may be assigned to this parameter.\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "null", 
                    "CWLType", 
                    "CommandInputRecordSchema", 
                    "CommandInputEnumSchema", 
                    "CommandInputArraySchema", 
                    "string", 
                    {
                        "items": [
                            "CWLType", 
                            "CommandInputRecordSchema", 
                            "CommandInputEnumSchema", 
                            "CommandInputArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "type", 
                "inherited_from": "https://w3id.org/cwl/cwl#InputParameter"
            }
        ], 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputRecordSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputRecordSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputEnumSchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputEnumSchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputArraySchema", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputArraySchema"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputBinding", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandLineBinding"
            }
        ], 
        "type": "record"
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#OutputParameter", 
        "name": "CommandOutputParameter", 
        "fields": [
            {
                "doc": "A short, human-readable label of this object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "label", 
                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or directories that\nmust be included alongside the primary file.  All listed secondary\nfiles must be present.  An implementation may fail workflow execution\nif an expected secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  2. Append the remainder of the string to the end of the file path.\n", 
                "jsonldPredicate": "cwl:secondaryFiles", 
                "type": [
                    "null", 
                    "string", 
                    "Expression", 
                    {
                        "items": [
                            "string", 
                            "Expression"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "secondaryFiles", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.\n", 
                "type": [
                    "null", 
                    "boolean"
                ], 
                "name": "streamable", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "A documentation string for this type, or an array of strings which should be concatenated.", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "doc", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "The unique identifier for this parameter object.", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "id", 
                "inherited_from": "https://w3id.org/cwl/cwl#OutputParameter"
            }, 
            {
                "doc": "Describes how to handle the outputs of a process.\n", 
                "jsonldPredicate": "cwl:outputBinding", 
                "type": [
                    "null", 
                    "CommandOutputBinding"
                ], 
                "name": "outputBinding", 
                "inherited_from": "https://w3id.org/cwl/cwl#OutputParameter"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nThis is the file format that will be assigned to\nthe output parameter.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#format", 
                    "identity": true
                }, 
                "type": [
                    "null", 
                    "string", 
                    "Expression"
                ], 
                "name": "format", 
                "inherited_from": "https://w3id.org/cwl/cwl#OutputParameter"
            }, 
            {
                "doc": "Specify valid types of data that may be assigned to this parameter.\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "null", 
                    "CWLType", 
                    {
                        "symbols": [
                            "stdout"
                        ], 
                        "doc": "Only valid as a `type` for a `CommandLineTool` output with no\n`outputBinding` set.\n\nThe following\n```\noutputs:\n  an_output_name:\n    type: stdout\n\nstdout: a_stdout_file\n```\nis equivalent to\n```\noutputs:\n  an_output_name:\n    type: File\n    streamable: true\n    outputBinding:\n      glob: a_stdout_file\n\nstdout: a_stdout_file\n```\n\nIf there is no `stdout` name provided, a random filename will be created.\nFor example, the following\n```\noutputs:\n  an_output_name:\n    type: stdout\n```\nis equivalent to\n```\noutputs:\n  an_output_name:\n    type: File\n    streamable: true\n    outputBinding:\n      glob: random_stdout_filenameABCDEFG\n\nstdout: random_stdout_filenameABCDEFG\n```\n", 
                        "docParent": "https://w3id.org/cwl/cwl#CommandOutputParameter", 
                        "type": "enum", 
                        "name": "stdout"
                    }, 
                    {
                        "symbols": [
                            "stderr"
                        ], 
                        "doc": "Only valid as a `type` for a `CommandLineTool` output with no\n`outputBinding` set.\n\nThe following\n```\noutputs:\n  an_output_name:\n  type: stderr\n\nstderr: a_stderr_file\n```\nis equivalent to\n```\noutputs:\n  an_output_name:\n    type: File\n    streamable: true\n    outputBinding:\n      glob: a_stderr_file\n\nstderr: a_stderr_file\n```\n\nIf there is no `stderr` name provided, a random filename will be created.\nFor example, the following\n```\noutputs:\n  an_output_name:\n    type: stderr\n```\nis equivalent to\n```\noutputs:\n  an_output_name:\n    type: File\n    streamable: true\n    outputBinding:\n      glob: random_stderr_filenameABCDEFG\n\nstderr: random_stderr_filenameABCDEFG\n```\n", 
                        "docParent": "https://w3id.org/cwl/cwl#CommandOutputParameter", 
                        "type": "enum", 
                        "name": "stderr"
                    }, 
                    "CommandOutputRecordSchema", 
                    "CommandOutputEnumSchema", 
                    "CommandOutputArraySchema", 
                    "string", 
                    {
                        "items": [
                            "CWLType", 
                            "CommandOutputRecordSchema", 
                            "CommandOutputEnumSchema", 
                            "CommandOutputArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "type"
            }
        ], 
        "doc": "An output parameter for a CommandLineTool.", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputBinding", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputBinding"
            }
        ], 
        "type": "record"
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#Process", 
        "name": "CommandLineTool", 
        "documentRoot": true, 
        "doc": "This defines the schema of the CWL Command Line Tool Description document.\n", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#InputParameter", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandInputParameter"
            }, 
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputParameter", 
                "specializeTo": "https://w3id.org/cwl/cwl#CommandOutputParameter"
            }
        ], 
        "type": "record", 
        "fields": [
            {
                "doc": "The unique identifier for this process object.", 
                "jsonldPredicate": "@id", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "id", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "doc": "Defines the input parameters of the process.  The process is ready to\nrun when all required input parameters are associated with concrete\nvalues.  Input parameters include a schema for each parameter which is\nused to validate the input object.  It may also be used to build a user\ninterface for constructing the input object.\n\nWhen accepting an input object, all input parameters must have a value.\nIf an input parameter is missing from the input object, it must be\nassigned a value of `null` (or the value of `default` for that\nparameter, if provided) for the purposes of validation and evaluation\nof expressions.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#inputs", 
                    "mapSubject": "id", 
                    "mapPredicate": "type"
                }, 
                "type": {
                    "items": "CommandInputParameter", 
                    "type": "array"
                }, 
                "name": "inputs", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "doc": "Defines the parameters representing the output of the process.  May be\nused to generate and/or validate the output object.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#outputs", 
                    "mapSubject": "id", 
                    "mapPredicate": "type"
                }, 
                "type": {
                    "items": "CommandOutputParameter", 
                    "type": "array"
                }, 
                "name": "outputs", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "doc": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this process.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#requirements", 
                    "mapSubject": "class"
                }, 
                "type": [
                    "null", 
                    {
                        "items": [
                            "InlineJavascriptRequirement", 
                            "SchemaDefRequirement", 
                            {
                                "doc": "Indicates that a workflow component should be run in a\n[Docker](http://docker.com) container, and specifies how to fetch or build\nthe image.\n\nIf a CommandLineTool lists `DockerRequirement` under\n`hints` (or `requirements`), it may (or must) be run in the specified Docker\ncontainer.\n\nThe platform must first acquire or install the correct Docker image as\nspecified by `dockerPull`, `dockerImport`, `dockerLoad` or `dockerFile`.\n\nThe platform must execute the tool in the container using `docker run` with\nthe appropriate Docker image and tool command line.\n\nThe workflow platform may provide input files and the designated output\ndirectory through the use of volume bind mounts.  The platform may rewrite\nfile paths in the input object to correspond to the Docker bind mounted\nlocations.\n\nWhen running a tool contained in Docker, the workflow platform must not\nassume anything about the contents of the Docker container, such as the\npresence or absence of specific software, except to assume that the\ngenerated command line represents a valid command within the runtime\nenvironment of the container.\n\n## Interaction with other requirements\n\nIf [EnvVarRequirement](#EnvVarRequirement) is specified alongside a\nDockerRequirement, the environment variables must be provided to Docker\nusing `--env` or `--env-file` and interact with the container's preexisting\nenvironment as defined by Docker.\n", 
                                "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
                                "type": "record", 
                                "name": "DockerRequirement", 
                                "fields": [
                                    {
                                        "doc": "Always 'DockerRequirement'", 
                                        "jsonldPredicate": {
                                            "_type": "@vocab", 
                                            "_id": "@type"
                                        }, 
                                        "type": "string", 
                                        "name": "class"
                                    }, 
                                    {
                                        "doc": "Specify a Docker image to retrieve using `docker pull`.", 
                                        "type": [
                                            "null", 
                                            "string"
                                        ], 
                                        "name": "dockerPull"
                                    }, 
                                    {
                                        "doc": "Specify a HTTP URL from which to download a Docker image using `docker load`.", 
                                        "type": [
                                            "null", 
                                            "string"
                                        ], 
                                        "name": "dockerLoad"
                                    }, 
                                    {
                                        "doc": "Supply the contents of a Dockerfile which will be built using `docker build`.", 
                                        "type": [
                                            "null", 
                                            "string"
                                        ], 
                                        "name": "dockerFile"
                                    }, 
                                    {
                                        "doc": "Provide HTTP URL to download and gunzip a Docker images using `docker import.", 
                                        "type": [
                                            "null", 
                                            "string"
                                        ], 
                                        "name": "dockerImport"
                                    }, 
                                    {
                                        "doc": "The image id that will be used for `docker run`.  May be a\nhuman-readable image name or the image identifier hash.  May be skipped\nif `dockerPull` is specified, in which case the `dockerPull` image id\nmust be used.\n", 
                                        "type": [
                                            "null", 
                                            "string"
                                        ], 
                                        "name": "dockerImageId"
                                    }, 
                                    {
                                        "doc": "Set the designated output directory to a specific location inside the\nDocker container.\n", 
                                        "type": [
                                            "null", 
                                            "string"
                                        ], 
                                        "name": "dockerOutputDirectory"
                                    }
                                ]
                            }, 
                            {
                                "doc": "A list of software packages that should be configured in the environment of\nthe defined process.\n", 
                                "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
                                "type": "record", 
                                "name": "SoftwareRequirement", 
                                "fields": [
                                    {
                                        "doc": "Always 'SoftwareRequirement'", 
                                        "jsonldPredicate": {
                                            "_type": "@vocab", 
                                            "_id": "@type"
                                        }, 
                                        "type": "string", 
                                        "name": "class"
                                    }, 
                                    {
                                        "doc": "The list of software to be configured.", 
                                        "jsonldPredicate": {
                                            "mapSubject": "package", 
                                            "mapPredicate": "specs"
                                        }, 
                                        "type": {
                                            "items": {
                                                "fields": [
                                                    {
                                                        "doc": "The name of the software to be made available. If the name is\ncommon, inconsistent, or otherwise ambiguous it should be combined with\none or more identifiers in the `specs` field.\n", 
                                                        "type": "string", 
                                                        "name": "package"
                                                    }, 
                                                    {
                                                        "doc": "The (optional) versions of the software that are known to be\ncompatible.\n", 
                                                        "type": [
                                                            "null", 
                                                            {
                                                                "items": "string", 
                                                                "type": "array"
                                                            }
                                                        ], 
                                                        "name": "version"
                                                    }, 
                                                    {
                                                        "doc": "One or more [IRI](https://en.wikipedia.org/wiki/Internationalized_Resource_Identifier)s\nidentifying resources for installing or enabling the software named in\nthe `package` field. Implementations may provide resolvers which map\nthese software identifer IRIs to some configuration action; or they can\nuse only the name from the `package` field on a best effort basis.\n\nFor example, the IRI https://packages.debian.org/bowtie could\nbe resolved with `apt-get install bowtie`. The IRI\nhttps://anaconda.org/bioconda/bowtie could be resolved with `conda\ninstall -c bioconda bowtie`.\n\nIRIs can also be system independent and used to map to a specific\nsoftware installation or selection mechanism.\nUsing [RRID](https://www.identifiers.org/rrid/) as an example:\nhttps://identifiers.org/rrid/RRID:SCR_005476\ncould be fulfilled using the above mentioned Debian or bioconda\npackage, a local installation managed by [Environement Modules](http://modules.sourceforge.net/),\nor any other mechanism the platform chooses. IRIs can also be from\nidentifer sources that are discipline specific yet still system\nindependent. As an example, the equivalent [ELIXIR Tools and Data\nService Registry](https://bio.tools) IRI to the previous RRID example is\nhttps://bio.tools/tool/bowtie2/version/2.2.8.\nIf supported by a given registry, implementations are encouraged to\nquery these system independent sofware identifier IRIs directly for\nlinks to packaging systems.\n\nA site specific IRI can be listed as well. For example, an academic\ncomputing cluster using Environement Modules could list the IRI\n`https://hpc.example.edu/modules/bowtie-tbb/1.22` to indicate that\n`module load bowtie-tbb/1.1.2` should be executed to make available\n`bowtie` version 1.1.2 compiled with the TBB library prior to running\nthe accompanying Workflow or CommandLineTool. Note that the example IRI\nis specific to a particular institution and computing environment as\nthe Environment Modules system does not have a common namespace or\nstandardized naming convention.\n\nThis last example is the least portable and should only be used if\nmechanisms based off of the `package` field or more generic IRIs are\nunavailable or unsuitable. While harmless to other sites, site specific\nsoftware IRIs should be left out of shared CWL descriptions to avoid\nclutter.\n", 
                                                        "type": [
                                                            "null", 
                                                            {
                                                                "items": "string", 
                                                                "type": "array"
                                                            }
                                                        ], 
                                                        "name": "specs"
                                                    }
                                                ], 
                                                "type": "record", 
                                                "name": "SoftwarePackage"
                                            }, 
                                            "type": "array"
                                        }, 
                                        "name": "packages"
                                    }
                                ]
                            }, 
                            {
                                "doc": "Define a list of files and subdirectories that must be created by the workflow platform in the designated output directory prior to executing the command line tool.", 
                                "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
                                "type": "record", 
                                "name": "InitialWorkDirRequirement", 
                                "fields": [
                                    {
                                        "doc": "InitialWorkDirRequirement", 
                                        "jsonldPredicate": {
                                            "_type": "@vocab", 
                                            "_id": "@type"
                                        }, 
                                        "type": "string", 
                                        "name": "class"
                                    }, 
                                    {
                                        "doc": "The list of files or subdirectories that must be placed in the\ndesignated output directory prior to executing the command line tool.\n\nMay be an expression.  If so, the expression return value must validate\nas `{type: array, items: [File, Directory]}`.\n\nFiles or Directories which are listed in the input parameters and\nappear in the `InitialWorkDirRequirement` listing must have their\n`path` set to their staged location in the designated output directory.\nIf the same File or Directory appears more than once in the\n`InitialWorkDirRequirement` listing, the implementation must choose\nexactly one value for `path`; how this value is chosen is undefined.\n", 
                                        "jsonldPredicate": {
                                            "_id": "https://w3id.org/cwl/cwl#listing"
                                        }, 
                                        "type": [
                                            {
                                                "items": [
                                                    "File", 
                                                    "Directory", 
                                                    {
                                                        "doc": "Define a file or subdirectory that must be placed in the designated output\ndirectory prior to executing the command line tool.  May be the result of\nexecuting an expression, such as building a configuration file from a\ntemplate.\n", 
                                                        "type": "record", 
                                                        "name": "Dirent", 
                                                        "fields": [
                                                            {
                                                                "doc": "The name of the file or subdirectory to create in the output directory.\nIf `entry` is a File or Directory, the `entryname` field overrides the value\nof `basename` of the File or Directory object.  Optional.\n", 
                                                                "jsonldPredicate": {
                                                                    "_id": "https://w3id.org/cwl/cwl#entryname"
                                                                }, 
                                                                "type": [
                                                                    "null", 
                                                                    "string", 
                                                                    "Expression"
                                                                ], 
                                                                "name": "entryname"
                                                            }, 
                                                            {
                                                                "doc": "If the value is a string literal or an expression which evaluates to a\nstring, a new file must be created with the string as the file contents.\n\nIf the value is an expression that evaluates to a `File` object, this\nindicates the referenced file should be added to the designated output\ndirectory prior to executing the tool.\n\nIf the value is an expression that evaluates to a `Dirent` object, this\nindicates that the File or Directory in `entry` should be added to the\ndesignated output directory with the name in `entryname`.\n\nIf `writable` is false, the file may be made available using a bind\nmount or file system link to avoid unnecessary copying of the input\nfile.\n", 
                                                                "jsonldPredicate": {
                                                                    "_id": "https://w3id.org/cwl/cwl#entry"
                                                                }, 
                                                                "type": [
                                                                    "string", 
                                                                    "Expression"
                                                                ], 
                                                                "name": "entry"
                                                            }, 
                                                            {
                                                                "doc": "If true, the file or directory must be writable by the tool.  Changes\nto the file or directory must be isolated and not visible by any other\nCommandLineTool process.  This may be implemented by making a copy of\nthe original file or directory.  Default false (files and directories\nread-only by default).\n\nA directory marked as `writable: true` implies that all files and\nsubdirectories are recursively writable as well.\n", 
                                                                "type": [
                                                                    "null", 
                                                                    "boolean"
                                                                ], 
                                                                "name": "writable"
                                                            }
                                                        ]
                                                    }, 
                                                    "string", 
                                                    "Expression"
                                                ], 
                                                "type": "array"
                                            }, 
                                            "string", 
                                            "Expression"
                                        ], 
                                        "name": "listing"
                                    }
                                ]
                            }, 
                            {
                                "doc": "Define a list of environment variables which will be set in the\nexecution environment of the tool.  See `EnvironmentDef` for details.\n", 
                                "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
                                "type": "record", 
                                "name": "EnvVarRequirement", 
                                "fields": [
                                    {
                                        "doc": "Always 'EnvVarRequirement'", 
                                        "jsonldPredicate": {
                                            "_type": "@vocab", 
                                            "_id": "@type"
                                        }, 
                                        "type": "string", 
                                        "name": "class"
                                    }, 
                                    {
                                        "doc": "The list of environment variables.", 
                                        "jsonldPredicate": {
                                            "mapSubject": "envName", 
                                            "mapPredicate": "envValue"
                                        }, 
                                        "type": {
                                            "items": "EnvironmentDef", 
                                            "type": "array"
                                        }, 
                                        "name": "envDef"
                                    }
                                ]
                            }, 
                            {
                                "doc": "Modify the behavior of CommandLineTool to generate a single string\ncontaining a shell command line.  Each item in the argument list must be\njoined into a string separated by single spaces and quoted to prevent\nintepretation by the shell, unless `CommandLineBinding` for that argument\ncontains `shellQuote: false`.  If `shellQuote: false` is specified, the\nargument is joined into the command string without quoting, which allows\nthe use of shell metacharacters such as `|` for pipes.\n", 
                                "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
                                "type": "record", 
                                "name": "ShellCommandRequirement", 
                                "fields": [
                                    {
                                        "doc": "Always 'ShellCommandRequirement'", 
                                        "jsonldPredicate": {
                                            "_type": "@vocab", 
                                            "_id": "@type"
                                        }, 
                                        "type": "string", 
                                        "name": "class"
                                    }
                                ]
                            }, 
                            {
                                "doc": "Specify basic hardware resource requirements.\n\n\"min\" is the minimum amount of a resource that must be reserved to schedule\na job. If \"min\" cannot be satisfied, the job should not be run.\n\n\"max\" is the maximum amount of a resource that the job shall be permitted\nto use. If a node has sufficient resources, multiple jobs may be scheduled\non a single node provided each job's \"max\" resource requirements are\nmet. If a job attempts to exceed its \"max\" resource allocation, an\nimplementation may deny additional resources, which may result in job\nfailure.\n\nIf \"min\" is specified but \"max\" is not, then \"max\" == \"min\"\nIf \"max\" is specified by \"min\" is not, then \"min\" == \"max\".\n\nIt is an error if max < min.\n\nIt is an error if the value of any of these fields is negative.\n\nIf neither \"min\" nor \"max\" is specified for a resource, an implementation may provide a default.\n", 
                                "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
                                "type": "record", 
                                "name": "ResourceRequirement", 
                                "fields": [
                                    {
                                        "doc": "Always 'ResourceRequirement'", 
                                        "jsonldPredicate": {
                                            "_type": "@vocab", 
                                            "_id": "@type"
                                        }, 
                                        "type": "string", 
                                        "name": "class"
                                    }, 
                                    {
                                        "doc": "Minimum reserved number of CPU cores", 
                                        "type": [
                                            "null", 
                                            "long", 
                                            "string", 
                                            "Expression"
                                        ], 
                                        "name": "coresMin"
                                    }, 
                                    {
                                        "doc": "Maximum reserved number of CPU cores", 
                                        "type": [
                                            "null", 
                                            "int", 
                                            "string", 
                                            "Expression"
                                        ], 
                                        "name": "coresMax"
                                    }, 
                                    {
                                        "doc": "Minimum reserved RAM in mebibytes (2**20)", 
                                        "type": [
                                            "null", 
                                            "long", 
                                            "string", 
                                            "Expression"
                                        ], 
                                        "name": "ramMin"
                                    }, 
                                    {
                                        "doc": "Maximum reserved RAM in mebibytes (2**20)", 
                                        "type": [
                                            "null", 
                                            "long", 
                                            "string", 
                                            "Expression"
                                        ], 
                                        "name": "ramMax"
                                    }, 
                                    {
                                        "doc": "Minimum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)", 
                                        "type": [
                                            "null", 
                                            "long", 
                                            "string", 
                                            "Expression"
                                        ], 
                                        "name": "tmpdirMin"
                                    }, 
                                    {
                                        "doc": "Maximum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)", 
                                        "type": [
                                            "null", 
                                            "long", 
                                            "string", 
                                            "Expression"
                                        ], 
                                        "name": "tmpdirMax"
                                    }, 
                                    {
                                        "doc": "Minimum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)", 
                                        "type": [
                                            "null", 
                                            "long", 
                                            "string", 
                                            "Expression"
                                        ], 
                                        "name": "outdirMin"
                                    }, 
                                    {
                                        "doc": "Maximum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)", 
                                        "type": [
                                            "null", 
                                            "long", 
                                            "string", 
                                            "Expression"
                                        ], 
                                        "name": "outdirMax"
                                    }
                                ]
                            }, 
                            {
                                "doc": "Indicates that the workflow platform must support nested workflows in\nthe `run` field of [WorkflowStep](#WorkflowStep).\n", 
                                "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
                                "type": "record", 
                                "name": "SubworkflowFeatureRequirement", 
                                "fields": [
                                    {
                                        "doc": "Always 'SubworkflowFeatureRequirement'", 
                                        "jsonldPredicate": {
                                            "_type": "@vocab", 
                                            "_id": "@type"
                                        }, 
                                        "type": "string", 
                                        "name": "class"
                                    }
                                ]
                            }, 
                            {
                                "doc": "Indicates that the workflow platform must support the `scatter` and\n`scatterMethod` fields of [WorkflowStep](#WorkflowStep).\n", 
                                "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
                                "type": "record", 
                                "name": "ScatterFeatureRequirement", 
                                "fields": [
                                    {
                                        "doc": "Always 'ScatterFeatureRequirement'", 
                                        "jsonldPredicate": {
                                            "_type": "@vocab", 
                                            "_id": "@type"
                                        }, 
                                        "type": "string", 
                                        "name": "class"
                                    }
                                ]
                            }, 
                            {
                                "doc": "Indicates that the workflow platform must support multiple inbound data links\nlisted in the `source` field of [WorkflowStepInput](#WorkflowStepInput).\n", 
                                "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
                                "type": "record", 
                                "name": "MultipleInputFeatureRequirement", 
                                "fields": [
                                    {
                                        "doc": "Always 'MultipleInputFeatureRequirement'", 
                                        "jsonldPredicate": {
                                            "_type": "@vocab", 
                                            "_id": "@type"
                                        }, 
                                        "type": "string", 
                                        "name": "class"
                                    }
                                ]
                            }, 
                            {
                                "doc": "Indicate that the workflow platform must support the `valueFrom` field\nof [WorkflowStepInput](#WorkflowStepInput).\n", 
                                "extends": "https://w3id.org/cwl/cwl#ProcessRequirement", 
                                "type": "record", 
                                "name": "StepInputExpressionRequirement", 
                                "fields": [
                                    {
                                        "doc": "Always 'StepInputExpressionRequirement'", 
                                        "jsonldPredicate": {
                                            "_type": "@vocab", 
                                            "_id": "@type"
                                        }, 
                                        "type": "string", 
                                        "name": "class"
                                    }
                                ]
                            }
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "requirements", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "doc": "Declares hints applying to either the runtime environment or the\nworkflow engine that may be helpful in executing this process.  It is\nnot an error if an implementation cannot satisfy all hints, however\nthe implementation may report a warning.\n", 
                "jsonldPredicate": {
                    "mapSubject": "class", 
                    "_id": "https://w3id.org/cwl/cwl#hints", 
                    "noLinkCheck": true
                }, 
                "type": [
                    "null", 
                    {
                        "items": "Any", 
                        "type": "array"
                    }
                ], 
                "name": "hints", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "doc": "A short, human-readable label of this process object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "label", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "doc": "A long, human-readable description of this process object.", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "doc", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "doc": "CWL document version. Always required at the document root. Not\nrequired for a Process embedded inside another Process.\n", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/cwl#cwlVersion"
                }, 
                "type": [
                    "null", 
                    "CWLVersion"
                ], 
                "name": "cwlVersion", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "class"
            }, 
            {
                "doc": "Specifies the program to execute.  If an array, the first element of\nthe array is the command to execute, and subsequent elements are\nmandatory command line arguments.  The elements in `baseCommand` must\nappear before any command line bindings from `inputBinding` or\n`arguments`.\n\nIf `baseCommand` is not provided or is an empty array, the first\nelement of the command line produced after processing `inputBinding` or\n`arguments` must be used as the program to execute.\n\nIf the program includes a path separator character it must\nbe an absolute path, otherwise it is an error.  If the program does not\ninclude a path separator, search the `$PATH` variable in the runtime\nenvironment of the workflow runner find the absolute path of the\nexecutable.\n", 
                "jsonldPredicate": {
                    "_container": "@list", 
                    "_id": "https://w3id.org/cwl/cwl#baseCommand"
                }, 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "baseCommand"
            }, 
            {
                "doc": "Command line bindings which are not directly associated with input parameters.\n", 
                "jsonldPredicate": {
                    "_container": "@list", 
                    "_id": "https://w3id.org/cwl/cwl#arguments"
                }, 
                "type": [
                    "null", 
                    {
                        "items": [
                            "string", 
                            "Expression", 
                            "CommandLineBinding"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "arguments"
            }, 
            {
                "doc": "A path to a file whose contents must be piped into the command's\nstandard input stream.\n", 
                "type": [
                    "null", 
                    "string", 
                    "Expression"
                ], 
                "name": "stdin"
            }, 
            {
                "doc": "Capture the command's standard error stream to a file written to\nthe designated output directory.\n\nIf `stderr` is a string, it specifies the file name to use.\n\nIf `stderr` is an expression, the expression is evaluated and must\nreturn a string with the file name to use to capture stderr.  If the\nreturn value is not a string, or the resulting path contains illegal\ncharacters (such as the path separator `/`) it is an error.\n", 
                "jsonldPredicate": "https://w3id.org/cwl/cwl#stderr", 
                "type": [
                    "null", 
                    "string", 
                    "Expression"
                ], 
                "name": "stderr"
            }, 
            {
                "doc": "Capture the command's standard output stream to a file written to\nthe designated output directory.\n\nIf `stdout` is a string, it specifies the file name to use.\n\nIf `stdout` is an expression, the expression is evaluated and must\nreturn a string with the file name to use to capture stdout.  If the\nreturn value is not a string, or the resulting path contains illegal\ncharacters (such as the path separator `/`) it is an error.\n", 
                "jsonldPredicate": "https://w3id.org/cwl/cwl#stdout", 
                "type": [
                    "null", 
                    "string", 
                    "Expression"
                ], 
                "name": "stdout"
            }, 
            {
                "doc": "Exit codes that indicate the process completed successfully.\n", 
                "type": [
                    "null", 
                    {
                        "items": "int", 
                        "type": "array"
                    }
                ], 
                "name": "successCodes"
            }, 
            {
                "doc": "Exit codes that indicate the process failed due to a possibly\ntemporary condition, where executing the process with the same\nruntime environment and inputs may produce different results.\n", 
                "type": [
                    "null", 
                    {
                        "items": "int", 
                        "type": "array"
                    }
                ], 
                "name": "temporaryFailCodes"
            }, 
            {
                "doc": "Exit codes that indicate the process failed due to a permanent logic error, where executing the process with the same runtime environment and same inputs is expected to always fail.", 
                "type": [
                    "null", 
                    {
                        "items": "int", 
                        "type": "array"
                    }
                ], 
                "name": "permanentFailCodes"
            }
        ]
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#OutputParameter", 
        "type": "record", 
        "name": "ExpressionToolOutputParameter", 
        "fields": [
            {
                "doc": "A short, human-readable label of this object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "label", 
                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or directories that\nmust be included alongside the primary file.  All listed secondary\nfiles must be present.  An implementation may fail workflow execution\nif an expected secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  2. Append the remainder of the string to the end of the file path.\n", 
                "jsonldPredicate": "cwl:secondaryFiles", 
                "type": [
                    "null", 
                    "string", 
                    "Expression", 
                    {
                        "items": [
                            "string", 
                            "Expression"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "secondaryFiles", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.\n", 
                "type": [
                    "null", 
                    "boolean"
                ], 
                "name": "streamable", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "A documentation string for this type, or an array of strings which should be concatenated.", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "doc", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "The unique identifier for this parameter object.", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "id", 
                "inherited_from": "https://w3id.org/cwl/cwl#OutputParameter"
            }, 
            {
                "doc": "Describes how to handle the outputs of a process.\n", 
                "jsonldPredicate": "cwl:outputBinding", 
                "type": [
                    "null", 
                    "CommandOutputBinding"
                ], 
                "name": "outputBinding", 
                "inherited_from": "https://w3id.org/cwl/cwl#OutputParameter"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nThis is the file format that will be assigned to\nthe output parameter.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#format", 
                    "identity": true
                }, 
                "type": [
                    "null", 
                    "string", 
                    "Expression"
                ], 
                "name": "format", 
                "inherited_from": "https://w3id.org/cwl/cwl#OutputParameter"
            }, 
            {
                "doc": "Specify valid types of data that may be assigned to this parameter.\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "null", 
                    "CWLType", 
                    "OutputRecordSchema", 
                    "OutputEnumSchema", 
                    "OutputArraySchema", 
                    "string", 
                    {
                        "items": [
                            "CWLType", 
                            "OutputRecordSchema", 
                            "OutputEnumSchema", 
                            "OutputArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "type"
            }
        ]
    }, 
    {
        "extends": "https://w3id.org/cwl/cwl#Process", 
        "name": "ExpressionTool", 
        "documentRoot": true, 
        "doc": "Execute an expression as a Workflow step.\n", 
        "specialize": [
            {
                "specializeFrom": "https://w3id.org/cwl/cwl#OutputParameter", 
                "specializeTo": "https://w3id.org/cwl/cwl#ExpressionToolOutputParameter"
            }
        ], 
        "type": "record", 
        "fields": [
            {
                "doc": "The unique identifier for this process object.", 
                "jsonldPredicate": "@id", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "id", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "doc": "Defines the input parameters of the process.  The process is ready to\nrun when all required input parameters are associated with concrete\nvalues.  Input parameters include a schema for each parameter which is\nused to validate the input object.  It may also be used to build a user\ninterface for constructing the input object.\n\nWhen accepting an input object, all input parameters must have a value.\nIf an input parameter is missing from the input object, it must be\nassigned a value of `null` (or the value of `default` for that\nparameter, if provided) for the purposes of validation and evaluation\nof expressions.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#inputs", 
                    "mapSubject": "id", 
                    "mapPredicate": "type"
                }, 
                "type": {
                    "items": "InputParameter", 
                    "type": "array"
                }, 
                "name": "inputs", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "doc": "Defines the parameters representing the output of the process.  May be\nused to generate and/or validate the output object.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#outputs", 
                    "mapSubject": "id", 
                    "mapPredicate": "type"
                }, 
                "type": {
                    "items": "ExpressionToolOutputParameter", 
                    "type": "array"
                }, 
                "name": "outputs", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "doc": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this process.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#requirements", 
                    "mapSubject": "class"
                }, 
                "type": [
                    "null", 
                    {
                        "items": [
                            "InlineJavascriptRequirement", 
                            "SchemaDefRequirement", 
                            "DockerRequirement", 
                            "SoftwareRequirement", 
                            "InitialWorkDirRequirement", 
                            "EnvVarRequirement", 
                            "ShellCommandRequirement", 
                            "ResourceRequirement", 
                            "SubworkflowFeatureRequirement", 
                            "ScatterFeatureRequirement", 
                            "MultipleInputFeatureRequirement", 
                            "StepInputExpressionRequirement"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "requirements", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "doc": "Declares hints applying to either the runtime environment or the\nworkflow engine that may be helpful in executing this process.  It is\nnot an error if an implementation cannot satisfy all hints, however\nthe implementation may report a warning.\n", 
                "jsonldPredicate": {
                    "mapSubject": "class", 
                    "_id": "https://w3id.org/cwl/cwl#hints", 
                    "noLinkCheck": true
                }, 
                "type": [
                    "null", 
                    {
                        "items": "Any", 
                        "type": "array"
                    }
                ], 
                "name": "hints", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "doc": "A short, human-readable label of this process object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "label", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "doc": "A long, human-readable description of this process object.", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "doc", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "doc": "CWL document version. Always required at the document root. Not\nrequired for a Process embedded inside another Process.\n", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/cwl#cwlVersion"
                }, 
                "type": [
                    "null", 
                    "CWLVersion"
                ], 
                "name": "cwlVersion", 
                "inherited_from": "https://w3id.org/cwl/cwl#Process"
            }, 
            {
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "@type"
                }, 
                "type": "string", 
                "name": "class"
            }, 
            {
                "doc": "The expression to execute.  The expression must return a JSON object which\nmatches the output parameters of the ExpressionTool.\n", 
                "type": [
                    "string", 
                    "Expression"
                ], 
                "name": "expression"
            }
        ]
    }, 
    {
        "symbols": [
            "merge_nested", 
            "merge_flattened"
        ], 
        "doc": "The input link merge method, described in [WorkflowStepInput](#WorkflowStepInput).", 
        "docParent": "https://w3id.org/cwl/cwl#WorkflowStepInput", 
        "type": "enum", 
        "name": "LinkMergeMethod"
    }, 
    {
        "docParent": "https://w3id.org/cwl/cwl#Workflow", 
        "extends": "https://w3id.org/cwl/cwl#OutputParameter", 
        "name": "WorkflowOutputParameter", 
        "fields": [
            {
                "doc": "A short, human-readable label of this object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "label", 
                "inherited_from": "https://w3id.org/cwl/cwl#SchemaBase"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or directories that\nmust be included alongside the primary file.  All listed secondary\nfiles must be present.  An implementation may fail workflow execution\nif an expected secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  2. Append the remainder of the string to the end of the file path.\n", 
                "jsonldPredicate": "cwl:secondaryFiles", 
                "type": [
                    "null", 
                    "string", 
                    "Expression", 
                    {
                        "items": [
                            "string", 
                            "Expression"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "secondaryFiles", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.\n", 
                "type": [
                    "null", 
                    "boolean"
                ], 
                "name": "streamable", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "A documentation string for this type, or an array of strings which should be concatenated.", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "doc", 
                "inherited_from": "https://w3id.org/cwl/cwl#Parameter"
            }, 
            {
                "doc": "The unique identifier for this parameter object.", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "id", 
                "inherited_from": "https://w3id.org/cwl/cwl#OutputParameter"
            }, 
            {
                "doc": "Describes how to handle the outputs of a process.\n", 
                "jsonldPredicate": "cwl:outputBinding", 
                "type": [
                    "null", 
                    "CommandOutputBinding"
                ], 
                "name": "outputBinding", 
                "inherited_from": "https://w3id.org/cwl/cwl#OutputParameter"
            }, 
            {
                "doc": "Only valid when `type: File` or is an array of `items: File`.\n\nThis is the file format that will be assigned to\nthe output parameter.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#format", 
                    "identity": true
                }, 
                "type": [
                    "null", 
                    "string", 
                    "Expression"
                ], 
                "name": "format", 
                "inherited_from": "https://w3id.org/cwl/cwl#OutputParameter"
            }, 
            {
                "doc": "Specifies one or more workflow parameters that supply the value of to\nthe output parameter.\n", 
                "jsonldPredicate": {
                    "refScope": 0, 
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#outputSource"
                }, 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "outputSource"
            }, 
            {
                "doc": "The method to use to merge multiple sources into a single array.\nIf not specified, the default method is \"merge_nested\".\n", 
                "jsonldPredicate": "cwl:linkMerge", 
                "type": [
                    "null", 
                    "LinkMergeMethod"
                ], 
                "name": "linkMerge"
            }, 
            {
                "doc": "Specify valid types of data that may be assigned to this parameter.\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/salad#type", 
                    "typeDSL": true
                }, 
                "type": [
                    "null", 
                    "CWLType", 
                    "OutputRecordSchema", 
                    "OutputEnumSchema", 
                    "OutputArraySchema", 
                    "string", 
                    {
                        "items": [
                            "CWLType", 
                            "OutputRecordSchema", 
                            "OutputEnumSchema", 
                            "OutputArraySchema", 
                            "string"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "type"
            }
        ], 
        "doc": "Describe an output parameter of a workflow.  The parameter must be\nconnected to one or more parameters defined in the workflow that will\nprovide the value of the output parameter.\n", 
        "type": "record"
    }, 
    {
        "docParent": "https://w3id.org/cwl/cwl#WorkflowStep", 
        "extends": "https://w3id.org/cwl/cwl#Sink", 
        "name": "WorkflowStepInput", 
        "fields": [
            {
                "doc": "Specifies one or more workflow parameters that will provide input to\nthe underlying step parameter.\n", 
                "jsonldPredicate": {
                    "refScope": 2, 
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#source"
                }, 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "source", 
                "inherited_from": "https://w3id.org/cwl/cwl#Sink"
            }, 
            {
                "doc": "The method to use to merge multiple inbound links into a single array.\nIf not specified, the default method is \"merge_nested\".\n", 
                "jsonldPredicate": "cwl:linkMerge", 
                "type": [
                    "null", 
                    "LinkMergeMethod"
                ], 
                "name": "linkMerge", 
                "inherited_from": "https://w3id.org/cwl/cwl#Sink"
            }, 
            {
                "doc": "A unique identifier for this workflow input parameter.", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "id"
            }, 
            {
                "doc": "The default value for this parameter to use if either there is no\n`source` field, or the value produced by the `source` is `null`.  The\ndefault must be applied prior to scattering or evaluating `valueFrom`.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#default", 
                    "noLinkCheck": true
                }, 
                "type": [
                    "null", 
                    "Any"
                ], 
                "name": "default"
            }, 
            {
                "doc": "To use valueFrom, [StepInputExpressionRequirement](#StepInputExpressionRequirement) must\nbe specified in the workflow or workflow step requirements.\n\nIf `valueFrom` is a constant string value, use this as the value for\nthis input parameter.\n\nIf `valueFrom` is a parameter reference or expression, it must be\nevaluated to yield the actual value to be assiged to the input field.\n\nThe `self` value of in the parameter reference or expression must be\nthe value of the parameter(s) specified in the `source` field, or\nnull if there is no `source` field.\n\nThe value of `inputs` in the parameter reference or expression must be\nthe input object to the workflow step after assigning the `source`\nvalues, applying `default`, and then scattering.  The order of\nevaluating `valueFrom` among step input parameters is undefined and the\nresult of evaluating `valueFrom` on a parameter must not be visible to\nevaluation of `valueFrom` on other parameters.\n", 
                "jsonldPredicate": "cwl:valueFrom", 
                "type": [
                    "null", 
                    "string", 
                    "Expression"
                ], 
                "name": "valueFrom"
            }
        ], 
        "doc": "The input of a workflow step connects an upstream parameter (from the\nworkflow inputs, or the outputs of other workflows steps) with the input\nparameters of the underlying step.\n\n## Input object\n\nA WorkflowStepInput object must contain an `id` field in the form\n`#fieldname` or `#prefix/fieldname`.  When the `id` field contains a slash\n`/` the field name consists of the characters following the final slash\n(the prefix portion may contain one or more slashes to indicate scope).\nThis defines a field of the workflow step input object with the value of\nthe `source` parameter(s).\n\n## Merging\n\nTo merge multiple inbound data links,\n[MultipleInputFeatureRequirement](#MultipleInputFeatureRequirement) must be specified\nin the workflow or workflow step requirements.\n\nIf the sink parameter is an array, or named in a [workflow\nscatter](#WorkflowStep) operation, there may be multiple inbound data links\nlisted in the `source` field.  The values from the input links are merged\ndepending on the method specified in the `linkMerge` field.  If not\nspecified, the default method is \"merge_nested\".\n\n* **merge_nested**\n\n  The input must be an array consisting of exactly one entry for each\n  input link.  If \"merge_nested\" is specified with a single link, the value\n  from the link must be wrapped in a single-item list.\n\n* **merge_flattened**\n\n  1. The source and sink parameters must be compatible types, or the source\n     type must be compatible with single element from the \"items\" type of\n     the destination array parameter.\n  2. Source parameters which are arrays are concatenated.\n     Source parameters which are single element types are appended as\n     single elements.\n", 
        "type": "record"
    }, 
    {
        "doc": "Associate an output parameter of the underlying process with a workflow\nparameter.  The workflow parameter (given in the `id` field) be may be used\nas a `source` to connect with input parameters of other workflow steps, or\nwith an output parameter of the process.\n", 
        "docParent": "https://w3id.org/cwl/cwl#WorkflowStep", 
        "type": "record", 
        "name": "WorkflowStepOutput", 
        "fields": [
            {
                "doc": "A unique identifier for this workflow output parameter.  This is the\nidentifier to use in the `source` field of `WorkflowStepInput` to\nconnect the output value to downstream parameters.\n", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "id"
            }
        ]
    }, 
    {
        "symbols": [
            "dotproduct", 
            "nested_crossproduct", 
            "flat_crossproduct"
        ], 
        "doc": "The scatter method, as described in [workflow step scatter](#WorkflowStep).", 
        "docParent": "https://w3id.org/cwl/cwl#WorkflowStep", 
        "type": "enum", 
        "name": "ScatterMethod"
    }, 
    {
        "doc": "A workflow step is an executable element of a workflow.  It specifies the\nunderlying process implementation (such as `CommandLineTool` or another\n`Workflow`) in the `run` field and connects the input and output parameters\nof the underlying process to workflow parameters.\n\n# Scatter/gather\n\nTo use scatter/gather,\n[ScatterFeatureRequirement](#ScatterFeatureRequirement) must be specified\nin the workflow or workflow step requirements.\n\nA \"scatter\" operation specifies that the associated workflow step or\nsubworkflow should execute separately over a list of input elements.  Each\njob making up a scatter operation is independent and may be executed\nconcurrently.\n\nThe `scatter` field specifies one or more input parameters which will be\nscattered.  An input parameter may be listed more than once.  The declared\ntype of each input parameter is implicitly becomes an array of items of the\ninput parameter type.  If a parameter is listed more than once, it becomes\na nested array.  As a result, upstream parameters which are connected to\nscattered parameters must be arrays.\n\nAll output parameter types are also implicitly wrapped in arrays.  Each job\nin the scatter results in an entry in the output array.\n\nIf any scattered parameter runtime value is an empty array, all outputs are\nset to empty arrays and no work is done for the step, according to\napplicable scattering rules.\n\nIf `scatter` declares more than one input parameter, `scatterMethod`\ndescribes how to decompose the input into a discrete set of jobs.\n\n  * **dotproduct** specifies that each of the input arrays are aligned and one\n      element taken from each array to construct each job.  It is an error\n      if all input arrays are not the same length.\n\n  * **nested_crossproduct** specifies the Cartesian product of the inputs,\n      producing a job for every combination of the scattered inputs.  The\n      output must be nested arrays for each level of scattering, in the\n      order that the input arrays are listed in the `scatter` field.\n\n  * **flat_crossproduct** specifies the Cartesian product of the inputs,\n      producing a job for every combination of the scattered inputs.  The\n      output arrays must be flattened to a single level, but otherwise listed in the\n      order that the input arrays are listed in the `scatter` field.\n\n# Subworkflows\n\nTo specify a nested workflow as part of a workflow step,\n[SubworkflowFeatureRequirement](#SubworkflowFeatureRequirement) must be\nspecified in the workflow or workflow step requirements.\n\nIt is a fatal error if a workflow directly or indirectly invokes itself as\na subworkflow (recursive workflows are not allowed).\n", 
        "docParent": "https://w3id.org/cwl/cwl#Workflow", 
        "type": "record", 
        "name": "WorkflowStep", 
        "fields": [
            {
                "doc": "The unique identifier for this workflow step.", 
                "jsonldPredicate": "@id", 
                "type": "string", 
                "name": "id"
            }, 
            {
                "doc": "Defines the input parameters of the workflow step.  The process is ready to\nrun when all required input parameters are associated with concrete\nvalues.  Input parameters include a schema for each parameter which is\nused to validate the input object.  It may also be used build a user\ninterface for constructing the input object.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#in", 
                    "mapSubject": "id", 
                    "mapPredicate": "source"
                }, 
                "type": {
                    "items": "WorkflowStepInput", 
                    "type": "array"
                }, 
                "name": "in"
            }, 
            {
                "doc": "Defines the parameters representing the output of the process.  May be\nused to generate and/or validate the output object.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#out", 
                    "identity": true
                }, 
                "type": [
                    {
                        "items": [
                            "string", 
                            "WorkflowStepOutput"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "out"
            }, 
            {
                "doc": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this workflow step.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.\n", 
                "jsonldPredicate": {
                    "_id": "https://w3id.org/cwl/cwl#requirements", 
                    "mapSubject": "class"
                }, 
                "type": [
                    "null", 
                    {
                        "items": [
                            "InlineJavascriptRequirement", 
                            "SchemaDefRequirement", 
                            "DockerRequirement", 
                            "SoftwareRequirement", 
                            "InitialWorkDirRequirement", 
                            "EnvVarRequirement", 
                            "ShellCommandRequirement", 
                            "ResourceRequirement", 
                            "SubworkflowFeatureRequirement", 
                            "ScatterFeatureRequirement", 
                            "MultipleInputFeatureRequirement", 
                            "StepInputExpressionRequirement"
                        ], 
                        "type": "array"
                    }
                ], 
                "name": "requirements"
            }, 
            {
                "doc": "Declares hints applying to either the runtime environment or the\nworkflow engine that may be helpful in executing this workflow step.  It is\nnot an error if an implementation cannot satisfy all hints, however\nthe implementation may report a warning.\n", 
                "jsonldPredicate": {
                    "mapSubject": "class", 
                    "_id": "https://w3id.org/cwl/cwl#hints", 
                    "noLinkCheck": true
                }, 
                "type": [
                    "null", 
                    {
                        "items": "Any", 
                        "type": "array"
                    }
                ], 
                "name": "hints"
            }, 
            {
                "doc": "A short, human-readable label of this process object.", 
                "jsonldPredicate": "rdfs:label", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "label"
            }, 
            {
                "doc": "A long, human-readable description of this process object.", 
                "jsonldPredicate": "rdfs:comment", 
                "type": [
                    "null", 
                    "string"
                ], 
                "name": "doc"
            }, 
            {
                "doc": "Specifies the process to run.\n", 
                "jsonldPredicate": {
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#run"
                }, 
                "type": [
                    "string", 
                    "CommandLineTool", 
                    "ExpressionTool", 
                    {
                        "extends": "https://w3id.org/cwl/cwl#Process", 
                        "name": "Workflow", 
                        "documentRoot": true, 
                        "doc": "A workflow describes a set of **steps** and the **dependencies** between\nthose steps.  When a step produces output that will be consumed by a\nsecond step, the first step is a dependency of the second step.\n\nWhen there is a dependency, the workflow engine must execute the preceeding\nstep and wait for it to successfully produce output before executing the\ndependent step.  If two steps are defined in the workflow graph that\nare not directly or indirectly dependent, these steps are **independent**,\nand may execute in any order or execute concurrently.  A workflow is\ncomplete when all steps have been executed.\n\nDependencies between parameters are expressed using the `source` field on\n[workflow step input parameters](#WorkflowStepInput) and [workflow output\nparameters](#WorkflowOutputParameter).\n\nThe `source` field expresses the dependency of one parameter on another\nsuch that when a value is associated with the parameter specified by\n`source`, that value is propagated to the destination parameter.  When all\ndata links inbound to a given step are fufilled, the step is ready to\nexecute.\n\n## Workflow success and failure\n\nA completed step must result in one of `success`, `temporaryFailure` or\n`permanentFailure` states.  An implementation may choose to retry a step\nexecution which resulted in `temporaryFailure`.  An implementation may\nchoose to either continue running other steps of a workflow, or terminate\nimmediately upon `permanentFailure`.\n\n* If any step of a workflow execution results in `permanentFailure`, then\nthe workflow status is `permanentFailure`.\n\n* If one or more steps result in `temporaryFailure` and all other steps\ncomplete `success` or are not executed, then the workflow status is\n`temporaryFailure`.\n\n* If all workflow steps are executed and complete with `success`, then the\nworkflow status is `success`.\n\n# Extensions\n\n[ScatterFeatureRequirement](#ScatterFeatureRequirement) and\n[SubworkflowFeatureRequirement](#SubworkflowFeatureRequirement) are\navailable as standard [extensions](#Extensions_and_Metadata) to core\nworkflow semantics.\n", 
                        "specialize": [
                            {
                                "specializeFrom": "https://w3id.org/cwl/cwl#OutputParameter", 
                                "specializeTo": "https://w3id.org/cwl/cwl#WorkflowOutputParameter"
                            }
                        ], 
                        "type": "record", 
                        "fields": [
                            {
                                "doc": "The unique identifier for this process object.", 
                                "jsonldPredicate": "@id", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "id", 
                                "inherited_from": "https://w3id.org/cwl/cwl#Process"
                            }, 
                            {
                                "doc": "Defines the input parameters of the process.  The process is ready to\nrun when all required input parameters are associated with concrete\nvalues.  Input parameters include a schema for each parameter which is\nused to validate the input object.  It may also be used to build a user\ninterface for constructing the input object.\n\nWhen accepting an input object, all input parameters must have a value.\nIf an input parameter is missing from the input object, it must be\nassigned a value of `null` (or the value of `default` for that\nparameter, if provided) for the purposes of validation and evaluation\nof expressions.\n", 
                                "jsonldPredicate": {
                                    "_id": "https://w3id.org/cwl/cwl#inputs", 
                                    "mapSubject": "id", 
                                    "mapPredicate": "type"
                                }, 
                                "type": {
                                    "items": "InputParameter", 
                                    "type": "array"
                                }, 
                                "name": "inputs", 
                                "inherited_from": "https://w3id.org/cwl/cwl#Process"
                            }, 
                            {
                                "doc": "Defines the parameters representing the output of the process.  May be\nused to generate and/or validate the output object.\n", 
                                "jsonldPredicate": {
                                    "_id": "https://w3id.org/cwl/cwl#outputs", 
                                    "mapSubject": "id", 
                                    "mapPredicate": "type"
                                }, 
                                "type": {
                                    "items": "WorkflowOutputParameter", 
                                    "type": "array"
                                }, 
                                "name": "outputs", 
                                "inherited_from": "https://w3id.org/cwl/cwl#Process"
                            }, 
                            {
                                "doc": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this process.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.\n", 
                                "jsonldPredicate": {
                                    "_id": "https://w3id.org/cwl/cwl#requirements", 
                                    "mapSubject": "class"
                                }, 
                                "type": [
                                    "null", 
                                    {
                                        "items": [
                                            "InlineJavascriptRequirement", 
                                            "SchemaDefRequirement", 
                                            "DockerRequirement", 
                                            "SoftwareRequirement", 
                                            "InitialWorkDirRequirement", 
                                            "EnvVarRequirement", 
                                            "ShellCommandRequirement", 
                                            "ResourceRequirement", 
                                            "SubworkflowFeatureRequirement", 
                                            "ScatterFeatureRequirement", 
                                            "MultipleInputFeatureRequirement", 
                                            "StepInputExpressionRequirement"
                                        ], 
                                        "type": "array"
                                    }
                                ], 
                                "name": "requirements", 
                                "inherited_from": "https://w3id.org/cwl/cwl#Process"
                            }, 
                            {
                                "doc": "Declares hints applying to either the runtime environment or the\nworkflow engine that may be helpful in executing this process.  It is\nnot an error if an implementation cannot satisfy all hints, however\nthe implementation may report a warning.\n", 
                                "jsonldPredicate": {
                                    "mapSubject": "class", 
                                    "_id": "https://w3id.org/cwl/cwl#hints", 
                                    "noLinkCheck": true
                                }, 
                                "type": [
                                    "null", 
                                    {
                                        "items": "Any", 
                                        "type": "array"
                                    }
                                ], 
                                "name": "hints", 
                                "inherited_from": "https://w3id.org/cwl/cwl#Process"
                            }, 
                            {
                                "doc": "A short, human-readable label of this process object.", 
                                "jsonldPredicate": "rdfs:label", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "label", 
                                "inherited_from": "https://w3id.org/cwl/cwl#Process"
                            }, 
                            {
                                "doc": "A long, human-readable description of this process object.", 
                                "jsonldPredicate": "rdfs:comment", 
                                "type": [
                                    "null", 
                                    "string"
                                ], 
                                "name": "doc", 
                                "inherited_from": "https://w3id.org/cwl/cwl#Process"
                            }, 
                            {
                                "doc": "CWL document version. Always required at the document root. Not\nrequired for a Process embedded inside another Process.\n", 
                                "jsonldPredicate": {
                                    "_type": "@vocab", 
                                    "_id": "https://w3id.org/cwl/cwl#cwlVersion"
                                }, 
                                "type": [
                                    "null", 
                                    "CWLVersion"
                                ], 
                                "name": "cwlVersion", 
                                "inherited_from": "https://w3id.org/cwl/cwl#Process"
                            }, 
                            {
                                "jsonldPredicate": {
                                    "_type": "@vocab", 
                                    "_id": "@type"
                                }, 
                                "type": "string", 
                                "name": "class"
                            }, 
                            {
                                "doc": "The individual steps that make up the workflow.  Each step is executed when all of its\ninput data links are fufilled.  An implementation may choose to execute\nthe steps in a different order than listed and/or execute steps\nconcurrently, provided that dependencies between steps are met.\n", 
                                "jsonldPredicate": {
                                    "mapSubject": "id"
                                }, 
                                "type": [
                                    {
                                        "items": "WorkflowStep", 
                                        "type": "array"
                                    }
                                ], 
                                "name": "steps"
                            }
                        ]
                    }
                ], 
                "name": "run"
            }, 
            {
                "jsonldPredicate": {
                    "refScope": 0, 
                    "_type": "@id", 
                    "_id": "https://w3id.org/cwl/cwl#scatter", 
                    "_container": "@list"
                }, 
                "type": [
                    "null", 
                    "string", 
                    {
                        "items": "string", 
                        "type": "array"
                    }
                ], 
                "name": "scatter"
            }, 
            {
                "doc": "Required if `scatter` is an array of more than one element.\n", 
                "jsonldPredicate": {
                    "_type": "@vocab", 
                    "_id": "https://w3id.org/cwl/cwl#scatterMethod"
                }, 
                "type": [
                    "null", 
                    "ScatterMethod"
                ], 
                "name": "scatterMethod"
            }
        ]
    }
]
