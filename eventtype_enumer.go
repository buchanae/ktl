// Code generated by "enumer -type=EventType -text"; DO NOT EDIT

package ktl

import (
	"fmt"
)

const _EventTypeName = "StartStop"

var _EventTypeIndex = [...]uint8{0, 5, 9}

func (i EventType) String() string {
	if i < 0 || i >= EventType(len(_EventTypeIndex)-1) {
		return fmt.Sprintf("EventType(%d)", i)
	}
	return _EventTypeName[_EventTypeIndex[i]:_EventTypeIndex[i+1]]
}

var _EventTypeValues = []EventType{0, 1}

var _EventTypeNameToValueMap = map[string]EventType{
	_EventTypeName[0:5]: 0,
	_EventTypeName[5:9]: 1,
}

// EventTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EventTypeString(s string) (EventType, error) {
	if val, ok := _EventTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EventType values", s)
}

// EventTypeValues returns all values of the enum
func EventTypeValues() []EventType {
	return _EventTypeValues
}

// IsAEventType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EventType) IsAEventType() bool {
	for _, v := range _EventTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for EventType
func (i EventType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for EventType
func (i *EventType) UnmarshalText(text []byte) error {
	var err error
	*i, err = EventTypeString(string(text))
	return err
}
