// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dag.proto

/*
Package dag is a generated protocol buffer package.

It is generated from these files:
	dag.proto

It has these top-level messages:
	Step
	Event
*/
package dag

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	EventType_UNKNOWN EventType = 0
	EventType_WAITING EventType = 1
	EventType_READY   EventType = 2
	EventType_SUCCESS EventType = 3
	EventType_FAILURE EventType = 4
)

var EventType_name = map[int32]string{
	0: "UNKNOWN",
	1: "WAITING",
	2: "READY",
	3: "SUCCESS",
	4: "FAILURE",
}
var EventType_value = map[string]int32{
	"UNKNOWN": 0,
	"WAITING": 1,
	"READY":   2,
	"SUCCESS": 3,
	"FAILURE": 4,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Step struct {
	DagId   string   `protobuf:"bytes,1,opt,name=dag_id,json=dagId" json:"dag_id,omitempty"`
	StepId  string   `protobuf:"bytes,2,opt,name=step_id,json=stepId" json:"step_id,omitempty"`
	Depends []string `protobuf:"bytes,3,rep,name=depends" json:"depends,omitempty"`
}

func (m *Step) Reset()                    { *m = Step{} }
func (m *Step) String() string            { return proto.CompactTextString(m) }
func (*Step) ProtoMessage()               {}
func (*Step) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Step) GetDagId() string {
	if m != nil {
		return m.DagId
	}
	return ""
}

func (m *Step) GetStepId() string {
	if m != nil {
		return m.StepId
	}
	return ""
}

func (m *Step) GetDepends() []string {
	if m != nil {
		return m.Depends
	}
	return nil
}

type Event struct {
	StepId string    `protobuf:"bytes,1,opt,name=step_id,json=stepId" json:"step_id,omitempty"`
	Event  EventType `protobuf:"varint,2,opt,name=event,enum=dag.EventType" json:"event,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetStepId() string {
	if m != nil {
		return m.StepId
	}
	return ""
}

func (m *Event) GetEvent() EventType {
	if m != nil {
		return m.Event
	}
	return EventType_UNKNOWN
}

func init() {
	proto.RegisterType((*Step)(nil), "dag.Step")
	proto.RegisterType((*Event)(nil), "dag.Event")
	proto.RegisterEnum("dag.EventType", EventType_name, EventType_value)
}

func init() { proto.RegisterFile("dag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x40, 0x4d, 0xd3, 0xec, 0x92, 0x11, 0x4a, 0x08, 0x88, 0x7b, 0x2c, 0xc5, 0x43, 0xf1, 0xd0,
	0x83, 0x7e, 0xc1, 0x52, 0x53, 0x89, 0x4a, 0x94, 0xa4, 0x4b, 0xf1, 0x24, 0x91, 0x09, 0xc1, 0x4b,
	0x37, 0xb8, 0x41, 0xf0, 0xef, 0x25, 0x11, 0x45, 0x8f, 0xef, 0x25, 0x6f, 0x98, 0x01, 0x8e, 0x3e,
	0x6e, 0xd2, 0xfb, 0x98, 0x47, 0x49, 0xd1, 0xc7, 0xd5, 0x13, 0xcc, 0x5d, 0x0e, 0x49, 0x9e, 0x41,
	0x83, 0x3e, 0xbe, 0xbc, 0x61, 0x47, 0x96, 0x64, 0xcd, 0x2d, 0x43, 0x1f, 0x35, 0xca, 0x73, 0x68,
	0xa7, 0x1c, 0x52, 0xf1, 0xb3, 0xea, 0x9b, 0x82, 0x1a, 0x65, 0x07, 0x2d, 0x86, 0x14, 0x8e, 0x38,
	0x75, 0x74, 0x49, 0xd7, 0xdc, 0xfe, 0xe0, 0x6a, 0x07, 0x4c, 0x7d, 0x84, 0x63, 0xfe, 0xdb, 0x92,
	0x7f, 0xed, 0x05, 0xb0, 0x50, 0x7e, 0xd4, 0x91, 0x8b, 0xab, 0xc5, 0xa6, 0xec, 0x54, 0x9b, 0xfd,
	0x67, 0x0a, 0xf6, 0xfb, 0xf1, 0xf2, 0x0e, 0xf8, 0xaf, 0x93, 0xa7, 0xd0, 0x0e, 0xe6, 0xde, 0x3c,
	0x1e, 0x8c, 0x38, 0x29, 0x70, 0xe8, 0xf5, 0x5e, 0x9b, 0x5b, 0x41, 0x24, 0x07, 0x66, 0x55, 0x7f,
	0xf3, 0x2c, 0x66, 0xc5, 0xbb, 0x61, 0xbb, 0x55, 0xce, 0x09, 0x5a, 0x60, 0xd7, 0xeb, 0x87, 0xc1,
	0x2a, 0x31, 0x7f, 0x6d, 0xea, 0xc5, 0xd7, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2a, 0xfc, 0x7d,
	0x56, 0xfe, 0x00, 0x00, 0x00,
}
